// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./awsAccount";
export * from "./awsElasticContainerRegistry";
export * from "./azureCloudServiceDeploymentTarget";
export * from "./azureServiceFabricClusterDeploymentTarget";
export * from "./azureServicePrincipal";
export * from "./azureSubscriptionAccount";
export * from "./azureWebAppDeploymentTarget";
export * from "./certificate";
export * from "./channel";
export * from "./cloudRegionDeploymentTarget";
export * from "./deploymentProcess";
export * from "./dockerContainerRegistry";
export * from "./dynamicWorkerPool";
export * from "./environment";
export * from "./gcpAccount";
export * from "./getAccounts";
export * from "./getAzureCloudServiceDeploymentTargets";
export * from "./getAzureServiceFabricClusterDeploymentTargets";
export * from "./getAzureWebAppDeploymentTargets";
export * from "./getCertificates";
export * from "./getChannels";
export * from "./getCloudRegionDeploymentTargets";
export * from "./getDeploymentTargets";
export * from "./getEnvironments";
export * from "./getFeeds";
export * from "./getGitCredentials";
export * from "./getKubernetesClusterDeploymentTargets";
export * from "./getLibraryVariableSets";
export * from "./getLifecycles";
export * from "./getListeningTentacleDeploymentTargets";
export * from "./getMachine";
export * from "./getMachinePolicies";
export * from "./getOfflinePackageDropDeploymentTargets";
export * from "./getPollingTentacleDeploymentTargets";
export * from "./getProjectGroups";
export * from "./getProjects";
export * from "./getScriptModules";
export * from "./getSpace";
export * from "./getSpaces";
export * from "./getSshConnectionDeploymentTargets";
export * from "./getTagSets";
export * from "./getTeams";
export * from "./getTenants";
export * from "./getUserRoles";
export * from "./getUsers";
export * from "./getVariables";
export * from "./getWorkerPools";
export * from "./gitCredentials";
export * from "./githubRepositoryFeed";
export * from "./helmFeed";
export * from "./kubernetesClusterDeploymentTarget";
export * from "./libraryVariableSet";
export * from "./lifecycle";
export * from "./listeningTentacleDeploymentTarget";
export * from "./machinePolicy";
export * from "./mavenFeed";
export * from "./nugetFeed";
export * from "./offlinePackageDropDeploymentTarget";
export * from "./pollingTentacleDeploymentTarget";
export * from "./project";
export * from "./projectDeploymentTargetTrigger";
export * from "./projectGroup";
export * from "./provider";
export * from "./runbook";
export * from "./runbookProcess";
export * from "./scopedUserRole";
export * from "./scriptModule";
export * from "./space";
export * from "./sshConnectionDeploymentTarget";
export * from "./sshKeyAccount";
export * from "./staticWorkerPool";
export * from "./tag";
export * from "./tagSet";
export * from "./team";
export * from "./tenant";
export * from "./tenantCommonVariable";
export * from "./tenantProjectVariable";
export * from "./tokenAccount";
export * from "./user";
export * from "./userRole";
export * from "./usernamePasswordAccount";
export * from "./variable";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AwsAccount } from "./awsAccount";
import { AwsElasticContainerRegistry } from "./awsElasticContainerRegistry";
import { AzureCloudServiceDeploymentTarget } from "./azureCloudServiceDeploymentTarget";
import { AzureServiceFabricClusterDeploymentTarget } from "./azureServiceFabricClusterDeploymentTarget";
import { AzureServicePrincipal } from "./azureServicePrincipal";
import { AzureSubscriptionAccount } from "./azureSubscriptionAccount";
import { AzureWebAppDeploymentTarget } from "./azureWebAppDeploymentTarget";
import { Certificate } from "./certificate";
import { Channel } from "./channel";
import { CloudRegionDeploymentTarget } from "./cloudRegionDeploymentTarget";
import { DeploymentProcess } from "./deploymentProcess";
import { DockerContainerRegistry } from "./dockerContainerRegistry";
import { DynamicWorkerPool } from "./dynamicWorkerPool";
import { Environment } from "./environment";
import { GcpAccount } from "./gcpAccount";
import { GitCredentials } from "./gitCredentials";
import { GithubRepositoryFeed } from "./githubRepositoryFeed";
import { HelmFeed } from "./helmFeed";
import { KubernetesClusterDeploymentTarget } from "./kubernetesClusterDeploymentTarget";
import { LibraryVariableSet } from "./libraryVariableSet";
import { Lifecycle } from "./lifecycle";
import { ListeningTentacleDeploymentTarget } from "./listeningTentacleDeploymentTarget";
import { MachinePolicy } from "./machinePolicy";
import { MavenFeed } from "./mavenFeed";
import { NugetFeed } from "./nugetFeed";
import { OfflinePackageDropDeploymentTarget } from "./offlinePackageDropDeploymentTarget";
import { PollingTentacleDeploymentTarget } from "./pollingTentacleDeploymentTarget";
import { Project } from "./project";
import { ProjectDeploymentTargetTrigger } from "./projectDeploymentTargetTrigger";
import { ProjectGroup } from "./projectGroup";
import { Runbook } from "./runbook";
import { RunbookProcess } from "./runbookProcess";
import { ScopedUserRole } from "./scopedUserRole";
import { ScriptModule } from "./scriptModule";
import { Space } from "./space";
import { SshConnectionDeploymentTarget } from "./sshConnectionDeploymentTarget";
import { SshKeyAccount } from "./sshKeyAccount";
import { StaticWorkerPool } from "./staticWorkerPool";
import { Tag } from "./tag";
import { TagSet } from "./tagSet";
import { Team } from "./team";
import { Tenant } from "./tenant";
import { TenantCommonVariable } from "./tenantCommonVariable";
import { TenantProjectVariable } from "./tenantProjectVariable";
import { TokenAccount } from "./tokenAccount";
import { User } from "./user";
import { UserRole } from "./userRole";
import { UsernamePasswordAccount } from "./usernamePasswordAccount";
import { Variable } from "./variable";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "octopusdeploy:index/awsAccount:AwsAccount":
                return new AwsAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/awsElasticContainerRegistry:AwsElasticContainerRegistry":
                return new AwsElasticContainerRegistry(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureCloudServiceDeploymentTarget:AzureCloudServiceDeploymentTarget":
                return new AzureCloudServiceDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureServiceFabricClusterDeploymentTarget:AzureServiceFabricClusterDeploymentTarget":
                return new AzureServiceFabricClusterDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureServicePrincipal:AzureServicePrincipal":
                return new AzureServicePrincipal(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureSubscriptionAccount:AzureSubscriptionAccount":
                return new AzureSubscriptionAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureWebAppDeploymentTarget:AzureWebAppDeploymentTarget":
                return new AzureWebAppDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "octopusdeploy:index/channel:Channel":
                return new Channel(name, <any>undefined, { urn })
            case "octopusdeploy:index/cloudRegionDeploymentTarget:CloudRegionDeploymentTarget":
                return new CloudRegionDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/deploymentProcess:DeploymentProcess":
                return new DeploymentProcess(name, <any>undefined, { urn })
            case "octopusdeploy:index/dockerContainerRegistry:DockerContainerRegistry":
                return new DockerContainerRegistry(name, <any>undefined, { urn })
            case "octopusdeploy:index/dynamicWorkerPool:DynamicWorkerPool":
                return new DynamicWorkerPool(name, <any>undefined, { urn })
            case "octopusdeploy:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "octopusdeploy:index/gcpAccount:GcpAccount":
                return new GcpAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/gitCredentials:GitCredentials":
                return new GitCredentials(name, <any>undefined, { urn })
            case "octopusdeploy:index/githubRepositoryFeed:GithubRepositoryFeed":
                return new GithubRepositoryFeed(name, <any>undefined, { urn })
            case "octopusdeploy:index/helmFeed:HelmFeed":
                return new HelmFeed(name, <any>undefined, { urn })
            case "octopusdeploy:index/kubernetesClusterDeploymentTarget:KubernetesClusterDeploymentTarget":
                return new KubernetesClusterDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/libraryVariableSet:LibraryVariableSet":
                return new LibraryVariableSet(name, <any>undefined, { urn })
            case "octopusdeploy:index/lifecycle:Lifecycle":
                return new Lifecycle(name, <any>undefined, { urn })
            case "octopusdeploy:index/listeningTentacleDeploymentTarget:ListeningTentacleDeploymentTarget":
                return new ListeningTentacleDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/machinePolicy:MachinePolicy":
                return new MachinePolicy(name, <any>undefined, { urn })
            case "octopusdeploy:index/mavenFeed:MavenFeed":
                return new MavenFeed(name, <any>undefined, { urn })
            case "octopusdeploy:index/nugetFeed:NugetFeed":
                return new NugetFeed(name, <any>undefined, { urn })
            case "octopusdeploy:index/offlinePackageDropDeploymentTarget:OfflinePackageDropDeploymentTarget":
                return new OfflinePackageDropDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/pollingTentacleDeploymentTarget:PollingTentacleDeploymentTarget":
                return new PollingTentacleDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger":
                return new ProjectDeploymentTargetTrigger(name, <any>undefined, { urn })
            case "octopusdeploy:index/projectGroup:ProjectGroup":
                return new ProjectGroup(name, <any>undefined, { urn })
            case "octopusdeploy:index/runbook:Runbook":
                return new Runbook(name, <any>undefined, { urn })
            case "octopusdeploy:index/runbookProcess:RunbookProcess":
                return new RunbookProcess(name, <any>undefined, { urn })
            case "octopusdeploy:index/scopedUserRole:ScopedUserRole":
                return new ScopedUserRole(name, <any>undefined, { urn })
            case "octopusdeploy:index/scriptModule:ScriptModule":
                return new ScriptModule(name, <any>undefined, { urn })
            case "octopusdeploy:index/space:Space":
                return new Space(name, <any>undefined, { urn })
            case "octopusdeploy:index/sshConnectionDeploymentTarget:SshConnectionDeploymentTarget":
                return new SshConnectionDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/sshKeyAccount:SshKeyAccount":
                return new SshKeyAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/staticWorkerPool:StaticWorkerPool":
                return new StaticWorkerPool(name, <any>undefined, { urn })
            case "octopusdeploy:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "octopusdeploy:index/tagSet:TagSet":
                return new TagSet(name, <any>undefined, { urn })
            case "octopusdeploy:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "octopusdeploy:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "octopusdeploy:index/tenantCommonVariable:TenantCommonVariable":
                return new TenantCommonVariable(name, <any>undefined, { urn })
            case "octopusdeploy:index/tenantProjectVariable:TenantProjectVariable":
                return new TenantProjectVariable(name, <any>undefined, { urn })
            case "octopusdeploy:index/tokenAccount:TokenAccount":
                return new TokenAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "octopusdeploy:index/userRole:UserRole":
                return new UserRole(name, <any>undefined, { urn })
            case "octopusdeploy:index/usernamePasswordAccount:UsernamePasswordAccount":
                return new UsernamePasswordAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("octopusdeploy", "index/awsAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/awsElasticContainerRegistry", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureCloudServiceDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureServiceFabricClusterDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureServicePrincipal", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureSubscriptionAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureWebAppDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/certificate", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/channel", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/cloudRegionDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/deploymentProcess", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/dockerContainerRegistry", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/dynamicWorkerPool", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/environment", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/gcpAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/gitCredentials", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/githubRepositoryFeed", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/helmFeed", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/kubernetesClusterDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/libraryVariableSet", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/lifecycle", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/listeningTentacleDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/machinePolicy", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/mavenFeed", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/nugetFeed", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/offlinePackageDropDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/pollingTentacleDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/project", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/projectDeploymentTargetTrigger", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/projectGroup", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/runbook", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/runbookProcess", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/scopedUserRole", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/scriptModule", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/space", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/sshConnectionDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/sshKeyAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/staticWorkerPool", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tag", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tagSet", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/team", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tenant", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tenantCommonVariable", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tenantProjectVariable", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tokenAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/user", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/userRole", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/usernamePasswordAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/variable", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("octopusdeploy", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:octopusdeploy") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
