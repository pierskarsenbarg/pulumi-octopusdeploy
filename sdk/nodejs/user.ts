// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource manages users in Octopus Deploy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as octopusdeploy from "@pulumi/octopusdeploy";
 *
 * const example = new octopusdeploy.User("example", {
 *     displayName: "Bob Smith",
 *     emailAddress: "bob.smith@example.com",
 *     identities: [{
 *         claims: [
 *             {
 *                 isIdentifyingClaim: true,
 *                 name: "email",
 *                 value: "bob.smith@example.com",
 *             },
 *             {
 *                 isIdentifyingClaim: false,
 *                 name: "dn",
 *                 value: "Bob Smith",
 *             },
 *         ],
 *         provider: "Octopus ID",
 *     }],
 *     isActive: true,
 *     isService: false,
 *     password: "###########",
 *     username: "[username]",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import octopusdeploy:index/user:User [options] octopusdeploy_user.<name> <user-id>
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'octopusdeploy:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public /*out*/ readonly canPasswordBeEdited!: pulumi.Output<boolean>;
    /**
     * The display name of this resource.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The email address of this resource.
     */
    public readonly emailAddress!: pulumi.Output<string | undefined>;
    public readonly identities!: pulumi.Output<outputs.UserIdentity[] | undefined>;
    public readonly isActive!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly isRequestor!: pulumi.Output<boolean>;
    public readonly isService!: pulumi.Output<boolean | undefined>;
    /**
     * The password associated with this resource.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The username associated with this resource.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["canPasswordBeEdited"] = state ? state.canPasswordBeEdited : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["emailAddress"] = state ? state.emailAddress : undefined;
            resourceInputs["identities"] = state ? state.identities : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["isRequestor"] = state ? state.isRequestor : undefined;
            resourceInputs["isService"] = state ? state.isService : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["emailAddress"] = args ? args.emailAddress : undefined;
            resourceInputs["identities"] = args ? args.identities : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["isService"] = args ? args.isService : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["username"] = args?.username ? pulumi.secret(args.username) : undefined;
            resourceInputs["canPasswordBeEdited"] = undefined /*out*/;
            resourceInputs["isRequestor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "username"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    canPasswordBeEdited?: pulumi.Input<boolean>;
    /**
     * The display name of this resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The email address of this resource.
     */
    emailAddress?: pulumi.Input<string>;
    identities?: pulumi.Input<pulumi.Input<inputs.UserIdentity>[]>;
    isActive?: pulumi.Input<boolean>;
    isRequestor?: pulumi.Input<boolean>;
    isService?: pulumi.Input<boolean>;
    /**
     * The password associated with this resource.
     */
    password?: pulumi.Input<string>;
    /**
     * The username associated with this resource.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * The display name of this resource.
     */
    displayName: pulumi.Input<string>;
    /**
     * The email address of this resource.
     */
    emailAddress?: pulumi.Input<string>;
    identities?: pulumi.Input<pulumi.Input<inputs.UserIdentity>[]>;
    isActive?: pulumi.Input<boolean>;
    isService?: pulumi.Input<boolean>;
    /**
     * The password associated with this resource.
     */
    password?: pulumi.Input<string>;
    /**
     * The username associated with this resource.
     */
    username: pulumi.Input<string>;
}
