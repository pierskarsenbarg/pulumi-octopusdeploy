// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource manages tenant project variables in Octopus Deploy.
 */
export class TenantProjectVariable extends pulumi.CustomResource {
    /**
     * Get an existing TenantProjectVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TenantProjectVariableState, opts?: pulumi.CustomResourceOptions): TenantProjectVariable {
        return new TenantProjectVariable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'octopusdeploy:index/tenantProjectVariable:TenantProjectVariable';

    /**
     * Returns true if the given object is an instance of TenantProjectVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TenantProjectVariable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TenantProjectVariable.__pulumiType;
    }

    public readonly environmentId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly templateId!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a TenantProjectVariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TenantProjectVariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TenantProjectVariableArgs | TenantProjectVariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TenantProjectVariableState | undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as TenantProjectVariableArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TenantProjectVariable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TenantProjectVariable resources.
 */
export interface TenantProjectVariableState {
    environmentId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    templateId?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TenantProjectVariable resource.
 */
export interface TenantProjectVariableArgs {
    environmentId: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    templateId: pulumi.Input<string>;
    tenantId: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}
