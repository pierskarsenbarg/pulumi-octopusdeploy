// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource manages user roles in Octopus Deploy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as octopusdeploy from "@pulumi/octopusdeploy";
 *
 * const example = new octopusdeploy.UserRole("example", {
 *     canBeDeleted: true,
 *     description: "Responsible for all development-related operations.",
 *     grantedSpacePermissions: [
 *         "DeploymentCreate",
 *         "DeploymentDelete",
 *         "DeploymentView",
 *     ],
 *     grantedSystemPermissions: ["SpaceCreate"],
 *     spacePermissionDescriptions: [
 *         "Delete deployments (restrictable to Environments, Projects, Tenants)",
 *         "Deploy releases to target environments (restrictable to Environments, Projects, Tenants)",
 *         "View deployments (restrictable to Environments, Projects, Tenants)",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import octopusdeploy:index/userRole:UserRole [options] octopusdeploy_user_role.<name> <user-role-id>
 * ```
 */
export class UserRole extends pulumi.CustomResource {
    /**
     * Get an existing UserRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserRoleState, opts?: pulumi.CustomResourceOptions): UserRole {
        return new UserRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'octopusdeploy:index/userRole:UserRole';

    /**
     * Returns true if the given object is an instance of UserRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserRole.__pulumiType;
    }

    public readonly canBeDeleted!: pulumi.Output<boolean>;
    /**
     * The description of this user role.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly grantedSpacePermissions!: pulumi.Output<string[] | undefined>;
    public readonly grantedSystemPermissions!: pulumi.Output<string[] | undefined>;
    /**
     * The name of this resource.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly spacePermissionDescriptions!: pulumi.Output<string[]>;
    public readonly supportedRestrictions!: pulumi.Output<string[] | undefined>;
    public readonly systemPermissionDescriptions!: pulumi.Output<string[]>;

    /**
     * Create a UserRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserRoleArgs | UserRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserRoleState | undefined;
            resourceInputs["canBeDeleted"] = state ? state.canBeDeleted : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["grantedSpacePermissions"] = state ? state.grantedSpacePermissions : undefined;
            resourceInputs["grantedSystemPermissions"] = state ? state.grantedSystemPermissions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["spacePermissionDescriptions"] = state ? state.spacePermissionDescriptions : undefined;
            resourceInputs["supportedRestrictions"] = state ? state.supportedRestrictions : undefined;
            resourceInputs["systemPermissionDescriptions"] = state ? state.systemPermissionDescriptions : undefined;
        } else {
            const args = argsOrState as UserRoleArgs | undefined;
            resourceInputs["canBeDeleted"] = args ? args.canBeDeleted : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["grantedSpacePermissions"] = args ? args.grantedSpacePermissions : undefined;
            resourceInputs["grantedSystemPermissions"] = args ? args.grantedSystemPermissions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["spacePermissionDescriptions"] = args ? args.spacePermissionDescriptions : undefined;
            resourceInputs["supportedRestrictions"] = args ? args.supportedRestrictions : undefined;
            resourceInputs["systemPermissionDescriptions"] = args ? args.systemPermissionDescriptions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserRole resources.
 */
export interface UserRoleState {
    canBeDeleted?: pulumi.Input<boolean>;
    /**
     * The description of this user role.
     */
    description?: pulumi.Input<string>;
    grantedSpacePermissions?: pulumi.Input<pulumi.Input<string>[]>;
    grantedSystemPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    spacePermissionDescriptions?: pulumi.Input<pulumi.Input<string>[]>;
    supportedRestrictions?: pulumi.Input<pulumi.Input<string>[]>;
    systemPermissionDescriptions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a UserRole resource.
 */
export interface UserRoleArgs {
    canBeDeleted?: pulumi.Input<boolean>;
    /**
     * The description of this user role.
     */
    description?: pulumi.Input<string>;
    grantedSpacePermissions?: pulumi.Input<pulumi.Input<string>[]>;
    grantedSystemPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    spacePermissionDescriptions?: pulumi.Input<pulumi.Input<string>[]>;
    supportedRestrictions?: pulumi.Input<pulumi.Input<string>[]>;
    systemPermissionDescriptions?: pulumi.Input<pulumi.Input<string>[]>;
}
