// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AzureCloudServiceDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.AzureCloudServiceDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.AzureCloudServiceDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.AzureCloudServiceDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface AzureCloudServiceDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface AzureCloudServiceDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface AzureCloudServiceDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.AzureServiceFabricClusterDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.AzureServiceFabricClusterDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.AzureServiceFabricClusterDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.AzureWebAppDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.AzureWebAppDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.AzureWebAppDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.AzureWebAppDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface ChannelRule {
    actionPackages: pulumi.Input<pulumi.Input<inputs.ChannelRuleActionPackage>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface ChannelRuleActionPackage {
    deploymentAction?: pulumi.Input<string>;
    packageReference?: pulumi.Input<string>;
}

export interface DeploymentProcessStep {
    actions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepAction>[]>;
    applyTerraformTemplateActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateAction>[]>;
    /**
     * When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
     */
    condition?: pulumi.Input<string>;
    /**
     * The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
     */
    conditionExpression?: pulumi.Input<string>;
    deployKubernetesSecretActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployKubernetesSecretAction>[]>;
    deployPackageActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployPackageAction>[]>;
    deployWindowsServiceActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceAction>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    manualInterventionActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepManualInterventionAction>[]>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to run this step before or after package acquisition (if possible)
     */
    packageRequirement?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: any}>;
    runKubectlScriptActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptAction>[]>;
    runScriptActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunScriptAction>[]>;
    /**
     * Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
     */
    startTrigger?: pulumi.Input<string>;
    /**
     * The roles that this step run against, or runs on behalf of
     */
    targetRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number of targets to deploy to simultaneously
     */
    windowSize?: pulumi.Input<string>;
}

export interface DeploymentProcessStepAction {
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepActionActionTemplate>;
    actionType: pulumi.Input<string>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepActionPackage>[]>;
    primaryPackage?: pulumi.Input<inputs.DeploymentProcessStepActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    workerPoolId?: pulumi.Input<string>;
    workerPoolVariable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this deployment process.
     */
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    extractDuringDeployment?: pulumi.Input<boolean>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepApplyTerraformTemplateAction {
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionActionTemplate>;
    advancedOptions: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions>;
    awsAccount?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccount>;
    azureAccount?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionAzureAccount>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    googleCloudAccount?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    inlineTemplate?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionPackage>[]>;
    primaryPackage?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    template?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionTemplate>;
    templateParameters?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this deployment process.
     */
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions {
    allowAdditionalPluginDownloads?: pulumi.Input<boolean>;
    applyParameters?: pulumi.Input<string>;
    initParameters?: pulumi.Input<string>;
    pluginCacheDirectory?: pulumi.Input<string>;
    workspace?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAwsAccount {
    region?: pulumi.Input<string>;
    role?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole>;
    useInstanceRole?: pulumi.Input<boolean>;
    variable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole {
    arn?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    roleSessionName?: pulumi.Input<string>;
    sessionDuration?: pulumi.Input<number>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAzureAccount {
    variable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount {
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    variable?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionTemplate {
    additionalVariableFiles?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    runAutomaticFileSubstitution?: pulumi.Input<boolean>;
    targetFiles?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployKubernetesSecretAction {
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepDeployKubernetesSecretActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployKubernetesSecretActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployKubernetesSecretActionPackage>[]>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    secretName: pulumi.Input<string>;
    secretValues: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentProcessStepDeployKubernetesSecretActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this deployment process.
     */
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepDeployKubernetesSecretActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployKubernetesSecretActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepDeployPackageAction {
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionPackage>[]>;
    primaryPackage: pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    windowsService?: pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionWindowsService>;
}

export interface DeploymentProcessStepDeployPackageActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this deployment process.
     */
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepDeployPackageActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployPackageActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepDeployPackageActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepDeployPackageActionWindowsService {
    arguments?: pulumi.Input<string>;
    createOrUpdateService?: pulumi.Input<boolean>;
    customAccountName?: pulumi.Input<string>;
    customAccountPassword?: pulumi.Input<string>;
    dependencies?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    executablePath: pulumi.Input<string>;
    serviceAccount?: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    startMode?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployWindowsServiceAction {
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceActionActionTemplate>;
    arguments?: pulumi.Input<string>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceActionContainer>[]>;
    createOrUpdateService?: pulumi.Input<boolean>;
    customAccountName?: pulumi.Input<string>;
    customAccountPassword?: pulumi.Input<string>;
    dependencies?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    executablePath: pulumi.Input<string>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceActionPackage>[]>;
    primaryPackage: pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    serviceAccount?: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    startMode?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentProcessStepDeployWindowsServiceActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this deployment process.
     */
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepDeployWindowsServiceActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployWindowsServiceActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepManualInterventionAction {
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepManualInterventionActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepManualInterventionActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    instructions: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepManualInterventionActionPackage>[]>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    responsibleTeams?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentProcessStepManualInterventionActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this deployment process.
     */
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepManualInterventionActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepManualInterventionActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepRunKubectlScriptAction {
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptActionPackage>[]>;
    primaryPackage?: pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    scriptFileName?: pulumi.Input<string>;
    scriptParameters?: pulumi.Input<string>;
    scriptSource?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentProcessStepRunKubectlScriptActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this deployment process.
     */
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepRunKubectlScriptActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepRunKubectlScriptActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    extractDuringDeployment?: pulumi.Input<boolean>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepRunKubectlScriptActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepRunScriptAction {
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepRunScriptActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunScriptActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunScriptActionPackage>[]>;
    primaryPackage?: pulumi.Input<inputs.DeploymentProcessStepRunScriptActionPrimaryPackage>;
    /**
     * @deprecated This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    scriptBody?: pulumi.Input<string>;
    scriptFileName?: pulumi.Input<string>;
    scriptParameters?: pulumi.Input<string>;
    scriptSource?: pulumi.Input<string>;
    scriptSyntax?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    variableSubstitutionInFiles?: pulumi.Input<string>;
    workerPoolId?: pulumi.Input<string>;
    workerPoolVariable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepRunScriptActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this deployment process.
     */
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepRunScriptActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepRunScriptActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    extractDuringDeployment?: pulumi.Input<boolean>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepRunScriptActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface EnvironmentJiraExtensionSettings {
    /**
     * The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, or `"unmapped"`.
     */
    environmentType: pulumi.Input<string>;
}

export interface EnvironmentJiraServiceManagementExtensionSettings {
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: pulumi.Input<boolean>;
}

export interface EnvironmentServicenowExtensionSettings {
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: pulumi.Input<boolean>;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTarget {
    accountId?: string;
    cloudServiceName?: string;
    defaultWorkerPoolId?: string;
    endpoints?: inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: boolean;
    isInProcess?: boolean;
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    operatingSystem?: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: string[];
    shellName?: string;
    shellVersion?: string;
    slot?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetArgs {
    accountId?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointArgs>[]>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: pulumi.Input<boolean>;
    isInProcess?: pulumi.Input<boolean>;
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    shellName?: pulumi.Input<string>;
    shellVersion?: pulumi.Input<string>;
    slot?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointArgs {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationArgs>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerArgs>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationArgs>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication?: inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers?: inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations?: inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails?: inputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationArgs {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerArgs {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationArgs {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTarget {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialPassword?: string;
    aadUserCredentialUsername?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    connectionEndpoint?: string;
    endpoints?: inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: boolean;
    isInProcess?: boolean;
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    operatingSystem?: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: string[];
    securityMode?: string;
    serverCertificateThumbprint?: string;
    shellName?: string;
    shellVersion?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetArgs {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialPassword?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointArgs>[]>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: pulumi.Input<boolean>;
    isInProcess?: pulumi.Input<boolean>;
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    shellName?: pulumi.Input<string>;
    shellVersion?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication?: inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers?: inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations?: inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails?: inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointArgs {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerArgs>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerArgs {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTarget {
    accountId?: string;
    endpoints?: inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: boolean;
    isInProcess?: boolean;
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    operatingSystem?: string;
    resourceGroupName?: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: string[];
    shellName?: string;
    shellVersion?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    webAppName?: string;
    webAppSlotName?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetArgs {
    accountId?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointArgs>[]>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: pulumi.Input<boolean>;
    isInProcess?: pulumi.Input<boolean>;
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    shellName?: pulumi.Input<string>;
    shellVersion?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointArgs {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationArgs>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerArgs>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationArgs>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication?: inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers?: inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations?: inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails?: inputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationArgs {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerArgs {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationArgs {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetCertificatesCertificateArgs {
    /**
     * A filter to search for resources that have been archived.
     */
    archived?: pulumi.Input<string>;
    /**
     * The encoded data of the certificate.
     */
    certificateData?: pulumi.Input<string>;
    /**
     * Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
     */
    certificateDataFormat?: pulumi.Input<string>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates if the certificate has a private key.
     */
    hasPrivateKey?: pulumi.Input<boolean>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates if the certificate has expired.
     */
    isExpired?: pulumi.Input<boolean>;
    issuerCommonName?: pulumi.Input<string>;
    issuerDistinguishedName?: pulumi.Input<string>;
    issuerOrganization?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    notAfter?: pulumi.Input<string>;
    notBefore?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    /**
     * The password associated with this resource.
     */
    password?: pulumi.Input<string>;
    replacedBy?: pulumi.Input<string>;
    selfSigned?: pulumi.Input<boolean>;
    serialNumber?: pulumi.Input<string>;
    signatureAlgorithmName?: pulumi.Input<string>;
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    subjectCommonName?: pulumi.Input<string>;
    subjectDistinguishedName?: pulumi.Input<string>;
    subjectOrganization?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    thumbprint?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface GetCertificatesCertificate {
    /**
     * A filter to search for resources that have been archived.
     */
    archived?: string;
    /**
     * The encoded data of the certificate.
     */
    certificateData?: string;
    /**
     * Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
     */
    certificateDataFormat?: string;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    /**
     * Indicates if the certificate has a private key.
     */
    hasPrivateKey?: boolean;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * Indicates if the certificate has expired.
     */
    isExpired?: boolean;
    issuerCommonName?: string;
    issuerDistinguishedName?: string;
    issuerOrganization?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    notAfter?: string;
    notBefore?: string;
    notes?: string;
    /**
     * The password associated with this resource.
     */
    password?: string;
    replacedBy?: string;
    selfSigned?: boolean;
    serialNumber?: string;
    signatureAlgorithmName?: string;
    subjectAlternativeNames?: string[];
    subjectCommonName?: string;
    subjectDistinguishedName?: string;
    subjectOrganization?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    thumbprint?: string;
    version?: number;
}

export interface GetChannelsChannel {
    /**
     * The description of this channel.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * Indicates if this is the default channel for the associated project.
     */
    isDefault?: boolean;
    /**
     * The lifecycle ID associated with this channel.
     */
    lifecycleId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    /**
     * The project ID associated with this channel.
     */
    projectId?: string;
    /**
     * A list of rules associated with this channel.
     */
    rules?: inputs.GetChannelsChannelRule[];
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
}

export interface GetChannelsChannelArgs {
    /**
     * The description of this channel.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates if this is the default channel for the associated project.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The lifecycle ID associated with this channel.
     */
    lifecycleId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The project ID associated with this channel.
     */
    projectId?: pulumi.Input<string>;
    /**
     * A list of rules associated with this channel.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.GetChannelsChannelRuleArgs>[]>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetChannelsChannelRule {
    actionPackages: inputs.GetChannelsChannelRuleActionPackage[];
    /**
     * The ID of this resource.
     */
    id?: string;
    tag?: string;
    versionRange?: string;
}

export interface GetChannelsChannelRuleArgs {
    actionPackages: pulumi.Input<pulumi.Input<inputs.GetChannelsChannelRuleActionPackageArgs>[]>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface GetChannelsChannelRuleActionPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface GetChannelsChannelRuleActionPackageArgs {
    deploymentAction?: pulumi.Input<string>;
    packageReference?: pulumi.Input<string>;
}

export interface GetCloudRegionDeploymentTargetsCloudRegionDeploymentTarget {
    defaultWorkerPoolId?: string;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: boolean;
    isInProcess?: boolean;
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    operatingSystem?: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: string[];
    shellName?: string;
    shellVersion?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
}

export interface GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetArgs {
    defaultWorkerPoolId?: pulumi.Input<string>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: pulumi.Input<boolean>;
    isInProcess?: pulumi.Input<boolean>;
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    shellName?: pulumi.Input<string>;
    shellVersion?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetDeploymentTargetsDeploymentTarget {
    endpoints?: inputs.GetDeploymentTargetsDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: boolean;
    isInProcess?: boolean;
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    operatingSystem?: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: string[];
    shellName?: string;
    shellVersion?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
}

export interface GetDeploymentTargetsDeploymentTargetArgs {
    endpoints?: pulumi.Input<pulumi.Input<inputs.GetDeploymentTargetsDeploymentTargetEndpointArgs>[]>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: pulumi.Input<boolean>;
    isInProcess?: pulumi.Input<boolean>;
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    shellName?: pulumi.Input<string>;
    shellVersion?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetDeploymentTargetsDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication?: inputs.GetDeploymentTargetsDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers?: inputs.GetDeploymentTargetsDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations?: inputs.GetDeploymentTargetsDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * The ID of this resource.
     */
    id?: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails?: inputs.GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointArgs {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.GetDeploymentTargetsDeploymentTargetEndpointAuthenticationArgs>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.GetDeploymentTargetsDeploymentTargetEndpointContainerArgs>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetDeploymentTargetsDeploymentTargetEndpointDestinationArgs>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointAuthenticationArgs {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointContainerArgs {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointDestinationArgs {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetEnvironmentsEnvironment {
    allowDynamicInfrastructure?: boolean;
    /**
     * The description of this environment.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * Provides extension settings for the Jira integration for this environment.
     */
    jiraExtensionSettings?: inputs.GetEnvironmentsEnvironmentJiraExtensionSetting[];
    /**
     * Provides extension settings for the Jira Service Management (JSM) integration for this environment.
     */
    jiraServiceManagementExtensionSettings?: inputs.GetEnvironmentsEnvironmentJiraServiceManagementExtensionSetting[];
    /**
     * The name of this resource.
     */
    name?: string;
    /**
     * Provides extension settings for the ServiceNow integration for this environment.
     */
    servicenowExtensionSettings?: inputs.GetEnvironmentsEnvironmentServicenowExtensionSetting[];
    slug?: string;
    /**
     * The order number to sort an environment.
     */
    sortOrder?: number;
    /**
     * The space ID associated with this environment.
     */
    spaceId?: string;
    useGuidedFailure?: boolean;
}

export interface GetEnvironmentsEnvironmentArgs {
    allowDynamicInfrastructure?: pulumi.Input<boolean>;
    /**
     * The description of this environment.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Provides extension settings for the Jira integration for this environment.
     */
    jiraExtensionSettings?: pulumi.Input<pulumi.Input<inputs.GetEnvironmentsEnvironmentJiraExtensionSettingArgs>[]>;
    /**
     * Provides extension settings for the Jira Service Management (JSM) integration for this environment.
     */
    jiraServiceManagementExtensionSettings?: pulumi.Input<pulumi.Input<inputs.GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs>[]>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Provides extension settings for the ServiceNow integration for this environment.
     */
    servicenowExtensionSettings?: pulumi.Input<pulumi.Input<inputs.GetEnvironmentsEnvironmentServicenowExtensionSettingArgs>[]>;
    slug?: pulumi.Input<string>;
    /**
     * The order number to sort an environment.
     */
    sortOrder?: pulumi.Input<number>;
    /**
     * The space ID associated with this environment.
     */
    spaceId?: pulumi.Input<string>;
    useGuidedFailure?: pulumi.Input<boolean>;
}

export interface GetEnvironmentsEnvironmentJiraExtensionSetting {
    environmentType: string;
}

export interface GetEnvironmentsEnvironmentJiraExtensionSettingArgs {
    environmentType: pulumi.Input<string>;
}

export interface GetEnvironmentsEnvironmentJiraServiceManagementExtensionSetting {
    isEnabled: boolean;
}

export interface GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs {
    isEnabled: pulumi.Input<boolean>;
}

export interface GetEnvironmentsEnvironmentServicenowExtensionSettingArgs {
    isEnabled: pulumi.Input<boolean>;
}

export interface GetEnvironmentsEnvironmentServicenowExtensionSetting {
    isEnabled: boolean;
}

export interface GetFeedsFeed {
    accessKey?: string;
    apiVersion?: string;
    deleteUnreleasedPackagesAfterDays?: number;
    /**
     * The number of times a deployment should attempt to download a package from this feed before failing.
     */
    downloadAttempts?: number;
    /**
     * The number of seconds to apply as a linear back off between download attempts.
     */
    downloadRetryBackoffSeconds?: number;
    /**
     * A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
     */
    feedType?: string;
    feedUri?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    isEnhancedMode?: boolean;
    /**
     * A short, memorable, unique name for this feed. Example: ACME Builds.
     */
    name?: string;
    packageAcquisitionLocationOptions?: string[];
    /**
     * The password associated with this resource.
     */
    password?: string;
    region?: string;
    registryPath?: string;
    secretKey?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The username associated with this resource.
     */
    username?: string;
}

export interface GetFeedsFeedArgs {
    accessKey?: pulumi.Input<string>;
    apiVersion?: pulumi.Input<string>;
    deleteUnreleasedPackagesAfterDays?: pulumi.Input<number>;
    /**
     * The number of times a deployment should attempt to download a package from this feed before failing.
     */
    downloadAttempts?: pulumi.Input<number>;
    /**
     * The number of seconds to apply as a linear back off between download attempts.
     */
    downloadRetryBackoffSeconds?: pulumi.Input<number>;
    /**
     * A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
     */
    feedType?: pulumi.Input<string>;
    feedUri?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isEnhancedMode?: pulumi.Input<boolean>;
    /**
     * A short, memorable, unique name for this feed. Example: ACME Builds.
     */
    name?: pulumi.Input<string>;
    packageAcquisitionLocationOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The password associated with this resource.
     */
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    registryPath?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The username associated with this resource.
     */
    username?: pulumi.Input<string>;
}

export interface GetGitCredentialsGitCredential {
    /**
     * The description of this Git credential.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * The name of the Git credential. This name must be unique.
     */
    name?: string;
    /**
     * The password for the Git credential.
     */
    password?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The Git credential authentication type.
     */
    type?: string;
    /**
     * The username for the Git credential.
     */
    username?: string;
}

export interface GetGitCredentialsGitCredentialArgs {
    /**
     * The description of this Git credential.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the Git credential. This name must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the Git credential.
     */
    password?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    type?: pulumi.Input<string>;
    /**
     * The username for the Git credential.
     */
    username?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTarget {
    authentications?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthentication[];
    awsAccountAuthentications?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthentication[];
    azureServicePrincipalAuthentications?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication[];
    certificateAuthentications?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthentication[];
    clusterCertificate?: string;
    clusterUrl?: string;
    containers?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainer[];
    defaultWorkerPoolId?: string;
    endpoints?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    gcpAccountAuthentications?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthentication[];
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: boolean;
    isInProcess?: boolean;
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    namespace?: string;
    operatingSystem?: string;
    proxyId?: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: string[];
    runningInContainer?: boolean;
    shellName?: string;
    shellVersion?: string;
    skipTlsVerification?: boolean;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetArgs {
    authentications?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationArgs>[]>;
    awsAccountAuthentications?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs>[]>;
    azureServicePrincipalAuthentications?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs>[]>;
    certificateAuthentications?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationArgs>[]>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerArgs>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointArgs>[]>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    gcpAccountAuthentications?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs>[]>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: pulumi.Input<boolean>;
    isInProcess?: pulumi.Input<boolean>;
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    proxyId?: pulumi.Input<string>;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    runningInContainer?: pulumi.Input<boolean>;
    shellName?: pulumi.Input<string>;
    shellVersion?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthentication {
    accountId?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationArgs {
    accountId?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthentication {
    accountId: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    clusterName: string;
    useInstanceRole?: boolean;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs {
    accountId: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication {
    accountId: string;
    clusterName: string;
    clusterResourceGroup: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs {
    accountId: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    clusterResourceGroup: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationArgs {
    clientCertificate?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthentication {
    clientCertificate?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainer {
    feedId?: string;
    image?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerArgs {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails?: inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointArgs {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationArgs>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerArgs>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationArgs>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationArgs {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerArgs {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationArgs {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthentication {
    accountId: string;
    clusterName: string;
    impersonateServiceAccount?: boolean;
    project: string;
    region?: string;
    serviceAccountEmails?: string;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs {
    accountId: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface GetLibraryVariableSetsLibraryVariableSetArgs {
    /**
     * The description of this library variable set.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.GetLibraryVariableSetsLibraryVariableSetTemplateArgs>[]>;
    variableSetId?: pulumi.Input<string>;
}

export interface GetLibraryVariableSetsLibraryVariableSet {
    /**
     * The description of this library variable set.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    templates?: inputs.GetLibraryVariableSetsLibraryVariableSetTemplate[];
    variableSetId?: string;
}

export interface GetLibraryVariableSetsLibraryVariableSetTemplate {
    defaultValue?: string;
    displaySettings?: {[key: string]: any};
    helpText?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
    label?: string;
    name: string;
}

export interface GetLibraryVariableSetsLibraryVariableSetTemplateArgs {
    defaultValue?: pulumi.Input<string>;
    displaySettings?: pulumi.Input<{[key: string]: any}>;
    helpText?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface GetLifecyclesLifecycleArgs {
    /**
     * The description of this lifecycle.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    phases?: pulumi.Input<pulumi.Input<inputs.GetLifecyclesLifecyclePhaseArgs>[]>;
    releaseRetentionPolicies?: pulumi.Input<pulumi.Input<inputs.GetLifecyclesLifecycleReleaseRetentionPolicyArgs>[]>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    tentacleRetentionPolicies?: pulumi.Input<pulumi.Input<inputs.GetLifecyclesLifecycleTentacleRetentionPolicyArgs>[]>;
}

export interface GetLifecyclesLifecycle {
    /**
     * The description of this lifecycle.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    phases?: inputs.GetLifecyclesLifecyclePhase[];
    releaseRetentionPolicies?: inputs.GetLifecyclesLifecycleReleaseRetentionPolicy[];
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    tentacleRetentionPolicies?: inputs.GetLifecyclesLifecycleTentacleRetentionPolicy[];
}

export interface GetLifecyclesLifecyclePhase {
    automaticDeploymentTargets?: string[];
    /**
     * The ID of this resource.
     */
    id?: string;
    isOptionalPhase?: boolean;
    minimumEnvironmentsBeforePromotion?: number;
    name: string;
    optionalDeploymentTargets?: string[];
    releaseRetentionPolicy?: inputs.GetLifecyclesLifecyclePhaseReleaseRetentionPolicy;
    tentacleRetentionPolicy?: inputs.GetLifecyclesLifecyclePhaseTentacleRetentionPolicy;
}

export interface GetLifecyclesLifecyclePhaseArgs {
    automaticDeploymentTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    isOptionalPhase?: pulumi.Input<boolean>;
    minimumEnvironmentsBeforePromotion?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    optionalDeploymentTargets?: pulumi.Input<pulumi.Input<string>[]>;
    releaseRetentionPolicy?: pulumi.Input<inputs.GetLifecyclesLifecyclePhaseReleaseRetentionPolicyArgs>;
    tentacleRetentionPolicy?: pulumi.Input<inputs.GetLifecyclesLifecyclePhaseTentacleRetentionPolicyArgs>;
}

export interface GetLifecyclesLifecyclePhaseReleaseRetentionPolicy {
    quantityToKeep?: number;
    shouldKeepForever?: boolean;
    unit?: string;
}

export interface GetLifecyclesLifecyclePhaseReleaseRetentionPolicyArgs {
    quantityToKeep?: pulumi.Input<number>;
    shouldKeepForever?: pulumi.Input<boolean>;
    unit?: pulumi.Input<string>;
}

export interface GetLifecyclesLifecyclePhaseTentacleRetentionPolicy {
    quantityToKeep?: number;
    shouldKeepForever?: boolean;
    unit?: string;
}

export interface GetLifecyclesLifecyclePhaseTentacleRetentionPolicyArgs {
    quantityToKeep?: pulumi.Input<number>;
    shouldKeepForever?: pulumi.Input<boolean>;
    unit?: pulumi.Input<string>;
}

export interface GetLifecyclesLifecycleReleaseRetentionPolicy {
    quantityToKeep?: number;
    shouldKeepForever?: boolean;
    unit?: string;
}

export interface GetLifecyclesLifecycleReleaseRetentionPolicyArgs {
    quantityToKeep?: pulumi.Input<number>;
    shouldKeepForever?: pulumi.Input<boolean>;
    unit?: pulumi.Input<string>;
}

export interface GetLifecyclesLifecycleTentacleRetentionPolicyArgs {
    quantityToKeep?: pulumi.Input<number>;
    shouldKeepForever?: pulumi.Input<boolean>;
    unit?: pulumi.Input<string>;
}

export interface GetLifecyclesLifecycleTentacleRetentionPolicy {
    quantityToKeep?: number;
    shouldKeepForever?: boolean;
    unit?: string;
}

export interface GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTarget {
    certificateSignatureAlgorithm?: string;
    /**
     * A list of environment IDs associated with this listening tentacle.
     */
    environments?: string[];
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * Represents the disabled status of this deployment target.
     */
    isDisabled?: boolean;
    /**
     * Represents the in-process status of this deployment target.
     */
    isInProcess?: boolean;
    /**
     * The machine policy ID that is associated with this deployment target.
     */
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    /**
     * The operating system that is associated with this deployment target.
     */
    operatingSystem?: string;
    /**
     * The proxy ID that is associated with this deployment target.
     */
    proxyId?: string;
    /**
     * A list of role IDs that are associated with this deployment target.
     */
    roles?: string[];
    /**
     * The shell name associated with this deployment target.
     */
    shellName?: string;
    /**
     * The shell version associated with this deployment target.
     */
    shellVersion?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    /**
     * The tenant URL of this deployment target.
     */
    tentacleUrl?: string;
    tentacleVersionDetails?: inputs.GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetail[];
    /**
     * The thumbprint of this deployment target.
     */
    thumbprint?: string;
    /**
     * The URI of this deployment target.
     */
    uri?: string;
}

export interface GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetArgs {
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * A list of environment IDs associated with this listening tentacle.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Represents the disabled status of this deployment target.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Represents the in-process status of this deployment target.
     */
    isInProcess?: pulumi.Input<boolean>;
    /**
     * The machine policy ID that is associated with this deployment target.
     */
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The operating system that is associated with this deployment target.
     */
    operatingSystem?: pulumi.Input<string>;
    /**
     * The proxy ID that is associated with this deployment target.
     */
    proxyId?: pulumi.Input<string>;
    /**
     * A list of role IDs that are associated with this deployment target.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The shell name associated with this deployment target.
     */
    shellName?: pulumi.Input<string>;
    /**
     * The shell version associated with this deployment target.
     */
    shellVersion?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenant URL of this deployment target.
     */
    tentacleUrl?: pulumi.Input<string>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of this deployment target.
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * The URI of this deployment target.
     */
    uri?: pulumi.Input<string>;
}

export interface GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetMachinePoliciesMachinePolicyArgs {
    connectionConnectTimeout?: pulumi.Input<number>;
    connectionRetryCountLimit?: pulumi.Input<number>;
    connectionRetrySleepInterval?: pulumi.Input<number>;
    connectionRetryTimeLimit?: pulumi.Input<number>;
    /**
     * The description of this machine policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    machineCleanupPolicies?: pulumi.Input<pulumi.Input<inputs.GetMachinePoliciesMachinePolicyMachineCleanupPolicyArgs>[]>;
    machineConnectivityPolicies?: pulumi.Input<pulumi.Input<inputs.GetMachinePoliciesMachinePolicyMachineConnectivityPolicyArgs>[]>;
    machineHealthCheckPolicies?: pulumi.Input<pulumi.Input<inputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyArgs>[]>;
    machineUpdatePolicies?: pulumi.Input<pulumi.Input<inputs.GetMachinePoliciesMachinePolicyMachineUpdatePolicyArgs>[]>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    pollingRequestMaximumMessageProcessingTimeout?: pulumi.Input<number>;
    pollingRequestQueueTimeout?: pulumi.Input<number>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
}

export interface GetMachinePoliciesMachinePolicy {
    connectionConnectTimeout?: number;
    connectionRetryCountLimit?: number;
    connectionRetrySleepInterval?: number;
    connectionRetryTimeLimit?: number;
    /**
     * The description of this machine policy.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    isDefault?: boolean;
    machineCleanupPolicies?: inputs.GetMachinePoliciesMachinePolicyMachineCleanupPolicy[];
    machineConnectivityPolicies?: inputs.GetMachinePoliciesMachinePolicyMachineConnectivityPolicy[];
    machineHealthCheckPolicies?: inputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicy[];
    machineUpdatePolicies?: inputs.GetMachinePoliciesMachinePolicyMachineUpdatePolicy[];
    /**
     * The name of this resource.
     */
    name?: string;
    pollingRequestMaximumMessageProcessingTimeout?: number;
    pollingRequestQueueTimeout?: number;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
}

export interface GetMachinePoliciesMachinePolicyMachineCleanupPolicy {
    deleteMachinesBehavior?: string;
    deleteMachinesElapsedTimespan?: number;
}

export interface GetMachinePoliciesMachinePolicyMachineCleanupPolicyArgs {
    deleteMachinesBehavior?: pulumi.Input<string>;
    deleteMachinesElapsedTimespan?: pulumi.Input<number>;
}

export interface GetMachinePoliciesMachinePolicyMachineConnectivityPolicy {
    machineConnectivityBehavior?: string;
}

export interface GetMachinePoliciesMachinePolicyMachineConnectivityPolicyArgs {
    machineConnectivityBehavior?: pulumi.Input<string>;
}

export interface GetMachinePoliciesMachinePolicyMachineHealthCheckPolicy {
    bashHealthCheckPolicy: inputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy;
    healthCheckCron?: string;
    healthCheckCronTimezone?: string;
    healthCheckInterval?: number;
    healthCheckType?: string;
    powershellHealthCheckPolicy: inputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy;
}

export interface GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyArgs {
    bashHealthCheckPolicy: pulumi.Input<inputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs>;
    healthCheckCron?: pulumi.Input<string>;
    healthCheckCronTimezone?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    powershellHealthCheckPolicy: pulumi.Input<inputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs>;
}

export interface GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs {
    runType?: pulumi.Input<string>;
    scriptBody?: pulumi.Input<string>;
}

export interface GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy {
    runType?: string;
    scriptBody?: string;
}

export interface GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy {
    runType?: string;
    scriptBody?: string;
}

export interface GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs {
    runType?: pulumi.Input<string>;
    scriptBody?: pulumi.Input<string>;
}

export interface GetMachinePoliciesMachinePolicyMachineUpdatePolicy {
    calamariUpdateBehavior?: string;
    tentacleUpdateAccountId?: string;
    tentacleUpdateBehavior?: string;
}

export interface GetMachinePoliciesMachinePolicyMachineUpdatePolicyArgs {
    calamariUpdateBehavior?: pulumi.Input<string>;
    tentacleUpdateAccountId?: pulumi.Input<string>;
    tentacleUpdateBehavior?: pulumi.Input<string>;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTarget {
    applicationsDirectory?: string;
    destinations?: inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestination[];
    endpoints?: inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: boolean;
    isInProcess?: boolean;
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    operatingSystem?: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: string[];
    shellName?: string;
    shellVersion?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    workingDirectory?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetArgs {
    applicationsDirectory?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationArgs>[]>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointArgs>[]>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: pulumi.Input<boolean>;
    isInProcess?: pulumi.Input<boolean>;
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    shellName?: pulumi.Input<string>;
    shellVersion?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationArgs {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication?: inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers?: inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations?: inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails?: inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointArgs {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationArgs>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerArgs>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationArgs>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationArgs {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerArgs {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationArgs {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTarget {
    certificateSignatureAlgorithm?: string;
    endpoints?: inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: boolean;
    isInProcess?: boolean;
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    operatingSystem?: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: string[];
    shellName?: string;
    shellVersion?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    tentacleUrl?: string;
    tentacleVersionDetails?: inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetArgs {
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointArgs>[]>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: pulumi.Input<boolean>;
    isInProcess?: pulumi.Input<boolean>;
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    shellName?: pulumi.Input<string>;
    shellVersion?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    tentacleUrl?: pulumi.Input<string>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication?: inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers?: inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations?: inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails?: inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointArgs {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationArgs>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerArgs>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationArgs>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationArgs {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerArgs {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationArgs {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetProjectGroupsProjectGroup {
    /**
     * The description of this project group.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    /**
     * The ID of the retention policy associated with this project group.
     */
    retentionPolicyId?: string;
    /**
     * The space ID associated with this project group.
     */
    spaceId?: string;
}

export interface GetProjectGroupsProjectGroupArgs {
    /**
     * The description of this project group.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the retention policy associated with this project group.
     */
    retentionPolicyId?: pulumi.Input<string>;
    /**
     * The space ID associated with this project group.
     */
    spaceId?: pulumi.Input<string>;
}

export interface GetProjectsProject {
    /**
     * @deprecated This value is only valid for an associated connectivity policy and should not be specified here.
     */
    allowDeploymentsToNoTargets?: boolean;
    autoCreateRelease?: boolean;
    autoDeployReleaseOverrides?: string[];
    /**
     * A filter to search for cloned resources by a project ID.
     */
    clonedFromProjectId?: string;
    connectivityPolicies?: inputs.GetProjectsProjectConnectivityPolicy[];
    defaultGuidedFailureMode?: string;
    defaultToSkipIfAlreadyInstalled?: boolean;
    deploymentChangesTemplate?: string;
    deploymentProcessId?: string;
    /**
     * The description of this project.
     */
    description?: string;
    /**
     * Treats releases of different channels to the same environment as a separate deployment dimension
     */
    discreteChannelRelease?: boolean;
    /**
     * Provides Git-related persistence settings for a version-controlled project.
     */
    gitAnonymousPersistenceSettings?: inputs.GetProjectsProjectGitAnonymousPersistenceSetting[];
    /**
     * Provides Git-related persistence settings for a version-controlled project.
     */
    gitLibraryPersistenceSettings?: inputs.GetProjectsProjectGitLibraryPersistenceSetting[];
    /**
     * Provides Git-related persistence settings for a version-controlled project.
     */
    gitUsernamePasswordPersistenceSettings?: inputs.GetProjectsProjectGitUsernamePasswordPersistenceSetting[];
    /**
     * The unique ID for this resource.
     */
    id?: string;
    includedLibraryVariableSets?: string[];
    isDisabled?: boolean;
    /**
     * Treats releases of different channels to the same environment as a separate deployment dimension
     */
    isDiscreteChannelRelease?: boolean;
    isVersionControlled?: boolean;
    /**
     * Provides extension settings for the Jira Service Management (JSM) integration for this project.
     */
    jiraServiceManagementExtensionSettings?: inputs.GetProjectsProjectJiraServiceManagementExtensionSetting[];
    /**
     * The lifecycle ID associated with this project.
     */
    lifecycleId?: string;
    /**
     * The name of the project in Octopus Deploy. This name must be unique.
     */
    name?: string;
    /**
     * The project group ID associated with this project.
     */
    projectGroupId?: string;
    releaseCreationStrategies?: inputs.GetProjectsProjectReleaseCreationStrategy[];
    releaseNotesTemplate?: string;
    /**
     * Provides extension settings for the ServiceNow integration for this project.
     */
    servicenowExtensionSettings?: inputs.GetProjectsProjectServicenowExtensionSetting[];
    /**
     * A human-readable, unique identifier, used to identify a project.
     */
    slug?: string;
    /**
     * The space ID associated with this project.
     */
    spaceId?: string;
    templates?: inputs.GetProjectsProjectTemplate[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    variableSetId?: string;
    versioningStrategies?: inputs.GetProjectsProjectVersioningStrategy[];
}

export interface GetProjectsProjectArgs {
    /**
     * @deprecated This value is only valid for an associated connectivity policy and should not be specified here.
     */
    allowDeploymentsToNoTargets?: pulumi.Input<boolean>;
    autoCreateRelease?: pulumi.Input<boolean>;
    autoDeployReleaseOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to search for cloned resources by a project ID.
     */
    clonedFromProjectId?: pulumi.Input<string>;
    connectivityPolicies?: pulumi.Input<pulumi.Input<inputs.GetProjectsProjectConnectivityPolicyArgs>[]>;
    defaultGuidedFailureMode?: pulumi.Input<string>;
    defaultToSkipIfAlreadyInstalled?: pulumi.Input<boolean>;
    deploymentChangesTemplate?: pulumi.Input<string>;
    deploymentProcessId?: pulumi.Input<string>;
    /**
     * The description of this project.
     */
    description?: pulumi.Input<string>;
    /**
     * Treats releases of different channels to the same environment as a separate deployment dimension
     */
    discreteChannelRelease?: pulumi.Input<boolean>;
    /**
     * Provides Git-related persistence settings for a version-controlled project.
     */
    gitAnonymousPersistenceSettings?: pulumi.Input<pulumi.Input<inputs.GetProjectsProjectGitAnonymousPersistenceSettingArgs>[]>;
    /**
     * Provides Git-related persistence settings for a version-controlled project.
     */
    gitLibraryPersistenceSettings?: pulumi.Input<pulumi.Input<inputs.GetProjectsProjectGitLibraryPersistenceSettingArgs>[]>;
    /**
     * Provides Git-related persistence settings for a version-controlled project.
     */
    gitUsernamePasswordPersistenceSettings?: pulumi.Input<pulumi.Input<inputs.GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    includedLibraryVariableSets?: pulumi.Input<pulumi.Input<string>[]>;
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Treats releases of different channels to the same environment as a separate deployment dimension
     */
    isDiscreteChannelRelease?: pulumi.Input<boolean>;
    isVersionControlled?: pulumi.Input<boolean>;
    /**
     * Provides extension settings for the Jira Service Management (JSM) integration for this project.
     */
    jiraServiceManagementExtensionSettings?: pulumi.Input<pulumi.Input<inputs.GetProjectsProjectJiraServiceManagementExtensionSettingArgs>[]>;
    /**
     * The lifecycle ID associated with this project.
     */
    lifecycleId?: pulumi.Input<string>;
    /**
     * The name of the project in Octopus Deploy. This name must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The project group ID associated with this project.
     */
    projectGroupId?: pulumi.Input<string>;
    releaseCreationStrategies?: pulumi.Input<pulumi.Input<inputs.GetProjectsProjectReleaseCreationStrategyArgs>[]>;
    releaseNotesTemplate?: pulumi.Input<string>;
    /**
     * Provides extension settings for the ServiceNow integration for this project.
     */
    servicenowExtensionSettings?: pulumi.Input<pulumi.Input<inputs.GetProjectsProjectServicenowExtensionSettingArgs>[]>;
    /**
     * A human-readable, unique identifier, used to identify a project.
     */
    slug?: pulumi.Input<string>;
    /**
     * The space ID associated with this project.
     */
    spaceId?: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<inputs.GetProjectsProjectTemplateArgs>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    variableSetId?: pulumi.Input<string>;
    versioningStrategies?: pulumi.Input<pulumi.Input<inputs.GetProjectsProjectVersioningStrategyArgs>[]>;
}

export interface GetProjectsProjectConnectivityPolicy {
    allowDeploymentsToNoTargets?: boolean;
    excludeUnhealthyTargets?: boolean;
    skipMachineBehavior?: string;
    targetRoles?: string[];
}

export interface GetProjectsProjectConnectivityPolicyArgs {
    allowDeploymentsToNoTargets?: pulumi.Input<boolean>;
    excludeUnhealthyTargets?: pulumi.Input<boolean>;
    skipMachineBehavior?: pulumi.Input<string>;
    targetRoles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetProjectsProjectGitAnonymousPersistenceSetting {
    basePath?: string;
    defaultBranch?: string;
    protectedBranches?: string[];
    url: string;
}

export interface GetProjectsProjectGitAnonymousPersistenceSettingArgs {
    basePath?: pulumi.Input<string>;
    defaultBranch?: pulumi.Input<string>;
    protectedBranches?: pulumi.Input<pulumi.Input<string>[]>;
    url: pulumi.Input<string>;
}

export interface GetProjectsProjectGitLibraryPersistenceSetting {
    basePath?: string;
    defaultBranch?: string;
    gitCredentialId: string;
    protectedBranches?: string[];
    url: string;
}

export interface GetProjectsProjectGitLibraryPersistenceSettingArgs {
    basePath?: pulumi.Input<string>;
    defaultBranch?: pulumi.Input<string>;
    gitCredentialId: pulumi.Input<string>;
    protectedBranches?: pulumi.Input<pulumi.Input<string>[]>;
    url: pulumi.Input<string>;
}

export interface GetProjectsProjectGitUsernamePasswordPersistenceSetting {
    basePath?: string;
    defaultBranch?: string;
    password: string;
    protectedBranches?: string[];
    url: string;
    username: string;
}

export interface GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs {
    basePath?: pulumi.Input<string>;
    defaultBranch?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    protectedBranches?: pulumi.Input<pulumi.Input<string>[]>;
    url: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface GetProjectsProjectJiraServiceManagementExtensionSettingArgs {
    connectionId: pulumi.Input<string>;
    isEnabled: pulumi.Input<boolean>;
    serviceDeskProjectName: pulumi.Input<string>;
}

export interface GetProjectsProjectJiraServiceManagementExtensionSetting {
    connectionId: string;
    isEnabled: boolean;
    serviceDeskProjectName: string;
}

export interface GetProjectsProjectReleaseCreationStrategy {
    channelId?: string;
    releaseCreationPackage?: inputs.GetProjectsProjectReleaseCreationStrategyReleaseCreationPackage;
    releaseCreationPackageStepId?: string;
}

export interface GetProjectsProjectReleaseCreationStrategyArgs {
    channelId?: pulumi.Input<string>;
    releaseCreationPackage?: pulumi.Input<inputs.GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageArgs>;
    releaseCreationPackageStepId?: pulumi.Input<string>;
}

export interface GetProjectsProjectReleaseCreationStrategyReleaseCreationPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageArgs {
    deploymentAction?: pulumi.Input<string>;
    packageReference?: pulumi.Input<string>;
}

export interface GetProjectsProjectServicenowExtensionSetting {
    connectionId: string;
    isEnabled: boolean;
    isStateAutomaticallyTransitioned: boolean;
    standardChangeTemplateName: string;
}

export interface GetProjectsProjectServicenowExtensionSettingArgs {
    connectionId: pulumi.Input<string>;
    isEnabled: pulumi.Input<boolean>;
    isStateAutomaticallyTransitioned: pulumi.Input<boolean>;
    standardChangeTemplateName: pulumi.Input<string>;
}

export interface GetProjectsProjectTemplate {
    defaultValue?: string;
    displaySettings?: {[key: string]: any};
    helpText?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
    label?: string;
    /**
     * A filter to search by name.
     */
    name: string;
}

export interface GetProjectsProjectTemplateArgs {
    defaultValue?: pulumi.Input<string>;
    displaySettings?: pulumi.Input<{[key: string]: any}>;
    helpText?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    /**
     * A filter to search by name.
     */
    name: pulumi.Input<string>;
}

export interface GetProjectsProjectVersioningStrategy {
    donorPackage?: inputs.GetProjectsProjectVersioningStrategyDonorPackage;
    donorPackageStepId?: string;
    template?: string;
}

export interface GetProjectsProjectVersioningStrategyArgs {
    donorPackage?: pulumi.Input<inputs.GetProjectsProjectVersioningStrategyDonorPackageArgs>;
    donorPackageStepId?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface GetProjectsProjectVersioningStrategyDonorPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface GetProjectsProjectVersioningStrategyDonorPackageArgs {
    deploymentAction?: pulumi.Input<string>;
    packageReference?: pulumi.Input<string>;
}

export interface GetScriptModulesScriptModule {
    /**
     * The description of this script module.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    /**
     * The script associated with this script module.
     */
    scripts?: inputs.GetScriptModulesScriptModuleScript[];
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The variable set ID for this script module.
     */
    variableSetId?: string;
}

export interface GetScriptModulesScriptModuleArgs {
    /**
     * The description of this script module.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The script associated with this script module.
     */
    scripts?: pulumi.Input<pulumi.Input<inputs.GetScriptModulesScriptModuleScriptArgs>[]>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The variable set ID for this script module.
     */
    variableSetId?: pulumi.Input<string>;
}

export interface GetScriptModulesScriptModuleScript {
    body: string;
    syntax: string;
}

export interface GetScriptModulesScriptModuleScriptArgs {
    body: pulumi.Input<string>;
    syntax: pulumi.Input<string>;
}

export interface GetSpacesSpace {
    /**
     * The description of this space.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * Specifies if this space is the default space in Octopus.
     */
    isDefault?: boolean;
    /**
     * Specifies the status of the task queue for this space.
     */
    isTaskQueueStopped?: boolean;
    /**
     * The name of this resource.
     */
    name?: string;
    /**
     * The unique slug of this space.
     */
    slug?: string;
    /**
     * A list of user IDs designated to be managers of this space.
     */
    spaceManagersTeamMembers?: string[];
    /**
     * A list of team IDs designated to be managers of this space.
     */
    spaceManagersTeams?: string[];
}

export interface GetSpacesSpaceArgs {
    /**
     * The description of this space.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Specifies if this space is the default space in Octopus.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Specifies the status of the task queue for this space.
     */
    isTaskQueueStopped?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique slug of this space.
     */
    slug?: pulumi.Input<string>;
    /**
     * A list of user IDs designated to be managers of this space.
     */
    spaceManagersTeamMembers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of team IDs designated to be managers of this space.
     */
    spaceManagersTeams?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTarget {
    accountId?: string;
    dotNetCorePlatform?: string;
    endpoints?: inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: string[];
    fingerprint?: string;
    hasLatestCalamari?: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: string;
    host?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: boolean;
    isInProcess?: boolean;
    machinePolicyId?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    operatingSystem?: string;
    port?: number;
    proxyId?: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: string[];
    shellName?: string;
    shellVersion?: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetArgs {
    accountId?: pulumi.Input<string>;
    dotNetCorePlatform?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointArgs>[]>;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    fingerprint?: pulumi.Input<string>;
    hasLatestCalamari?: pulumi.Input<boolean>;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled?: pulumi.Input<boolean>;
    isInProcess?: pulumi.Input<boolean>;
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    /**
     * A filter to search by a list of role IDs.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    shellName?: pulumi.Input<string>;
    shellVersion?: pulumi.Input<string>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status?: pulumi.Input<string>;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication?: inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers?: inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations?: inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails?: inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointArgs {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationArgs>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerArgs>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationArgs>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs>[]>;
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationArgs {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerArgs {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationArgs {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: boolean;
    upgradeRequired?: boolean;
    upgradeSuggested?: boolean;
    version?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface GetTagSetsTagSet {
    /**
     * The description of this tag set.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    /**
     * The sort order associated with this resource.
     */
    sortOrder?: number;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
}

export interface GetTagSetsTagSetArgs {
    /**
     * The description of this tag set.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The sort order associated with this resource.
     */
    sortOrder?: pulumi.Input<number>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
}

export interface GetTeamsTeam {
    canBeDeleted?: boolean;
    canBeRenamed?: boolean;
    canChangeMembers?: boolean;
    canChangeRoles?: boolean;
    /**
     * The user-friendly description of this team.
     */
    description?: string;
    externalSecurityGroups?: inputs.GetTeamsTeamExternalSecurityGroup[];
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * The name of this team.
     */
    name?: string;
    /**
     * The space associated with this team.
     */
    spaceId?: string;
    /**
     * A list of user IDs designated to be members of this team.
     */
    users?: string[];
}

export interface GetTeamsTeamArgs {
    canBeDeleted?: pulumi.Input<boolean>;
    canBeRenamed?: pulumi.Input<boolean>;
    canChangeMembers?: pulumi.Input<boolean>;
    canChangeRoles?: pulumi.Input<boolean>;
    /**
     * The user-friendly description of this team.
     */
    description?: pulumi.Input<string>;
    externalSecurityGroups?: pulumi.Input<pulumi.Input<inputs.GetTeamsTeamExternalSecurityGroupArgs>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this team.
     */
    name?: pulumi.Input<string>;
    /**
     * The space associated with this team.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * A list of user IDs designated to be members of this team.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetTeamsTeamExternalSecurityGroupArgs {
    displayIdAndName?: pulumi.Input<boolean>;
    displayName?: pulumi.Input<string>;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: pulumi.Input<string>;
}

export interface GetTeamsTeamExternalSecurityGroup {
    displayIdAndName?: boolean;
    displayName?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id?: string;
}

export interface GetTenantsTenant {
    /**
     * The ID of the tenant from which this tenant was cloned.
     */
    clonedFromTenantId?: string;
    /**
     * The description of this tenant.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    projectEnvironments?: inputs.GetTenantsTenantProjectEnvironment[];
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: string[];
}

export interface GetTenantsTenantArgs {
    /**
     * The ID of the tenant from which this tenant was cloned.
     */
    clonedFromTenantId?: pulumi.Input<string>;
    /**
     * The description of this tenant.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    projectEnvironments?: pulumi.Input<pulumi.Input<inputs.GetTenantsTenantProjectEnvironmentArgs>[]>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetTenantsTenantProjectEnvironment {
    environments: string[];
    /**
     * A filter to search by a project ID.
     */
    projectId: string;
}

export interface GetTenantsTenantProjectEnvironmentArgs {
    environments: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to search by a project ID.
     */
    projectId: pulumi.Input<string>;
}

export interface GetUserRolesUserRole {
    canBeDeleted?: boolean;
    /**
     * The description of this user role.
     */
    description?: string;
    grantedSpacePermissions?: string[];
    grantedSystemPermissions?: string[];
    /**
     * The unique ID for this resource.
     */
    id?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    spacePermissionDescriptions?: string[];
    supportedRestrictions?: string[];
    systemPermissionDescriptions?: string[];
}

export interface GetUserRolesUserRoleArgs {
    canBeDeleted?: pulumi.Input<boolean>;
    /**
     * The description of this user role.
     */
    description?: pulumi.Input<string>;
    grantedSpacePermissions?: pulumi.Input<pulumi.Input<string>[]>;
    grantedSystemPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    spacePermissionDescriptions?: pulumi.Input<pulumi.Input<string>[]>;
    supportedRestrictions?: pulumi.Input<pulumi.Input<string>[]>;
    systemPermissionDescriptions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetUsersUser {
    canPasswordBeEdited?: boolean;
    /**
     * The display name of this resource.
     */
    displayName?: string;
    /**
     * The email address of this resource.
     */
    emailAddress?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    identities?: inputs.GetUsersUserIdentity[];
    isActive?: boolean;
    isRequestor?: boolean;
    isService?: boolean;
    /**
     * The password associated with this resource.
     */
    password?: string;
    /**
     * The username associated with this resource.
     */
    username?: string;
}

export interface GetUsersUserArgs {
    canPasswordBeEdited?: pulumi.Input<boolean>;
    /**
     * The display name of this resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The email address of this resource.
     */
    emailAddress?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    identities?: pulumi.Input<pulumi.Input<inputs.GetUsersUserIdentityArgs>[]>;
    isActive?: pulumi.Input<boolean>;
    isRequestor?: pulumi.Input<boolean>;
    isService?: pulumi.Input<boolean>;
    /**
     * The password associated with this resource.
     */
    password?: pulumi.Input<string>;
    /**
     * The username associated with this resource.
     */
    username?: pulumi.Input<string>;
}

export interface GetUsersUserIdentity {
    claims?: inputs.GetUsersUserIdentityClaim[];
    provider?: string;
}

export interface GetUsersUserIdentityArgs {
    claims?: pulumi.Input<pulumi.Input<inputs.GetUsersUserIdentityClaimArgs>[]>;
    provider?: pulumi.Input<string>;
}

export interface GetUsersUserIdentityClaim {
    isIdentifyingClaim: boolean;
    name: string;
    value: string;
}

export interface GetUsersUserIdentityClaimArgs {
    isIdentifyingClaim: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GetVariablesVariable {
    /**
     * The description of this variable.
     */
    description?: string;
    encryptedValue?: string;
    /**
     * Indicates whether or not this variable is considered editable.
     */
    isEditable?: boolean;
    /**
     * Indicates whether or not this resource is considered sensitive and should be kept secret.
     */
    isSensitive?: boolean;
    keyFingerprint?: string;
    /**
     * The name of this resource.
     */
    name?: string;
    ownerId?: string;
    pgpKey?: string;
    /**
     * @deprecated This attribute is deprecated; please use owner_id instead.
     */
    projectId?: string;
    prompts?: inputs.GetVariablesVariablePrompt[];
    scopes?: inputs.GetVariablesVariableScope[];
    sensitiveValue?: string;
    /**
     * The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
     */
    type?: string;
    value?: string;
}

export interface GetVariablesVariableArgs {
    /**
     * The description of this variable.
     */
    description?: pulumi.Input<string>;
    encryptedValue?: pulumi.Input<string>;
    /**
     * Indicates whether or not this variable is considered editable.
     */
    isEditable?: pulumi.Input<boolean>;
    /**
     * Indicates whether or not this resource is considered sensitive and should be kept secret.
     */
    isSensitive?: pulumi.Input<boolean>;
    keyFingerprint?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    pgpKey?: pulumi.Input<string>;
    /**
     * @deprecated This attribute is deprecated; please use owner_id instead.
     */
    projectId?: pulumi.Input<string>;
    prompts?: pulumi.Input<pulumi.Input<inputs.GetVariablesVariablePromptArgs>[]>;
    scopes?: pulumi.Input<pulumi.Input<inputs.GetVariablesVariableScopeArgs>[]>;
    sensitiveValue?: pulumi.Input<string>;
    /**
     * The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
     */
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetVariablesVariablePrompt {
    description?: string;
    displaySettings?: inputs.GetVariablesVariablePromptDisplaySettings;
    isRequired?: boolean;
    label?: string;
}

export interface GetVariablesVariablePromptArgs {
    description?: pulumi.Input<string>;
    displaySettings?: pulumi.Input<inputs.GetVariablesVariablePromptDisplaySettingsArgs>;
    isRequired?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
}

export interface GetVariablesVariablePromptDisplaySettingsArgs {
    controlType: pulumi.Input<string>;
    selectOptions?: pulumi.Input<pulumi.Input<inputs.GetVariablesVariablePromptDisplaySettingsSelectOptionArgs>[]>;
}

export interface GetVariablesVariablePromptDisplaySettings {
    controlType: string;
    selectOptions?: inputs.GetVariablesVariablePromptDisplaySettingsSelectOption[];
}

export interface GetVariablesVariablePromptDisplaySettingsSelectOption {
    displayName: string;
    value: string;
}

export interface GetVariablesVariablePromptDisplaySettingsSelectOptionArgs {
    displayName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GetVariablesVariableScope {
    actions?: string[];
    channels?: string[];
    environments?: string[];
    machines?: string[];
    roles?: string[];
    tenantTags?: string[];
}

export interface GetVariablesVariableScopeArgs {
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    machines?: pulumi.Input<pulumi.Input<string>[]>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetWorkerPoolsWorkerPool {
    canAddWorkers?: boolean;
    /**
     * The description of this worker pool.
     */
    description?: string;
    /**
     * The unique ID for this resource.
     */
    id?: string;
    isDefault?: boolean;
    /**
     * The name of this resource.
     */
    name?: string;
    /**
     * The order number to sort a dynamic worker pool.
     */
    sortOrder?: number;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: string;
    workerPoolType?: string;
    workerType?: string;
}

export interface GetWorkerPoolsWorkerPoolArgs {
    canAddWorkers?: pulumi.Input<boolean>;
    /**
     * The description of this worker pool.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The order number to sort a dynamic worker pool.
     */
    sortOrder?: pulumi.Input<number>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    workerPoolType?: pulumi.Input<string>;
    workerType?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetAuthentication {
    accountId?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetAwsAccountAuthentication {
    accountId: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
}

export interface KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication {
    accountId: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    clusterResourceGroup: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetCertificateAuthentication {
    clientCertificate?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.KubernetesClusterDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetGcpAccountAuthentication {
    accountId: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface LibraryVariableSetTemplate {
    /**
     * A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * The display settings for the parameter.
     */
    displaySettings?: pulumi.Input<{[key: string]: any}>;
    /**
     * The help presented alongside the parameter input.
     */
    helpText?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
     */
    label?: pulumi.Input<string>;
    /**
     * The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
     */
    name: pulumi.Input<string>;
}

export interface LifecyclePhase {
    /**
     * Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
     */
    automaticDeploymentTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * If false a release must be deployed to this phase before it can be deployed to the next phase.
     */
    isOptionalPhase?: pulumi.Input<boolean>;
    /**
     * The number of units required before a release can enter the next phase. If 0, all environments are required.
     */
    minimumEnvironmentsBeforePromotion?: pulumi.Input<number>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
     */
    optionalDeploymentTargets?: pulumi.Input<pulumi.Input<string>[]>;
    releaseRetentionPolicy?: pulumi.Input<inputs.LifecyclePhaseReleaseRetentionPolicy>;
    tentacleRetentionPolicy?: pulumi.Input<inputs.LifecyclePhaseTentacleRetentionPolicy>;
}

export interface LifecyclePhaseReleaseRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
    /**
     * The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
     */
    unit?: pulumi.Input<string>;
}

export interface LifecyclePhaseTentacleRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
    /**
     * The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
     */
    unit?: pulumi.Input<string>;
}

export interface LifecycleReleaseRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
    /**
     * The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
     */
    unit?: pulumi.Input<string>;
}

export interface LifecycleTentacleRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
    /**
     * The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
     */
    unit?: pulumi.Input<string>;
}

export interface ListeningTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface MachinePolicyMachineCleanupPolicy {
    deleteMachinesBehavior?: pulumi.Input<string>;
    deleteMachinesElapsedTimespan?: pulumi.Input<number>;
}

export interface MachinePolicyMachineConnectivityPolicy {
    machineConnectivityBehavior?: pulumi.Input<string>;
}

export interface MachinePolicyMachineHealthCheckPolicy {
    bashHealthCheckPolicy: pulumi.Input<inputs.MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy>;
    healthCheckCron?: pulumi.Input<string>;
    healthCheckCronTimezone?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    powershellHealthCheckPolicy: pulumi.Input<inputs.MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy>;
}

export interface MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy {
    runType?: pulumi.Input<string>;
    scriptBody?: pulumi.Input<string>;
}

export interface MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy {
    runType?: pulumi.Input<string>;
    scriptBody?: pulumi.Input<string>;
}

export interface MachinePolicyMachineUpdatePolicy {
    calamariUpdateBehavior?: pulumi.Input<string>;
    tentacleUpdateAccountId?: pulumi.Input<string>;
    tentacleUpdateBehavior?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.OfflinePackageDropDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.OfflinePackageDropDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.OfflinePackageDropDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.PollingTentacleDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.PollingTentacleDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.PollingTentacleDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.PollingTentacleDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface ProjectConnectivityPolicy {
    allowDeploymentsToNoTargets?: pulumi.Input<boolean>;
    excludeUnhealthyTargets?: pulumi.Input<boolean>;
    skipMachineBehavior?: pulumi.Input<string>;
    targetRoles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectGitAnonymousPersistenceSettings {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL associated with these version control settings.
     */
    url: pulumi.Input<string>;
}

export interface ProjectGitLibraryPersistenceSettings {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: pulumi.Input<string>;
    gitCredentialId: pulumi.Input<string>;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL associated with these version control settings.
     */
    url: pulumi.Input<string>;
}

export interface ProjectGitUsernamePasswordPersistenceSettings {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * The password for the Git credential.
     */
    password: pulumi.Input<string>;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL associated with these version control settings.
     */
    url: pulumi.Input<string>;
    /**
     * The username for the Git credential.
     */
    username: pulumi.Input<string>;
}

export interface ProjectJiraServiceManagementExtensionSettings {
    /**
     * The connection identifier associated with the extension settings.
     */
    connectionId: pulumi.Input<string>;
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: pulumi.Input<boolean>;
    /**
     * The project name associated with this extension.
     */
    serviceDeskProjectName: pulumi.Input<string>;
}

export interface ProjectReleaseCreationStrategy {
    channelId?: pulumi.Input<string>;
    releaseCreationPackage?: pulumi.Input<inputs.ProjectReleaseCreationStrategyReleaseCreationPackage>;
    releaseCreationPackageStepId?: pulumi.Input<string>;
}

export interface ProjectReleaseCreationStrategyReleaseCreationPackage {
    deploymentAction?: pulumi.Input<string>;
    packageReference?: pulumi.Input<string>;
}

export interface ProjectServicenowExtensionSettings {
    /**
     * The connection identifier associated with the extension settings.
     */
    connectionId: pulumi.Input<string>;
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: pulumi.Input<boolean>;
    /**
     * Specifies whether or not this extension will automatically transition the state of a deployment for this project.
     */
    isStateAutomaticallyTransitioned: pulumi.Input<boolean>;
    /**
     * The name of the standard change template associated with this extension.
     */
    standardChangeTemplateName: pulumi.Input<string>;
}

export interface ProjectTemplate {
    /**
     * A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * The display settings for the parameter.
     */
    displaySettings?: pulumi.Input<{[key: string]: any}>;
    /**
     * The help presented alongside the parameter input.
     */
    helpText?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
     */
    label?: pulumi.Input<string>;
    /**
     * The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
     */
    name: pulumi.Input<string>;
}

export interface ProjectVersioningStrategy {
    donorPackage?: pulumi.Input<inputs.ProjectVersioningStrategyDonorPackage>;
    donorPackageStepId?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface ProjectVersioningStrategyDonorPackage {
    deploymentAction?: pulumi.Input<string>;
    packageReference?: pulumi.Input<string>;
}

export interface RunbookConnectivityPolicy {
    allowDeploymentsToNoTargets?: pulumi.Input<boolean>;
    excludeUnhealthyTargets?: pulumi.Input<boolean>;
    skipMachineBehavior?: pulumi.Input<string>;
    targetRoles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RunbookProcessStep {
    actions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepAction>[]>;
    applyTerraformTemplateActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateAction>[]>;
    /**
     * When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
     */
    condition?: pulumi.Input<string>;
    /**
     * The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
     */
    conditionExpression?: pulumi.Input<string>;
    deployKubernetesSecretActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployKubernetesSecretAction>[]>;
    deployPackageActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployPackageAction>[]>;
    deployWindowsServiceActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceAction>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    manualInterventionActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepManualInterventionAction>[]>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to run this step before or after package acquisition (if possible)
     */
    packageRequirement?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: any}>;
    runKubectlScriptActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptAction>[]>;
    runScriptActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunScriptAction>[]>;
    /**
     * Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
     */
    startTrigger?: pulumi.Input<string>;
    /**
     * The roles that this step run against, or runs on behalf of
     */
    targetRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number of targets to deploy to simultaneously
     */
    windowSize?: pulumi.Input<string>;
}

export interface RunbookProcessStepAction {
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepActionActionTemplate>;
    actionType: pulumi.Input<string>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepActionPackage>[]>;
    primaryPackage?: pulumi.Input<inputs.RunbookProcessStepActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    workerPoolId?: pulumi.Input<string>;
    workerPoolVariable?: pulumi.Input<string>;
}

export interface RunbookProcessStepActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this runbook process.
     */
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    extractDuringDeployment?: pulumi.Input<boolean>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepApplyTerraformTemplateAction {
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionActionTemplate>;
    advancedOptions: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions>;
    awsAccount?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccount>;
    azureAccount?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionAzureAccount>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    googleCloudAccount?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    inlineTemplate?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionPackage>[]>;
    primaryPackage?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    template?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionTemplate>;
    templateParameters?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this runbook process.
     */
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions {
    allowAdditionalPluginDownloads?: pulumi.Input<boolean>;
    applyParameters?: pulumi.Input<string>;
    initParameters?: pulumi.Input<string>;
    pluginCacheDirectory?: pulumi.Input<string>;
    workspace?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAwsAccount {
    region?: pulumi.Input<string>;
    role?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole>;
    useInstanceRole?: pulumi.Input<boolean>;
    variable?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole {
    arn?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    roleSessionName?: pulumi.Input<string>;
    sessionDuration?: pulumi.Input<number>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAzureAccount {
    variable?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount {
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    variable?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionTemplate {
    additionalVariableFiles?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    runAutomaticFileSubstitution?: pulumi.Input<boolean>;
    targetFiles?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployKubernetesSecretAction {
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepDeployKubernetesSecretActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployKubernetesSecretActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployKubernetesSecretActionPackage>[]>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    secretName: pulumi.Input<string>;
    secretValues: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RunbookProcessStepDeployKubernetesSecretActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this runbook process.
     */
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepDeployKubernetesSecretActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployKubernetesSecretActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepDeployPackageAction {
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepDeployPackageActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployPackageActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployPackageActionPackage>[]>;
    primaryPackage: pulumi.Input<inputs.RunbookProcessStepDeployPackageActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    windowsService?: pulumi.Input<inputs.RunbookProcessStepDeployPackageActionWindowsService>;
}

export interface RunbookProcessStepDeployPackageActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this runbook process.
     */
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepDeployPackageActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployPackageActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepDeployPackageActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepDeployPackageActionWindowsService {
    arguments?: pulumi.Input<string>;
    createOrUpdateService?: pulumi.Input<boolean>;
    customAccountName?: pulumi.Input<string>;
    customAccountPassword?: pulumi.Input<string>;
    dependencies?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    executablePath: pulumi.Input<string>;
    serviceAccount?: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    startMode?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployWindowsServiceAction {
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceActionActionTemplate>;
    arguments?: pulumi.Input<string>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceActionContainer>[]>;
    createOrUpdateService?: pulumi.Input<boolean>;
    customAccountName?: pulumi.Input<string>;
    customAccountPassword?: pulumi.Input<string>;
    dependencies?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    executablePath: pulumi.Input<string>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceActionPackage>[]>;
    primaryPackage: pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    serviceAccount?: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    startMode?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RunbookProcessStepDeployWindowsServiceActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this runbook process.
     */
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepDeployWindowsServiceActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployWindowsServiceActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepDeployWindowsServiceActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepManualInterventionAction {
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepManualInterventionActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepManualInterventionActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    instructions: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepManualInterventionActionPackage>[]>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    responsibleTeams?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RunbookProcessStepManualInterventionActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this runbook process.
     */
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepManualInterventionActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepManualInterventionActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepRunKubectlScriptAction {
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptActionPackage>[]>;
    primaryPackage?: pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptActionPrimaryPackage>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    scriptFileName?: pulumi.Input<string>;
    scriptParameters?: pulumi.Input<string>;
    scriptSource?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RunbookProcessStepRunKubectlScriptActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this runbook process.
     */
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepRunKubectlScriptActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepRunKubectlScriptActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    extractDuringDeployment?: pulumi.Input<boolean>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepRunKubectlScriptActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepRunScriptAction {
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepRunScriptActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunScriptActionContainer>[]>;
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    isRequired?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunScriptActionPackage>[]>;
    primaryPackage?: pulumi.Input<inputs.RunbookProcessStepRunScriptActionPrimaryPackage>;
    /**
     * @deprecated This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runOnServer?: pulumi.Input<boolean>;
    scriptBody?: pulumi.Input<string>;
    scriptFileName?: pulumi.Input<string>;
    scriptParameters?: pulumi.Input<string>;
    scriptSource?: pulumi.Input<string>;
    scriptSyntax?: pulumi.Input<string>;
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    variableSubstitutionInFiles?: pulumi.Input<string>;
    workerPoolId?: pulumi.Input<string>;
    workerPoolVariable?: pulumi.Input<string>;
}

export interface RunbookProcessStepRunScriptActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id: pulumi.Input<string>;
    /**
     * The version number of this runbook process.
     */
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepRunScriptActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepRunScriptActionPackage {
    acquisitionLocation?: pulumi.Input<string>;
    extractDuringDeployment?: pulumi.Input<boolean>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepRunScriptActionPrimaryPackage {
    acquisitionLocation?: pulumi.Input<string>;
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packageId: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookRetentionPolicy {
    /**
     * How many runs to keep per environment.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
}

export interface ScriptModuleScript {
    /**
     * The body of this script module.
     */
    body: pulumi.Input<string>;
    /**
     * The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
     */
    syntax: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.SshConnectionDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.SshConnectionDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.SshConnectionDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.SshConnectionDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface TeamExternalSecurityGroup {
    displayIdAndName?: pulumi.Input<boolean>;
    displayName?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
}

export interface TeamUserRole {
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    projectGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The space associated with this team.
     */
    spaceId: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
    tenantIds?: pulumi.Input<pulumi.Input<string>[]>;
    userRoleId: pulumi.Input<string>;
}

export interface TenantProjectEnvironment {
    /**
     * A list of environment IDs associated with this tenant through a project.
     */
    environments: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The project ID associated with this tenant.
     */
    projectId: pulumi.Input<string>;
}

export interface UserIdentity {
    claims?: pulumi.Input<pulumi.Input<inputs.UserIdentityClaim>[]>;
    provider?: pulumi.Input<string>;
}

export interface UserIdentityClaim {
    isIdentifyingClaim: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface VariablePrompt {
    /**
     * The description of this variable prompt option.
     */
    description?: pulumi.Input<string>;
    displaySettings?: pulumi.Input<inputs.VariablePromptDisplaySettings>;
    isRequired?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
}

export interface VariablePromptDisplaySettings {
    controlType: pulumi.Input<string>;
    selectOptions?: pulumi.Input<pulumi.Input<inputs.VariablePromptDisplaySettingsSelectOption>[]>;
}

export interface VariablePromptDisplaySettingsSelectOption {
    displayName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface VariableScope {
    /**
     * A list of actions that are scoped to this variable value.
     */
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of channels that are scoped to this variable value.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of environments that are scoped to this variable value.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of machines that are scoped to this variable value.
     */
    machines?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of roles that are scoped to this variable value.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tenant tags that are scoped to this variable value.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

