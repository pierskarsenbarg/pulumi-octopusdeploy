// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AzureCloudServiceDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.AzureCloudServiceDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.AzureCloudServiceDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.AzureCloudServiceDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail[];
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface AzureCloudServiceDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface AzureCloudServiceDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface AzureCloudServiceDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.AzureServiceFabricClusterDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.AzureServiceFabricClusterDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.AzureServiceFabricClusterDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail[];
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface AzureWebAppDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.AzureWebAppDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.AzureWebAppDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.AzureWebAppDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.AzureWebAppDeploymentTargetEndpointTentacleVersionDetail[];
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface AzureWebAppDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface AzureWebAppDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface AzureWebAppDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface AzureWebAppDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface ChannelRule {
    actionPackages: outputs.ChannelRuleActionPackage[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    tag?: string;
    versionRange?: string;
}

export interface ChannelRuleActionPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface DeploymentProcessStep {
    actions?: outputs.DeploymentProcessStepAction[];
    applyTerraformTemplateActions?: outputs.DeploymentProcessStepApplyTerraformTemplateAction[];
    /**
     * When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
     */
    condition?: string;
    /**
     * The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
     */
    conditionExpression: string;
    deployKubernetesSecretActions?: outputs.DeploymentProcessStepDeployKubernetesSecretAction[];
    deployPackageActions?: outputs.DeploymentProcessStepDeployPackageAction[];
    deployWindowsServiceActions?: outputs.DeploymentProcessStepDeployWindowsServiceAction[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    manualInterventionActions?: outputs.DeploymentProcessStepManualInterventionAction[];
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * Whether to run this step before or after package acquisition (if possible)
     */
    packageRequirement?: string;
    properties: {[key: string]: any};
    runKubectlScriptActions?: outputs.DeploymentProcessStepRunKubectlScriptAction[];
    runScriptActions?: outputs.DeploymentProcessStepRunScriptAction[];
    /**
     * Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
     */
    startTrigger?: string;
    /**
     * The roles that this step run against, or runs on behalf of
     */
    targetRoles: string[];
    /**
     * The maximum number of targets to deploy to simultaneously
     */
    windowSize?: string;
}

export interface DeploymentProcessStepAction {
    actionTemplate: outputs.DeploymentProcessStepActionActionTemplate;
    actionType: string;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.DeploymentProcessStepActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.DeploymentProcessStepActionPackage[];
    primaryPackage: outputs.DeploymentProcessStepActionPrimaryPackage;
    properties: {[key: string]: string};
    runOnServer?: boolean;
    tenantTags: string[];
    workerPoolId?: string;
    workerPoolVariable?: string;
}

export interface DeploymentProcessStepActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this deployment process.
     */
    version: number;
}

export interface DeploymentProcessStepActionContainer {
    feedId?: string;
    image?: string;
}

export interface DeploymentProcessStepActionPackage {
    acquisitionLocation?: string;
    extractDuringDeployment: boolean;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepApplyTerraformTemplateAction {
    actionTemplate: outputs.DeploymentProcessStepApplyTerraformTemplateActionActionTemplate;
    advancedOptions: outputs.DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions;
    awsAccount?: outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccount;
    azureAccount?: outputs.DeploymentProcessStepApplyTerraformTemplateActionAzureAccount;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.DeploymentProcessStepApplyTerraformTemplateActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    googleCloudAccount?: outputs.DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount;
    /**
     * The unique ID for this resource.
     */
    id: string;
    inlineTemplate?: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.DeploymentProcessStepApplyTerraformTemplateActionPackage[];
    primaryPackage: outputs.DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage;
    properties: {[key: string]: string};
    runOnServer?: boolean;
    template?: outputs.DeploymentProcessStepApplyTerraformTemplateActionTemplate;
    templateParameters?: string;
    tenantTags: string[];
}

export interface DeploymentProcessStepApplyTerraformTemplateActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this deployment process.
     */
    version: number;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions {
    allowAdditionalPluginDownloads?: boolean;
    applyParameters?: string;
    initParameters?: string;
    pluginCacheDirectory?: string;
    workspace?: string;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAwsAccount {
    region?: string;
    role?: outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole;
    useInstanceRole?: boolean;
    variable?: string;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole {
    arn?: string;
    externalId?: string;
    roleSessionName?: string;
    sessionDuration?: number;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAzureAccount {
    variable?: string;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionContainer {
    feedId?: string;
    image?: string;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount {
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useVmServiceAccount?: boolean;
    variable?: string;
    zone?: string;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepApplyTerraformTemplateActionTemplate {
    additionalVariableFiles?: string;
    directory?: string;
    runAutomaticFileSubstitution?: boolean;
    targetFiles?: string;
}

export interface DeploymentProcessStepDeployKubernetesSecretAction {
    actionTemplate: outputs.DeploymentProcessStepDeployKubernetesSecretActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.DeploymentProcessStepDeployKubernetesSecretActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.DeploymentProcessStepDeployKubernetesSecretActionPackage[];
    properties: {[key: string]: string};
    runOnServer?: boolean;
    secretName: string;
    secretValues: {[key: string]: string};
    tenantTags: string[];
}

export interface DeploymentProcessStepDeployKubernetesSecretActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this deployment process.
     */
    version: number;
}

export interface DeploymentProcessStepDeployKubernetesSecretActionContainer {
    feedId?: string;
    image?: string;
}

export interface DeploymentProcessStepDeployKubernetesSecretActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepDeployPackageAction {
    actionTemplate: outputs.DeploymentProcessStepDeployPackageActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.DeploymentProcessStepDeployPackageActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.DeploymentProcessStepDeployPackageActionPackage[];
    primaryPackage: outputs.DeploymentProcessStepDeployPackageActionPrimaryPackage;
    properties: {[key: string]: string};
    tenantTags: string[];
    windowsService?: outputs.DeploymentProcessStepDeployPackageActionWindowsService;
}

export interface DeploymentProcessStepDeployPackageActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this deployment process.
     */
    version: number;
}

export interface DeploymentProcessStepDeployPackageActionContainer {
    feedId?: string;
    image?: string;
}

export interface DeploymentProcessStepDeployPackageActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepDeployPackageActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepDeployPackageActionWindowsService {
    arguments?: string;
    createOrUpdateService: boolean;
    customAccountName?: string;
    customAccountPassword: string;
    dependencies?: string;
    description?: string;
    displayName?: string;
    executablePath: string;
    serviceAccount?: string;
    serviceName: string;
    startMode?: string;
}

export interface DeploymentProcessStepDeployWindowsServiceAction {
    actionTemplate: outputs.DeploymentProcessStepDeployWindowsServiceActionActionTemplate;
    arguments?: string;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.DeploymentProcessStepDeployWindowsServiceActionContainer[];
    createOrUpdateService: boolean;
    customAccountName?: string;
    customAccountPassword: string;
    dependencies?: string;
    description?: string;
    displayName?: string;
    environments: string[];
    excludedEnvironments: string[];
    executablePath: string;
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.DeploymentProcessStepDeployWindowsServiceActionPackage[];
    primaryPackage: outputs.DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage;
    properties: {[key: string]: string};
    serviceAccount?: string;
    serviceName: string;
    startMode?: string;
    tenantTags: string[];
}

export interface DeploymentProcessStepDeployWindowsServiceActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this deployment process.
     */
    version: number;
}

export interface DeploymentProcessStepDeployWindowsServiceActionContainer {
    feedId?: string;
    image?: string;
}

export interface DeploymentProcessStepDeployWindowsServiceActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepManualInterventionAction {
    actionTemplate: outputs.DeploymentProcessStepManualInterventionActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.DeploymentProcessStepManualInterventionActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    instructions: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.DeploymentProcessStepManualInterventionActionPackage[];
    properties: {[key: string]: string};
    responsibleTeams?: string;
    tenantTags: string[];
}

export interface DeploymentProcessStepManualInterventionActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this deployment process.
     */
    version: number;
}

export interface DeploymentProcessStepManualInterventionActionContainer {
    feedId?: string;
    image?: string;
}

export interface DeploymentProcessStepManualInterventionActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepRunKubectlScriptAction {
    actionTemplate: outputs.DeploymentProcessStepRunKubectlScriptActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.DeploymentProcessStepRunKubectlScriptActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.DeploymentProcessStepRunKubectlScriptActionPackage[];
    primaryPackage: outputs.DeploymentProcessStepRunKubectlScriptActionPrimaryPackage;
    properties: {[key: string]: string};
    runOnServer?: boolean;
    scriptFileName?: string;
    scriptParameters?: string;
    scriptSource: string;
    tenantTags: string[];
}

export interface DeploymentProcessStepRunKubectlScriptActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this deployment process.
     */
    version: number;
}

export interface DeploymentProcessStepRunKubectlScriptActionContainer {
    feedId?: string;
    image?: string;
}

export interface DeploymentProcessStepRunKubectlScriptActionPackage {
    acquisitionLocation?: string;
    extractDuringDeployment: boolean;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepRunKubectlScriptActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepRunScriptAction {
    actionTemplate: outputs.DeploymentProcessStepRunScriptActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.DeploymentProcessStepRunScriptActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.DeploymentProcessStepRunScriptActionPackage[];
    primaryPackage: outputs.DeploymentProcessStepRunScriptActionPrimaryPackage;
    /**
     * @deprecated This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.
     */
    properties: {[key: string]: string};
    runOnServer?: boolean;
    scriptBody?: string;
    scriptFileName?: string;
    scriptParameters?: string;
    scriptSource: string;
    scriptSyntax: string;
    tenantTags: string[];
    variableSubstitutionInFiles?: string;
    workerPoolId?: string;
    workerPoolVariable?: string;
}

export interface DeploymentProcessStepRunScriptActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this deployment process.
     */
    version: number;
}

export interface DeploymentProcessStepRunScriptActionContainer {
    feedId?: string;
    image?: string;
}

export interface DeploymentProcessStepRunScriptActionPackage {
    acquisitionLocation?: string;
    extractDuringDeployment: boolean;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface DeploymentProcessStepRunScriptActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface EnvironmentJiraExtensionSettings {
    /**
     * The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, or `"unmapped"`.
     */
    environmentType: string;
}

export interface EnvironmentJiraServiceManagementExtensionSettings {
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: boolean;
}

export interface EnvironmentServicenowExtensionSettings {
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: boolean;
}

export interface GetAccountsAccount {
    accessKey: string;
    /**
     * A filter to search by a list of account types.  Valid account types are `AmazonWebServicesAccount`, `AmazonWebServicesRoleAccount`, `AzureServicePrincipal`, `AzureSubscription`, `None`, `SshKeyPair`, `Token`, or `UsernamePassword`.
     */
    accountType: string;
    activeDirectoryEndpointBaseUri: string;
    applicationId: string;
    authenticationEndpoint: string;
    azureEnvironment: string;
    certificateData: string;
    certificateThumbprint: string;
    clientSecret: string;
    description: string;
    environments: string[];
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    name: string;
    password: string;
    privateKeyFile: string;
    privateKeyPassphrase: string;
    resourceManagerEndpoint: string;
    secretKey: string;
    serviceManagementEndpointBaseUri: string;
    serviceManagementEndpointSuffix: string;
    spaceId: string;
    subscriptionId: string;
    tenantId: string;
    tenantTags: string[];
    tenantedDeploymentParticipation: string;
    tenants: string[];
    token: string;
    username: string;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTarget {
    accountId: string;
    cloudServiceName: string;
    defaultWorkerPoolId: string;
    endpoints: outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled: boolean;
    isInProcess: boolean;
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    operatingSystem: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles: string[];
    shellName: string;
    shellVersion: string;
    slot: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    storageAccountName: string;
    swapIfPossible: boolean;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint: string;
    uri: string;
    useCurrentInstanceCount: boolean;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTarget {
    aadClientCredentialSecret: string;
    aadCredentialType: string;
    aadUserCredentialPassword: string;
    aadUserCredentialUsername: string;
    certificateStoreLocation: string;
    certificateStoreName: string;
    clientCertificateVariable: string;
    connectionEndpoint: string;
    endpoints: outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled: boolean;
    isInProcess: boolean;
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    operatingSystem: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles: string[];
    securityMode: string;
    serverCertificateThumbprint: string;
    shellName: string;
    shellVersion: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint: string;
    uri: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTarget {
    accountId: string;
    endpoints: outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled: boolean;
    isInProcess: boolean;
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    operatingSystem: string;
    resourceGroupName: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles: string[];
    shellName: string;
    shellVersion: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint: string;
    uri: string;
    webAppName: string;
    webAppSlotName: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetCertificatesCertificate {
    /**
     * A filter to search for resources that have been archived.
     */
    archived: string;
    /**
     * The encoded data of the certificate.
     */
    certificateData: string;
    /**
     * Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
     */
    certificateDataFormat: string;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    /**
     * Indicates if the certificate has a private key.
     */
    hasPrivateKey: boolean;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * Indicates if the certificate has expired.
     */
    isExpired: boolean;
    issuerCommonName: string;
    issuerDistinguishedName: string;
    issuerOrganization: string;
    /**
     * The name of this resource.
     */
    name: string;
    notAfter: string;
    notBefore: string;
    notes: string;
    /**
     * The password associated with this resource.
     */
    password: string;
    replacedBy: string;
    selfSigned: boolean;
    serialNumber: string;
    signatureAlgorithmName: string;
    subjectAlternativeNames: string[];
    subjectCommonName: string;
    subjectDistinguishedName: string;
    subjectOrganization: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    thumbprint: string;
    version: number;
}

export interface GetChannelsChannel {
    /**
     * The description of this channel.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * Indicates if this is the default channel for the associated project.
     */
    isDefault: boolean;
    /**
     * The lifecycle ID associated with this channel.
     */
    lifecycleId: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The project ID associated with this channel.
     */
    projectId: string;
    /**
     * A list of rules associated with this channel.
     */
    rules: outputs.GetChannelsChannelRule[];
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
}

export interface GetChannelsChannelRule {
    actionPackages: outputs.GetChannelsChannelRuleActionPackage[];
    /**
     * The ID of this resource.
     */
    id: string;
    tag?: string;
    versionRange?: string;
}

export interface GetChannelsChannelRuleActionPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface GetCloudRegionDeploymentTargetsCloudRegionDeploymentTarget {
    defaultWorkerPoolId: string;
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled: boolean;
    isInProcess: boolean;
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    operatingSystem: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles: string[];
    shellName: string;
    shellVersion: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint: string;
    uri: string;
}

export interface GetDeploymentTargetsDeploymentTarget {
    endpoints: outputs.GetDeploymentTargetsDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled: boolean;
    isInProcess: boolean;
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    operatingSystem: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles: string[];
    shellName: string;
    shellVersion: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint: string;
    uri: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.GetDeploymentTargetsDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.GetDeploymentTargetsDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.GetDeploymentTargetsDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * The ID of this resource.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetEnvironmentsEnvironment {
    allowDynamicInfrastructure: boolean;
    /**
     * The description of this environment.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * Provides extension settings for the Jira integration for this environment.
     */
    jiraExtensionSettings: outputs.GetEnvironmentsEnvironmentJiraExtensionSetting[];
    /**
     * Provides extension settings for the Jira Service Management (JSM) integration for this environment.
     */
    jiraServiceManagementExtensionSettings: outputs.GetEnvironmentsEnvironmentJiraServiceManagementExtensionSetting[];
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * Provides extension settings for the ServiceNow integration for this environment.
     */
    servicenowExtensionSettings: outputs.GetEnvironmentsEnvironmentServicenowExtensionSetting[];
    slug: string;
    /**
     * The order number to sort an environment.
     */
    sortOrder: number;
    /**
     * The space ID associated with this environment.
     */
    spaceId: string;
    useGuidedFailure: boolean;
}

export interface GetEnvironmentsEnvironmentJiraExtensionSetting {
    environmentType: string;
}

export interface GetEnvironmentsEnvironmentJiraServiceManagementExtensionSetting {
    isEnabled: boolean;
}

export interface GetEnvironmentsEnvironmentServicenowExtensionSetting {
    isEnabled: boolean;
}

export interface GetFeedsFeed {
    accessKey: string;
    apiVersion: string;
    deleteUnreleasedPackagesAfterDays: number;
    /**
     * The number of times a deployment should attempt to download a package from this feed before failing.
     */
    downloadAttempts: number;
    /**
     * The number of seconds to apply as a linear back off between download attempts.
     */
    downloadRetryBackoffSeconds: number;
    /**
     * A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
     */
    feedType: string;
    feedUri: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    isEnhancedMode: boolean;
    /**
     * A short, memorable, unique name for this feed. Example: ACME Builds.
     */
    name: string;
    packageAcquisitionLocationOptions: string[];
    /**
     * The password associated with this resource.
     */
    password: string;
    region: string;
    registryPath: string;
    secretKey: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The username associated with this resource.
     */
    username: string;
}

export interface GetGitCredentialsGitCredential {
    /**
     * The description of this Git credential.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of the Git credential. This name must be unique.
     */
    name: string;
    /**
     * The password for the Git credential.
     */
    password: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The Git credential authentication type.
     */
    type: string;
    /**
     * The username for the Git credential.
     */
    username: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTarget {
    authentications: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthentication[];
    awsAccountAuthentications: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthentication[];
    azureServicePrincipalAuthentications: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication[];
    certificateAuthentications: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthentication[];
    clusterCertificate: string;
    clusterUrl: string;
    containers: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainer[];
    defaultWorkerPoolId: string;
    endpoints: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    gcpAccountAuthentications: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthentication[];
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled: boolean;
    isInProcess: boolean;
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    namespace: string;
    operatingSystem: string;
    proxyId: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles: string[];
    runningInContainer: boolean;
    shellName: string;
    shellVersion: string;
    skipTlsVerification: boolean;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint: string;
    uri: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthentication {
    accountId?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthentication {
    accountId: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    clusterName: string;
    useInstanceRole?: boolean;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication {
    accountId: string;
    clusterName: string;
    clusterResourceGroup: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthentication {
    clientCertificate?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainer {
    feedId?: string;
    image?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthentication {
    accountId: string;
    clusterName: string;
    impersonateServiceAccount?: boolean;
    project: string;
    region?: string;
    serviceAccountEmails?: string;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetLibraryVariableSetsLibraryVariableSet {
    /**
     * The description of this library variable set.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    templates: outputs.GetLibraryVariableSetsLibraryVariableSetTemplate[];
    variableSetId: string;
}

export interface GetLibraryVariableSetsLibraryVariableSetTemplate {
    defaultValue?: string;
    displaySettings?: {[key: string]: any};
    helpText?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    label?: string;
    name: string;
}

export interface GetLifecyclesLifecycle {
    /**
     * The description of this lifecycle.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    phases: outputs.GetLifecyclesLifecyclePhase[];
    releaseRetentionPolicies: outputs.GetLifecyclesLifecycleReleaseRetentionPolicy[];
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    tentacleRetentionPolicies: outputs.GetLifecyclesLifecycleTentacleRetentionPolicy[];
}

export interface GetLifecyclesLifecyclePhase {
    automaticDeploymentTargets?: string[];
    /**
     * The ID of this resource.
     */
    id: string;
    isOptionalPhase?: boolean;
    minimumEnvironmentsBeforePromotion?: number;
    name: string;
    optionalDeploymentTargets?: string[];
    releaseRetentionPolicy?: outputs.GetLifecyclesLifecyclePhaseReleaseRetentionPolicy;
    tentacleRetentionPolicy?: outputs.GetLifecyclesLifecyclePhaseTentacleRetentionPolicy;
}

export interface GetLifecyclesLifecyclePhaseReleaseRetentionPolicy {
    quantityToKeep?: number;
    shouldKeepForever?: boolean;
    unit?: string;
}

export interface GetLifecyclesLifecyclePhaseTentacleRetentionPolicy {
    quantityToKeep?: number;
    shouldKeepForever?: boolean;
    unit?: string;
}

export interface GetLifecyclesLifecycleReleaseRetentionPolicy {
    quantityToKeep?: number;
    shouldKeepForever?: boolean;
    unit?: string;
}

export interface GetLifecyclesLifecycleTentacleRetentionPolicy {
    quantityToKeep?: number;
    shouldKeepForever?: boolean;
    unit?: string;
}

export interface GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTarget {
    certificateSignatureAlgorithm: string;
    /**
     * A list of environment IDs associated with this listening tentacle.
     */
    environments: string[];
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * Represents the disabled status of this deployment target.
     */
    isDisabled: boolean;
    /**
     * Represents the in-process status of this deployment target.
     */
    isInProcess: boolean;
    /**
     * The machine policy ID that is associated with this deployment target.
     */
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The operating system that is associated with this deployment target.
     */
    operatingSystem: string;
    /**
     * The proxy ID that is associated with this deployment target.
     */
    proxyId: string;
    /**
     * A list of role IDs that are associated with this deployment target.
     */
    roles: string[];
    /**
     * The shell name associated with this deployment target.
     */
    shellName: string;
    /**
     * The shell version associated with this deployment target.
     */
    shellVersion: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    /**
     * The tenant URL of this deployment target.
     */
    tentacleUrl: string;
    tentacleVersionDetails: outputs.GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetail[];
    /**
     * The thumbprint of this deployment target.
     */
    thumbprint: string;
    /**
     * The URI of this deployment target.
     */
    uri: string;
}

export interface GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetMachinePoliciesMachinePolicy {
    connectionConnectTimeout: number;
    connectionRetryCountLimit: number;
    connectionRetrySleepInterval: number;
    connectionRetryTimeLimit: number;
    /**
     * The description of this machine policy.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDefault: boolean;
    machineCleanupPolicies: outputs.GetMachinePoliciesMachinePolicyMachineCleanupPolicy[];
    machineConnectivityPolicies: outputs.GetMachinePoliciesMachinePolicyMachineConnectivityPolicy[];
    machineHealthCheckPolicies: outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicy[];
    machineUpdatePolicies: outputs.GetMachinePoliciesMachinePolicyMachineUpdatePolicy[];
    /**
     * The name of this resource.
     */
    name: string;
    pollingRequestMaximumMessageProcessingTimeout: number;
    pollingRequestQueueTimeout: number;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
}

export interface GetMachinePoliciesMachinePolicyMachineCleanupPolicy {
    deleteMachinesBehavior?: string;
    deleteMachinesElapsedTimespan: number;
}

export interface GetMachinePoliciesMachinePolicyMachineConnectivityPolicy {
    machineConnectivityBehavior?: string;
}

export interface GetMachinePoliciesMachinePolicyMachineHealthCheckPolicy {
    bashHealthCheckPolicy: outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy;
    healthCheckCron?: string;
    healthCheckCronTimezone?: string;
    healthCheckInterval?: number;
    healthCheckType?: string;
    powershellHealthCheckPolicy: outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy;
}

export interface GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy {
    runType?: string;
    scriptBody?: string;
}

export interface GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy {
    runType?: string;
    scriptBody?: string;
}

export interface GetMachinePoliciesMachinePolicyMachineUpdatePolicy {
    calamariUpdateBehavior?: string;
    tentacleUpdateAccountId?: string;
    tentacleUpdateBehavior?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTarget {
    applicationsDirectory: string;
    destinations: outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestination[];
    endpoints: outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled: boolean;
    isInProcess: boolean;
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    operatingSystem: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles: string[];
    shellName: string;
    shellVersion: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint: string;
    uri: string;
    workingDirectory: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTarget {
    certificateSignatureAlgorithm: string;
    endpoints: outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled: boolean;
    isInProcess: boolean;
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    operatingSystem: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles: string[];
    shellName: string;
    shellVersion: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    tentacleUrl: string;
    tentacleVersionDetails: outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint: string;
    uri: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetProjectGroupsProjectGroup {
    /**
     * The description of this project group.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The ID of the retention policy associated with this project group.
     */
    retentionPolicyId: string;
    /**
     * The space ID associated with this project group.
     */
    spaceId: string;
}

export interface GetProjectsProject {
    /**
     * @deprecated This value is only valid for an associated connectivity policy and should not be specified here.
     */
    allowDeploymentsToNoTargets: boolean;
    autoCreateRelease: boolean;
    autoDeployReleaseOverrides: string[];
    /**
     * A filter to search for cloned resources by a project ID.
     */
    clonedFromProjectId: string;
    connectivityPolicies: outputs.GetProjectsProjectConnectivityPolicy[];
    defaultGuidedFailureMode: string;
    defaultToSkipIfAlreadyInstalled: boolean;
    deploymentChangesTemplate: string;
    deploymentProcessId: string;
    /**
     * The description of this project.
     */
    description: string;
    /**
     * Treats releases of different channels to the same environment as a separate deployment dimension
     */
    discreteChannelRelease: boolean;
    /**
     * Provides Git-related persistence settings for a version-controlled project.
     */
    gitAnonymousPersistenceSettings: outputs.GetProjectsProjectGitAnonymousPersistenceSetting[];
    /**
     * Provides Git-related persistence settings for a version-controlled project.
     */
    gitLibraryPersistenceSettings: outputs.GetProjectsProjectGitLibraryPersistenceSetting[];
    /**
     * Provides Git-related persistence settings for a version-controlled project.
     */
    gitUsernamePasswordPersistenceSettings: outputs.GetProjectsProjectGitUsernamePasswordPersistenceSetting[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    includedLibraryVariableSets: string[];
    isDisabled: boolean;
    /**
     * Treats releases of different channels to the same environment as a separate deployment dimension
     */
    isDiscreteChannelRelease: boolean;
    isVersionControlled: boolean;
    /**
     * Provides extension settings for the Jira Service Management (JSM) integration for this project.
     */
    jiraServiceManagementExtensionSettings: outputs.GetProjectsProjectJiraServiceManagementExtensionSetting[];
    /**
     * The lifecycle ID associated with this project.
     */
    lifecycleId: string;
    /**
     * The name of the project in Octopus Deploy. This name must be unique.
     */
    name: string;
    /**
     * The project group ID associated with this project.
     */
    projectGroupId: string;
    releaseCreationStrategies: outputs.GetProjectsProjectReleaseCreationStrategy[];
    releaseNotesTemplate: string;
    /**
     * Provides extension settings for the ServiceNow integration for this project.
     */
    servicenowExtensionSettings: outputs.GetProjectsProjectServicenowExtensionSetting[];
    /**
     * A human-readable, unique identifier, used to identify a project.
     */
    slug: string;
    /**
     * The space ID associated with this project.
     */
    spaceId: string;
    templates: outputs.GetProjectsProjectTemplate[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    variableSetId: string;
    versioningStrategies: outputs.GetProjectsProjectVersioningStrategy[];
}

export interface GetProjectsProjectConnectivityPolicy {
    allowDeploymentsToNoTargets: boolean;
    excludeUnhealthyTargets: boolean;
    skipMachineBehavior?: string;
    targetRoles: string[];
}

export interface GetProjectsProjectGitAnonymousPersistenceSetting {
    basePath?: string;
    defaultBranch?: string;
    protectedBranches?: string[];
    url: string;
}

export interface GetProjectsProjectGitLibraryPersistenceSetting {
    basePath?: string;
    defaultBranch?: string;
    gitCredentialId: string;
    protectedBranches?: string[];
    url: string;
}

export interface GetProjectsProjectGitUsernamePasswordPersistenceSetting {
    basePath?: string;
    defaultBranch?: string;
    password: string;
    protectedBranches?: string[];
    url: string;
    username: string;
}

export interface GetProjectsProjectJiraServiceManagementExtensionSetting {
    connectionId: string;
    isEnabled: boolean;
    serviceDeskProjectName: string;
}

export interface GetProjectsProjectReleaseCreationStrategy {
    channelId?: string;
    releaseCreationPackage: outputs.GetProjectsProjectReleaseCreationStrategyReleaseCreationPackage;
    releaseCreationPackageStepId?: string;
}

export interface GetProjectsProjectReleaseCreationStrategyReleaseCreationPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface GetProjectsProjectServicenowExtensionSetting {
    connectionId: string;
    isEnabled: boolean;
    isStateAutomaticallyTransitioned: boolean;
    standardChangeTemplateName: string;
}

export interface GetProjectsProjectTemplate {
    defaultValue?: string;
    displaySettings?: {[key: string]: any};
    helpText?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    label?: string;
    /**
     * A filter to search by name.
     */
    name: string;
}

export interface GetProjectsProjectVersioningStrategy {
    donorPackage: outputs.GetProjectsProjectVersioningStrategyDonorPackage;
    donorPackageStepId: string;
    template: string;
}

export interface GetProjectsProjectVersioningStrategyDonorPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface GetScriptModulesScriptModule {
    /**
     * The description of this script module.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The script associated with this script module.
     */
    scripts: outputs.GetScriptModulesScriptModuleScript[];
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The variable set ID for this script module.
     */
    variableSetId: string;
}

export interface GetScriptModulesScriptModuleScript {
    body: string;
    syntax: string;
}

export interface GetSpacesSpace {
    /**
     * The description of this space.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * Specifies if this space is the default space in Octopus.
     */
    isDefault: boolean;
    /**
     * Specifies the status of the task queue for this space.
     */
    isTaskQueueStopped: boolean;
    /**
     * The name of this resource, no more than 20 characters long
     */
    name: string;
    /**
     * The unique slug of this space.
     */
    slug: string;
    /**
     * A list of user IDs designated to be managers of this space.
     */
    spaceManagersTeamMembers: string[];
    /**
     * A list of team IDs designated to be managers of this space.
     */
    spaceManagersTeams: string[];
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTarget {
    accountId: string;
    dotNetCorePlatform: string;
    endpoints: outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpoint[];
    /**
     * A list of environment IDs associated with this resource.
     */
    environments: string[];
    fingerprint: string;
    hasLatestCalamari: boolean;
    /**
     * Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
     */
    healthStatus: string;
    host: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * A filter to search by the disabled status of a resource.
     */
    isDisabled: boolean;
    isInProcess: boolean;
    machinePolicyId: string;
    /**
     * The name of this resource.
     */
    name: string;
    operatingSystem: string;
    port: number;
    proxyId: string;
    /**
     * A filter to search by a list of role IDs.
     */
    roles: string[];
    shellName: string;
    shellVersion: string;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
     */
    status: string;
    /**
     * A summary elaborating on the status of this resource.
     */
    statusSummary: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
     */
    tenantedDeploymentParticipation: string;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants: string[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint: string;
    uri: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetail[];
    /**
     * The thumbprint of the deployment target to match in the query and/or search
     */
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface GetTagSetsTagSet {
    /**
     * The description of this tag set.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The sort order associated with this resource.
     */
    sortOrder: number;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
}

export interface GetTeamsTeam {
    canBeDeleted: boolean;
    canBeRenamed: boolean;
    canChangeMembers: boolean;
    canChangeRoles: boolean;
    /**
     * The user-friendly description of this team.
     */
    description: string;
    externalSecurityGroups: outputs.GetTeamsTeamExternalSecurityGroup[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this team.
     */
    name: string;
    /**
     * The space associated with this team.
     */
    spaceId: string;
    /**
     * A list of user IDs designated to be members of this team.
     */
    users: string[];
}

export interface GetTeamsTeamExternalSecurityGroup {
    displayIdAndName: boolean;
    displayName: string;
    /**
     * An auto-generated identifier that includes the timestamp when this data source was last modified.
     */
    id: string;
}

export interface GetTenantsTenant {
    /**
     * The ID of the tenant from which this tenant was cloned.
     */
    clonedFromTenantId: string;
    /**
     * The description of this tenant.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    projectEnvironments: outputs.GetTenantsTenantProjectEnvironment[];
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
}

export interface GetTenantsTenantProjectEnvironment {
    environments: string[];
    /**
     * A filter to search by a project ID.
     */
    projectId: string;
}

export interface GetUserRolesUserRole {
    canBeDeleted: boolean;
    /**
     * The description of this user role.
     */
    description: string;
    grantedSpacePermissions: string[];
    grantedSystemPermissions: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    spacePermissionDescriptions: string[];
    supportedRestrictions: string[];
    systemPermissionDescriptions: string[];
}

export interface GetUsersUser {
    canPasswordBeEdited: boolean;
    /**
     * The display name of this resource.
     */
    displayName: string;
    /**
     * The email address of this resource.
     */
    emailAddress: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    identities: outputs.GetUsersUserIdentity[];
    isActive: boolean;
    isRequestor: boolean;
    isService: boolean;
    /**
     * The password associated with this resource.
     */
    password: string;
    /**
     * The username associated with this resource.
     */
    username: string;
}

export interface GetUsersUserIdentity {
    claims?: outputs.GetUsersUserIdentityClaim[];
    provider?: string;
}

export interface GetUsersUserIdentityClaim {
    isIdentifyingClaim: boolean;
    name: string;
    value: string;
}

export interface GetVariablesVariable {
    /**
     * The description of this variable.
     */
    description: string;
    encryptedValue: string;
    /**
     * Indicates whether or not this variable is considered editable.
     */
    isEditable: boolean;
    /**
     * Indicates whether or not this resource is considered sensitive and should be kept secret.
     */
    isSensitive: boolean;
    keyFingerprint: string;
    /**
     * The name of this resource.
     */
    name: string;
    ownerId: string;
    pgpKey: string;
    /**
     * @deprecated This attribute is deprecated; please use owner_id instead.
     */
    projectId: string;
    prompts: outputs.GetVariablesVariablePrompt[];
    scopes: outputs.GetVariablesVariableScope[];
    sensitiveValue: string;
    /**
     * The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
     */
    type: string;
    value: string;
}

export interface GetVariablesVariablePrompt {
    description?: string;
    displaySettings?: outputs.GetVariablesVariablePromptDisplaySettings;
    isRequired?: boolean;
    label?: string;
}

export interface GetVariablesVariablePromptDisplaySettings {
    controlType: string;
    selectOptions?: outputs.GetVariablesVariablePromptDisplaySettingsSelectOption[];
}

export interface GetVariablesVariablePromptDisplaySettingsSelectOption {
    displayName: string;
    value: string;
}

export interface GetVariablesVariableScope {
    actions?: string[];
    channels?: string[];
    environments?: string[];
    machines?: string[];
    roles?: string[];
    tenantTags?: string[];
}

export interface GetWorkerPoolsWorkerPool {
    canAddWorkers: boolean;
    /**
     * The description of this worker pool.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDefault: boolean;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The order number to sort a dynamic worker pool.
     */
    sortOrder: number;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
    workerPoolType: string;
    workerType: string;
}

export interface KubernetesClusterDeploymentTargetAuthentication {
    accountId?: string;
}

export interface KubernetesClusterDeploymentTargetAwsAccountAuthentication {
    accountId: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    clusterName: string;
    useInstanceRole?: boolean;
}

export interface KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication {
    accountId: string;
    clusterName: string;
    clusterResourceGroup: string;
}

export interface KubernetesClusterDeploymentTargetCertificateAuthentication {
    clientCertificate?: string;
}

export interface KubernetesClusterDeploymentTargetContainer {
    feedId?: string;
    image?: string;
}

export interface KubernetesClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.KubernetesClusterDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.KubernetesClusterDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.KubernetesClusterDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail[];
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface KubernetesClusterDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface KubernetesClusterDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface KubernetesClusterDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface KubernetesClusterDeploymentTargetGcpAccountAuthentication {
    accountId: string;
    clusterName: string;
    impersonateServiceAccount?: boolean;
    project: string;
    region?: string;
    serviceAccountEmails?: string;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface LibraryVariableSetTemplate {
    /**
     * A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
     */
    defaultValue?: string;
    /**
     * The display settings for the parameter.
     */
    displaySettings?: {[key: string]: any};
    /**
     * The help presented alongside the parameter input.
     */
    helpText?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
     */
    label?: string;
    /**
     * The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
     */
    name: string;
}

export interface LifecyclePhase {
    /**
     * Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
     */
    automaticDeploymentTargets?: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * If false a release must be deployed to this phase before it can be deployed to the next phase.
     */
    isOptionalPhase?: boolean;
    /**
     * The number of units required before a release can enter the next phase. If 0, all environments are required.
     */
    minimumEnvironmentsBeforePromotion?: number;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
     */
    optionalDeploymentTargets?: string[];
    releaseRetentionPolicy?: outputs.LifecyclePhaseReleaseRetentionPolicy;
    tentacleRetentionPolicy?: outputs.LifecyclePhaseTentacleRetentionPolicy;
}

export interface LifecyclePhaseReleaseRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
     */
    quantityToKeep?: number;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: boolean;
    /**
     * The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
     */
    unit?: string;
}

export interface LifecyclePhaseTentacleRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
     */
    quantityToKeep?: number;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: boolean;
    /**
     * The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
     */
    unit?: string;
}

export interface LifecycleReleaseRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
     */
    quantityToKeep?: number;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: boolean;
    /**
     * The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
     */
    unit?: string;
}

export interface LifecycleTentacleRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
     */
    quantityToKeep?: number;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: boolean;
    /**
     * The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
     */
    unit?: string;
}

export interface ListeningTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface MachinePolicyMachineCleanupPolicy {
    deleteMachinesBehavior?: string;
    deleteMachinesElapsedTimespan: number;
}

export interface MachinePolicyMachineConnectivityPolicy {
    machineConnectivityBehavior?: string;
}

export interface MachinePolicyMachineHealthCheckPolicy {
    bashHealthCheckPolicy: outputs.MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy;
    healthCheckCron?: string;
    healthCheckCronTimezone?: string;
    healthCheckInterval?: number;
    healthCheckType?: string;
    powershellHealthCheckPolicy: outputs.MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy;
}

export interface MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy {
    runType?: string;
    scriptBody?: string;
}

export interface MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy {
    runType?: string;
    scriptBody?: string;
}

export interface MachinePolicyMachineUpdatePolicy {
    calamariUpdateBehavior?: string;
    tentacleUpdateAccountId?: string;
    tentacleUpdateBehavior?: string;
}

export interface OfflinePackageDropDeploymentTargetDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface OfflinePackageDropDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.OfflinePackageDropDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.OfflinePackageDropDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.OfflinePackageDropDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail[];
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface OfflinePackageDropDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface OfflinePackageDropDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface OfflinePackageDropDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface PollingTentacleDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.PollingTentacleDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.PollingTentacleDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.PollingTentacleDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.PollingTentacleDeploymentTargetEndpointTentacleVersionDetail[];
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface PollingTentacleDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface PollingTentacleDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface PollingTentacleDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface PollingTentacleDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface PollingTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface ProjectConnectivityPolicy {
    allowDeploymentsToNoTargets: boolean;
    excludeUnhealthyTargets: boolean;
    skipMachineBehavior?: string;
    targetRoles: string[];
}

export interface ProjectGitAnonymousPersistenceSettings {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: string;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: string;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: string[];
    /**
     * The URL associated with these version control settings.
     */
    url: string;
}

export interface ProjectGitLibraryPersistenceSettings {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: string;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: string;
    gitCredentialId: string;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: string[];
    /**
     * The URL associated with these version control settings.
     */
    url: string;
}

export interface ProjectGitUsernamePasswordPersistenceSettings {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: string;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: string;
    /**
     * The password for the Git credential.
     */
    password: string;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: string[];
    /**
     * The URL associated with these version control settings.
     */
    url: string;
    /**
     * The username for the Git credential.
     */
    username: string;
}

export interface ProjectJiraServiceManagementExtensionSettings {
    /**
     * The connection identifier associated with the extension settings.
     */
    connectionId: string;
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: boolean;
    /**
     * The project name associated with this extension.
     */
    serviceDeskProjectName: string;
}

export interface ProjectReleaseCreationStrategy {
    channelId?: string;
    releaseCreationPackage: outputs.ProjectReleaseCreationStrategyReleaseCreationPackage;
    releaseCreationPackageStepId?: string;
}

export interface ProjectReleaseCreationStrategyReleaseCreationPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface ProjectServicenowExtensionSettings {
    /**
     * The connection identifier associated with the extension settings.
     */
    connectionId: string;
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: boolean;
    /**
     * Specifies whether or not this extension will automatically transition the state of a deployment for this project.
     */
    isStateAutomaticallyTransitioned: boolean;
    /**
     * The name of the standard change template associated with this extension.
     */
    standardChangeTemplateName: string;
}

export interface ProjectTemplate {
    /**
     * A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
     */
    defaultValue?: string;
    /**
     * The display settings for the parameter.
     */
    displaySettings?: {[key: string]: any};
    /**
     * The help presented alongside the parameter input.
     */
    helpText?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
     */
    label?: string;
    /**
     * The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
     */
    name: string;
}

export interface ProjectVersioningStrategy {
    donorPackage: outputs.ProjectVersioningStrategyDonorPackage;
    donorPackageStepId: string;
    template: string;
}

export interface ProjectVersioningStrategyDonorPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface RunbookConnectivityPolicy {
    allowDeploymentsToNoTargets: boolean;
    excludeUnhealthyTargets: boolean;
    skipMachineBehavior?: string;
    targetRoles: string[];
}

export interface RunbookProcessStep {
    actions?: outputs.RunbookProcessStepAction[];
    applyTerraformTemplateActions?: outputs.RunbookProcessStepApplyTerraformTemplateAction[];
    /**
     * When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
     */
    condition?: string;
    /**
     * The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
     */
    conditionExpression: string;
    deployKubernetesSecretActions?: outputs.RunbookProcessStepDeployKubernetesSecretAction[];
    deployPackageActions?: outputs.RunbookProcessStepDeployPackageAction[];
    deployWindowsServiceActions?: outputs.RunbookProcessStepDeployWindowsServiceAction[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    manualInterventionActions?: outputs.RunbookProcessStepManualInterventionAction[];
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * Whether to run this step before or after package acquisition (if possible)
     */
    packageRequirement?: string;
    properties: {[key: string]: any};
    runKubectlScriptActions?: outputs.RunbookProcessStepRunKubectlScriptAction[];
    runScriptActions?: outputs.RunbookProcessStepRunScriptAction[];
    /**
     * Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
     */
    startTrigger?: string;
    /**
     * The roles that this step run against, or runs on behalf of
     */
    targetRoles: string[];
    /**
     * The maximum number of targets to deploy to simultaneously
     */
    windowSize?: string;
}

export interface RunbookProcessStepAction {
    actionTemplate: outputs.RunbookProcessStepActionActionTemplate;
    actionType: string;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.RunbookProcessStepActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.RunbookProcessStepActionPackage[];
    primaryPackage: outputs.RunbookProcessStepActionPrimaryPackage;
    properties: {[key: string]: string};
    runOnServer?: boolean;
    tenantTags: string[];
    workerPoolId?: string;
    workerPoolVariable?: string;
}

export interface RunbookProcessStepActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this runbook process.
     */
    version: number;
}

export interface RunbookProcessStepActionContainer {
    feedId?: string;
    image?: string;
}

export interface RunbookProcessStepActionPackage {
    acquisitionLocation?: string;
    extractDuringDeployment: boolean;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepApplyTerraformTemplateAction {
    actionTemplate: outputs.RunbookProcessStepApplyTerraformTemplateActionActionTemplate;
    advancedOptions: outputs.RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions;
    awsAccount?: outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccount;
    azureAccount?: outputs.RunbookProcessStepApplyTerraformTemplateActionAzureAccount;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.RunbookProcessStepApplyTerraformTemplateActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    googleCloudAccount?: outputs.RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount;
    /**
     * The unique ID for this resource.
     */
    id: string;
    inlineTemplate?: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.RunbookProcessStepApplyTerraformTemplateActionPackage[];
    primaryPackage: outputs.RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage;
    properties: {[key: string]: string};
    runOnServer?: boolean;
    template?: outputs.RunbookProcessStepApplyTerraformTemplateActionTemplate;
    templateParameters?: string;
    tenantTags: string[];
}

export interface RunbookProcessStepApplyTerraformTemplateActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this runbook process.
     */
    version: number;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions {
    allowAdditionalPluginDownloads?: boolean;
    applyParameters?: string;
    initParameters?: string;
    pluginCacheDirectory?: string;
    workspace?: string;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAwsAccount {
    region?: string;
    role?: outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole;
    useInstanceRole?: boolean;
    variable?: string;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole {
    arn?: string;
    externalId?: string;
    roleSessionName?: string;
    sessionDuration?: number;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAzureAccount {
    variable?: string;
}

export interface RunbookProcessStepApplyTerraformTemplateActionContainer {
    feedId?: string;
    image?: string;
}

export interface RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount {
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useVmServiceAccount?: boolean;
    variable?: string;
    zone?: string;
}

export interface RunbookProcessStepApplyTerraformTemplateActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepApplyTerraformTemplateActionTemplate {
    additionalVariableFiles?: string;
    directory?: string;
    runAutomaticFileSubstitution?: boolean;
    targetFiles?: string;
}

export interface RunbookProcessStepDeployKubernetesSecretAction {
    actionTemplate: outputs.RunbookProcessStepDeployKubernetesSecretActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.RunbookProcessStepDeployKubernetesSecretActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.RunbookProcessStepDeployKubernetesSecretActionPackage[];
    properties: {[key: string]: string};
    runOnServer?: boolean;
    secretName: string;
    secretValues: {[key: string]: string};
    tenantTags: string[];
}

export interface RunbookProcessStepDeployKubernetesSecretActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this runbook process.
     */
    version: number;
}

export interface RunbookProcessStepDeployKubernetesSecretActionContainer {
    feedId?: string;
    image?: string;
}

export interface RunbookProcessStepDeployKubernetesSecretActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepDeployPackageAction {
    actionTemplate: outputs.RunbookProcessStepDeployPackageActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.RunbookProcessStepDeployPackageActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.RunbookProcessStepDeployPackageActionPackage[];
    primaryPackage: outputs.RunbookProcessStepDeployPackageActionPrimaryPackage;
    properties: {[key: string]: string};
    tenantTags: string[];
    windowsService?: outputs.RunbookProcessStepDeployPackageActionWindowsService;
}

export interface RunbookProcessStepDeployPackageActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this runbook process.
     */
    version: number;
}

export interface RunbookProcessStepDeployPackageActionContainer {
    feedId?: string;
    image?: string;
}

export interface RunbookProcessStepDeployPackageActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepDeployPackageActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepDeployPackageActionWindowsService {
    arguments?: string;
    createOrUpdateService: boolean;
    customAccountName?: string;
    customAccountPassword: string;
    dependencies?: string;
    description?: string;
    displayName?: string;
    executablePath: string;
    serviceAccount?: string;
    serviceName: string;
    startMode?: string;
}

export interface RunbookProcessStepDeployWindowsServiceAction {
    actionTemplate: outputs.RunbookProcessStepDeployWindowsServiceActionActionTemplate;
    arguments?: string;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.RunbookProcessStepDeployWindowsServiceActionContainer[];
    createOrUpdateService: boolean;
    customAccountName?: string;
    customAccountPassword: string;
    dependencies?: string;
    description?: string;
    displayName?: string;
    environments: string[];
    excludedEnvironments: string[];
    executablePath: string;
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.RunbookProcessStepDeployWindowsServiceActionPackage[];
    primaryPackage: outputs.RunbookProcessStepDeployWindowsServiceActionPrimaryPackage;
    properties: {[key: string]: string};
    serviceAccount?: string;
    serviceName: string;
    startMode?: string;
    tenantTags: string[];
}

export interface RunbookProcessStepDeployWindowsServiceActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this runbook process.
     */
    version: number;
}

export interface RunbookProcessStepDeployWindowsServiceActionContainer {
    feedId?: string;
    image?: string;
}

export interface RunbookProcessStepDeployWindowsServiceActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepDeployWindowsServiceActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepManualInterventionAction {
    actionTemplate: outputs.RunbookProcessStepManualInterventionActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.RunbookProcessStepManualInterventionActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    instructions: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.RunbookProcessStepManualInterventionActionPackage[];
    properties: {[key: string]: string};
    responsibleTeams?: string;
    tenantTags: string[];
}

export interface RunbookProcessStepManualInterventionActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this runbook process.
     */
    version: number;
}

export interface RunbookProcessStepManualInterventionActionContainer {
    feedId?: string;
    image?: string;
}

export interface RunbookProcessStepManualInterventionActionPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepRunKubectlScriptAction {
    actionTemplate: outputs.RunbookProcessStepRunKubectlScriptActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.RunbookProcessStepRunKubectlScriptActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.RunbookProcessStepRunKubectlScriptActionPackage[];
    primaryPackage: outputs.RunbookProcessStepRunKubectlScriptActionPrimaryPackage;
    properties: {[key: string]: string};
    runOnServer?: boolean;
    scriptFileName?: string;
    scriptParameters?: string;
    scriptSource: string;
    tenantTags: string[];
}

export interface RunbookProcessStepRunKubectlScriptActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this runbook process.
     */
    version: number;
}

export interface RunbookProcessStepRunKubectlScriptActionContainer {
    feedId?: string;
    image?: string;
}

export interface RunbookProcessStepRunKubectlScriptActionPackage {
    acquisitionLocation?: string;
    extractDuringDeployment: boolean;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepRunKubectlScriptActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepRunScriptAction {
    actionTemplate: outputs.RunbookProcessStepRunScriptActionActionTemplate;
    canBeUsedForProjectVersioning: boolean;
    channels: string[];
    condition: string;
    containers: outputs.RunbookProcessStepRunScriptActionContainer[];
    environments: string[];
    excludedEnvironments: string[];
    features: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    isDisabled?: boolean;
    isRequired?: boolean;
    name: string;
    notes?: string;
    packages: outputs.RunbookProcessStepRunScriptActionPackage[];
    primaryPackage: outputs.RunbookProcessStepRunScriptActionPrimaryPackage;
    /**
     * @deprecated This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.
     */
    properties: {[key: string]: string};
    runOnServer?: boolean;
    scriptBody?: string;
    scriptFileName?: string;
    scriptParameters?: string;
    scriptSource: string;
    scriptSyntax: string;
    tenantTags: string[];
    variableSubstitutionInFiles?: string;
    workerPoolId?: string;
    workerPoolVariable?: string;
}

export interface RunbookProcessStepRunScriptActionActionTemplate {
    communityActionTemplateId: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The version number of this runbook process.
     */
    version: number;
}

export interface RunbookProcessStepRunScriptActionContainer {
    feedId?: string;
    image?: string;
}

export interface RunbookProcessStepRunScriptActionPackage {
    acquisitionLocation?: string;
    extractDuringDeployment: boolean;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookProcessStepRunScriptActionPrimaryPackage {
    acquisitionLocation?: string;
    feedId?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    name?: string;
    packageId: string;
    properties: {[key: string]: string};
}

export interface RunbookRetentionPolicy {
    /**
     * How many runs to keep per environment.
     */
    quantityToKeep?: number;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: boolean;
}

export interface ScriptModuleScript {
    /**
     * The body of this script module.
     */
    body: string;
    /**
     * The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
     */
    syntax: string;
}

export interface SshConnectionDeploymentTargetEndpoint {
    aadClientCredentialSecret?: string;
    aadCredentialType?: string;
    aadUserCredentialUsername?: string;
    accountId?: string;
    applicationsDirectory?: string;
    authentication: outputs.SshConnectionDeploymentTargetEndpointAuthentication;
    certificateSignatureAlgorithm?: string;
    certificateStoreLocation?: string;
    certificateStoreName?: string;
    clientCertificateVariable?: string;
    cloudServiceName?: string;
    clusterCertificate?: string;
    clusterUrl?: string;
    communicationStyle: string;
    connectionEndpoint?: string;
    containers: outputs.SshConnectionDeploymentTargetEndpointContainer[];
    defaultWorkerPoolId?: string;
    destinations: outputs.SshConnectionDeploymentTargetEndpointDestination[];
    dotNetCorePlatform?: string;
    fingerprint?: string;
    host?: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    namespace?: string;
    port?: number;
    proxyId?: string;
    resourceGroupName?: string;
    runningInContainer?: boolean;
    securityMode?: string;
    serverCertificateThumbprint?: string;
    skipTlsVerification?: boolean;
    slot?: string;
    storageAccountName?: string;
    swapIfPossible?: boolean;
    tentacleVersionDetails: outputs.SshConnectionDeploymentTargetEndpointTentacleVersionDetail[];
    thumbprint?: string;
    uri?: string;
    useCurrentInstanceCount?: boolean;
    webAppName?: string;
    webAppSlotName?: string;
    workingDirectory?: string;
}

export interface SshConnectionDeploymentTargetEndpointAuthentication {
    accountId?: string;
    adminLogin?: string;
    assumeRole?: boolean;
    assumeRoleExternalId?: string;
    assumeRoleSessionDuration?: number;
    assumedRoleArn?: string;
    assumedRoleSession?: string;
    authenticationType?: string;
    clientCertificate?: string;
    clusterName?: string;
    clusterResourceGroup?: string;
    impersonateServiceAccount?: boolean;
    project?: string;
    region?: string;
    serviceAccountEmails?: string;
    useInstanceRole?: boolean;
    useVmServiceAccount?: boolean;
    zone?: string;
}

export interface SshConnectionDeploymentTargetEndpointContainer {
    feedId?: string;
    image?: string;
}

export interface SshConnectionDeploymentTargetEndpointDestination {
    destinationType?: string;
    dropFolderPath?: string;
}

export interface SshConnectionDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked: boolean;
    upgradeRequired: boolean;
    upgradeSuggested: boolean;
    version: string;
}

export interface TeamExternalSecurityGroup {
    displayIdAndName: boolean;
    displayName: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
}

export interface TeamUserRole {
    environmentIds?: string[];
    /**
     * The ID of this resource.
     */
    id: string;
    projectGroupIds?: string[];
    projectIds?: string[];
    /**
     * The space associated with this team.
     */
    spaceId: string;
    teamId: string;
    tenantIds?: string[];
    userRoleId: string;
}

export interface TenantProjectEnvironment {
    /**
     * A list of environment IDs associated with this tenant through a project.
     */
    environments: string[];
    /**
     * The project ID associated with this tenant.
     */
    projectId: string;
}

export interface UserIdentity {
    claims?: outputs.UserIdentityClaim[];
    provider?: string;
}

export interface UserIdentityClaim {
    isIdentifyingClaim: boolean;
    name: string;
    value: string;
}

export interface VariablePrompt {
    /**
     * The description of this variable prompt option.
     */
    description?: string;
    displaySettings?: outputs.VariablePromptDisplaySettings;
    isRequired?: boolean;
    label?: string;
}

export interface VariablePromptDisplaySettings {
    controlType: string;
    selectOptions?: outputs.VariablePromptDisplaySettingsSelectOption[];
}

export interface VariablePromptDisplaySettingsSelectOption {
    displayName: string;
    value: string;
}

export interface VariableScope {
    /**
     * A list of actions that are scoped to this variable value.
     */
    actions?: string[];
    /**
     * A list of channels that are scoped to this variable value.
     */
    channels?: string[];
    /**
     * A list of environments that are scoped to this variable value.
     */
    environments?: string[];
    /**
     * A list of machines that are scoped to this variable value.
     */
    machines?: string[];
    /**
     * A list of roles that are scoped to this variable value.
     */
    roles?: string[];
    /**
     * A list of tenant tags that are scoped to this variable value.
     */
    tenantTags?: string[];
}

