// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource manages script modules in Octopus Deploy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as octopusdeploy from "@pulumi/octopusdeploy";
 *
 * const example = new octopusdeploy.ScriptModule("example", {
 *     description: "A script module to use.",
 *     script: {
 *         body: `function Say-Hello()
 * {
 *     Write-Output "Hello, Octopus!"
 * }
 *
 * `,
 *         syntax: "PowerShell",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import octopusdeploy:index/scriptModule:ScriptModule [options] octopusdeploy_script_module.<name> <script-module-id>
 * ```
 */
export class ScriptModule extends pulumi.CustomResource {
    /**
     * Get an existing ScriptModule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScriptModuleState, opts?: pulumi.CustomResourceOptions): ScriptModule {
        return new ScriptModule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'octopusdeploy:index/scriptModule:ScriptModule';

    /**
     * Returns true if the given object is an instance of ScriptModule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScriptModule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScriptModule.__pulumiType;
    }

    /**
     * The description of this script module.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of this resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The script associated with this script module.
     */
    public readonly script!: pulumi.Output<outputs.ScriptModuleScript>;
    /**
     * The space ID associated with this resource.
     */
    public readonly spaceId!: pulumi.Output<string>;
    /**
     * The variable set ID for this script module.
     */
    public readonly variableSetId!: pulumi.Output<string>;

    /**
     * Create a ScriptModule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScriptModuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScriptModuleArgs | ScriptModuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScriptModuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["variableSetId"] = state ? state.variableSetId : undefined;
        } else {
            const args = argsOrState as ScriptModuleArgs | undefined;
            if ((!args || args.script === undefined) && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["variableSetId"] = args ? args.variableSetId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScriptModule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScriptModule resources.
 */
export interface ScriptModuleState {
    /**
     * The description of this script module.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The script associated with this script module.
     */
    script?: pulumi.Input<inputs.ScriptModuleScript>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The variable set ID for this script module.
     */
    variableSetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScriptModule resource.
 */
export interface ScriptModuleArgs {
    /**
     * The description of this script module.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The script associated with this script module.
     */
    script: pulumi.Input<inputs.ScriptModuleScript>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The variable set ID for this script module.
     */
    variableSetId?: pulumi.Input<string>;
}
