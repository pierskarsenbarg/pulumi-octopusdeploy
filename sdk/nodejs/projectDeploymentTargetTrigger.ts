// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as octopusdeploy from "@pierskarsenbarg/octopusdeploy";
 *
 * const example = new octopusdeploy.ProjectDeploymentTargetTrigger("example", {
 *     eventCategories: ["MachineUnhealthy"],
 *     projectId: "Projects-123",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger [options] octopusdeploy_project_deployment_target_trigger.<name> <project_deployment_target_trigger-id>
 * ```
 */
export class ProjectDeploymentTargetTrigger extends pulumi.CustomResource {
    /**
     * Get an existing ProjectDeploymentTargetTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectDeploymentTargetTriggerState, opts?: pulumi.CustomResourceOptions): ProjectDeploymentTargetTrigger {
        return new ProjectDeploymentTargetTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger';

    /**
     * Returns true if the given object is an instance of ProjectDeploymentTargetTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectDeploymentTargetTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectDeploymentTargetTrigger.__pulumiType;
    }

    /**
     * Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    public readonly environmentIds!: pulumi.Output<string[] | undefined>;
    /**
     * Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    public readonly eventCategories!: pulumi.Output<string[] | undefined>;
    /**
     * Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    public readonly eventGroups!: pulumi.Output<string[] | undefined>;
    /**
     * The name of this resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project to attach the trigger.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
     */
    public readonly shouldRedeploy!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ProjectDeploymentTargetTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectDeploymentTargetTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectDeploymentTargetTriggerArgs | ProjectDeploymentTargetTriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectDeploymentTargetTriggerState | undefined;
            resourceInputs["environmentIds"] = state ? state.environmentIds : undefined;
            resourceInputs["eventCategories"] = state ? state.eventCategories : undefined;
            resourceInputs["eventGroups"] = state ? state.eventGroups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["shouldRedeploy"] = state ? state.shouldRedeploy : undefined;
        } else {
            const args = argsOrState as ProjectDeploymentTargetTriggerArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["environmentIds"] = args ? args.environmentIds : undefined;
            resourceInputs["eventCategories"] = args ? args.eventCategories : undefined;
            resourceInputs["eventGroups"] = args ? args.eventGroups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["shouldRedeploy"] = args ? args.shouldRedeploy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectDeploymentTargetTrigger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectDeploymentTargetTrigger resources.
 */
export interface ProjectDeploymentTargetTriggerState {
    /**
     * Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    eventCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    eventGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to attach the trigger.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
     */
    shouldRedeploy?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ProjectDeploymentTargetTrigger resource.
 */
export interface ProjectDeploymentTargetTriggerArgs {
    /**
     * Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    eventCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    eventGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to attach the trigger.
     */
    projectId: pulumi.Input<string>;
    /**
     * Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
     */
    shouldRedeploy?: pulumi.Input<boolean>;
}
