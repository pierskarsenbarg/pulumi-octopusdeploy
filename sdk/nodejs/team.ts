// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource manages teams in Octopus Deploy.
 *
 * > **NOTE on Team User Roles and Scoped User Roles:** We currently
 * provides both a standalone Scoped User Role resource
 * and a Team resource with `userRoles` blocks defined in-line. At this time you
 * cannot use a Team with in-line userRoles in conjunction with any Scoped User Role
 * resources. Doing so will cause a conflict of user role settings and will overwrite
 * user roles.
 */
export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamState, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'octopusdeploy:index/team:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    public readonly canBeDeleted!: pulumi.Output<boolean>;
    public readonly canBeRenamed!: pulumi.Output<boolean>;
    public readonly canChangeMembers!: pulumi.Output<boolean>;
    public readonly canChangeRoles!: pulumi.Output<boolean>;
    /**
     * The user-friendly description of this team.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly externalSecurityGroups!: pulumi.Output<outputs.TeamExternalSecurityGroup[] | undefined>;
    /**
     * The name of this team.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The space associated with this team.
     */
    public readonly spaceId!: pulumi.Output<string>;
    public readonly userRoles!: pulumi.Output<outputs.TeamUserRole[]>;
    /**
     * A list of user IDs designated to be members of this team.
     */
    public readonly users!: pulumi.Output<string[]>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamArgs | TeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamState | undefined;
            resourceInputs["canBeDeleted"] = state ? state.canBeDeleted : undefined;
            resourceInputs["canBeRenamed"] = state ? state.canBeRenamed : undefined;
            resourceInputs["canChangeMembers"] = state ? state.canChangeMembers : undefined;
            resourceInputs["canChangeRoles"] = state ? state.canChangeRoles : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalSecurityGroups"] = state ? state.externalSecurityGroups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["userRoles"] = state ? state.userRoles : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as TeamArgs | undefined;
            resourceInputs["canBeDeleted"] = args ? args.canBeDeleted : undefined;
            resourceInputs["canBeRenamed"] = args ? args.canBeRenamed : undefined;
            resourceInputs["canChangeMembers"] = args ? args.canChangeMembers : undefined;
            resourceInputs["canChangeRoles"] = args ? args.canChangeRoles : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalSecurityGroups"] = args ? args.externalSecurityGroups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["userRoles"] = args ? args.userRoles : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Team.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Team resources.
 */
export interface TeamState {
    canBeDeleted?: pulumi.Input<boolean>;
    canBeRenamed?: pulumi.Input<boolean>;
    canChangeMembers?: pulumi.Input<boolean>;
    canChangeRoles?: pulumi.Input<boolean>;
    /**
     * The user-friendly description of this team.
     */
    description?: pulumi.Input<string>;
    externalSecurityGroups?: pulumi.Input<pulumi.Input<inputs.TeamExternalSecurityGroup>[]>;
    /**
     * The name of this team.
     */
    name?: pulumi.Input<string>;
    /**
     * The space associated with this team.
     */
    spaceId?: pulumi.Input<string>;
    userRoles?: pulumi.Input<pulumi.Input<inputs.TeamUserRole>[]>;
    /**
     * A list of user IDs designated to be members of this team.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    canBeDeleted?: pulumi.Input<boolean>;
    canBeRenamed?: pulumi.Input<boolean>;
    canChangeMembers?: pulumi.Input<boolean>;
    canChangeRoles?: pulumi.Input<boolean>;
    /**
     * The user-friendly description of this team.
     */
    description?: pulumi.Input<string>;
    externalSecurityGroups?: pulumi.Input<pulumi.Input<inputs.TeamExternalSecurityGroup>[]>;
    /**
     * The name of this team.
     */
    name?: pulumi.Input<string>;
    /**
     * The space associated with this team.
     */
    spaceId?: pulumi.Input<string>;
    userRoles?: pulumi.Input<pulumi.Input<inputs.TeamUserRole>[]>;
    /**
     * A list of user IDs designated to be members of this team.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}
