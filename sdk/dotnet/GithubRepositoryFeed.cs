// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Octopusdeploy
{
    /// <summary>
    /// This resource manages a GitHub repository feed in Octopus Deploy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Octopusdeploy = Pulumi.Octopusdeploy;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Octopusdeploy.GithubRepositoryFeed("example", new()
    ///     {
    ///         DownloadAttempts = 1,
    ///         DownloadRetryBackoffSeconds = 30,
    ///         FeedUri = "https://api.github.com",
    ///         Password = "test-password",
    ///         Username = "test-username",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import octopusdeploy:index/githubRepositoryFeed:GithubRepositoryFeed [options] octopusdeploy_github_repository_feed.&lt;name&gt; &lt;feed-id&gt;
    /// ```
    /// </summary>
    [OctopusdeployResourceType("octopusdeploy:index/githubRepositoryFeed:GithubRepositoryFeed")]
    public partial class GithubRepositoryFeed : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of times a deployment should attempt to download a package from this feed before failing.
        /// </summary>
        [Output("downloadAttempts")]
        public Output<int?> DownloadAttempts { get; private set; } = null!;

        /// <summary>
        /// The number of seconds to apply as a linear back off between download attempts.
        /// </summary>
        [Output("downloadRetryBackoffSeconds")]
        public Output<int?> DownloadRetryBackoffSeconds { get; private set; } = null!;

        [Output("feedUri")]
        public Output<string> FeedUri { get; private set; } = null!;

        /// <summary>
        /// A short, memorable, unique name for this feed. Example: ACME Builds.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("packageAcquisitionLocationOptions")]
        public Output<ImmutableArray<string>> PackageAcquisitionLocationOptions { get; private set; } = null!;

        /// <summary>
        /// The password associated with this resource.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The space ID associated with this resource.
        /// </summary>
        [Output("spaceId")]
        public Output<string> SpaceId { get; private set; } = null!;

        /// <summary>
        /// The username associated with this resource.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a GithubRepositoryFeed resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GithubRepositoryFeed(string name, GithubRepositoryFeedArgs args, CustomResourceOptions? options = null)
            : base("octopusdeploy:index/githubRepositoryFeed:GithubRepositoryFeed", name, args ?? new GithubRepositoryFeedArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GithubRepositoryFeed(string name, Input<string> id, GithubRepositoryFeedState? state = null, CustomResourceOptions? options = null)
            : base("octopusdeploy:index/githubRepositoryFeed:GithubRepositoryFeed", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GithubRepositoryFeed resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GithubRepositoryFeed Get(string name, Input<string> id, GithubRepositoryFeedState? state = null, CustomResourceOptions? options = null)
        {
            return new GithubRepositoryFeed(name, id, state, options);
        }
    }

    public sealed class GithubRepositoryFeedArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of times a deployment should attempt to download a package from this feed before failing.
        /// </summary>
        [Input("downloadAttempts")]
        public Input<int>? DownloadAttempts { get; set; }

        /// <summary>
        /// The number of seconds to apply as a linear back off between download attempts.
        /// </summary>
        [Input("downloadRetryBackoffSeconds")]
        public Input<int>? DownloadRetryBackoffSeconds { get; set; }

        [Input("feedUri", required: true)]
        public Input<string> FeedUri { get; set; } = null!;

        /// <summary>
        /// A short, memorable, unique name for this feed. Example: ACME Builds.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("packageAcquisitionLocationOptions")]
        private InputList<string>? _packageAcquisitionLocationOptions;
        public InputList<string> PackageAcquisitionLocationOptions
        {
            get => _packageAcquisitionLocationOptions ?? (_packageAcquisitionLocationOptions = new InputList<string>());
            set => _packageAcquisitionLocationOptions = value;
        }

        /// <summary>
        /// The password associated with this resource.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The space ID associated with this resource.
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        /// <summary>
        /// The username associated with this resource.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GithubRepositoryFeedArgs()
        {
        }
        public static new GithubRepositoryFeedArgs Empty => new GithubRepositoryFeedArgs();
    }

    public sealed class GithubRepositoryFeedState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of times a deployment should attempt to download a package from this feed before failing.
        /// </summary>
        [Input("downloadAttempts")]
        public Input<int>? DownloadAttempts { get; set; }

        /// <summary>
        /// The number of seconds to apply as a linear back off between download attempts.
        /// </summary>
        [Input("downloadRetryBackoffSeconds")]
        public Input<int>? DownloadRetryBackoffSeconds { get; set; }

        [Input("feedUri")]
        public Input<string>? FeedUri { get; set; }

        /// <summary>
        /// A short, memorable, unique name for this feed. Example: ACME Builds.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("packageAcquisitionLocationOptions")]
        private InputList<string>? _packageAcquisitionLocationOptions;
        public InputList<string> PackageAcquisitionLocationOptions
        {
            get => _packageAcquisitionLocationOptions ?? (_packageAcquisitionLocationOptions = new InputList<string>());
            set => _packageAcquisitionLocationOptions = value;
        }

        /// <summary>
        /// The password associated with this resource.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The space ID associated with this resource.
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        /// <summary>
        /// The username associated with this resource.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GithubRepositoryFeedState()
        {
        }
        public static new GithubRepositoryFeedState Empty => new GithubRepositoryFeedState();
    }
}
