# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MachinePolicyArgs', 'MachinePolicy']

@pulumi.input_type
class MachinePolicyArgs:
    def __init__(__self__, *,
                 connection_connect_timeout: Optional[pulumi.Input[int]] = None,
                 connection_retry_count_limit: Optional[pulumi.Input[int]] = None,
                 connection_retry_sleep_interval: Optional[pulumi.Input[int]] = None,
                 connection_retry_time_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 machine_cleanup_policy: Optional[pulumi.Input['MachinePolicyMachineCleanupPolicyArgs']] = None,
                 machine_connectivity_policy: Optional[pulumi.Input['MachinePolicyMachineConnectivityPolicyArgs']] = None,
                 machine_health_check_policy: Optional[pulumi.Input['MachinePolicyMachineHealthCheckPolicyArgs']] = None,
                 machine_update_policy: Optional[pulumi.Input['MachinePolicyMachineUpdatePolicyArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 polling_request_maximum_message_processing_timeout: Optional[pulumi.Input[int]] = None,
                 polling_request_queue_timeout: Optional[pulumi.Input[int]] = None,
                 space_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MachinePolicy resource.
        :param pulumi.Input[str] description: The description of this machine policy.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        if connection_connect_timeout is not None:
            pulumi.set(__self__, "connection_connect_timeout", connection_connect_timeout)
        if connection_retry_count_limit is not None:
            pulumi.set(__self__, "connection_retry_count_limit", connection_retry_count_limit)
        if connection_retry_sleep_interval is not None:
            pulumi.set(__self__, "connection_retry_sleep_interval", connection_retry_sleep_interval)
        if connection_retry_time_limit is not None:
            pulumi.set(__self__, "connection_retry_time_limit", connection_retry_time_limit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if machine_cleanup_policy is not None:
            pulumi.set(__self__, "machine_cleanup_policy", machine_cleanup_policy)
        if machine_connectivity_policy is not None:
            pulumi.set(__self__, "machine_connectivity_policy", machine_connectivity_policy)
        if machine_health_check_policy is not None:
            pulumi.set(__self__, "machine_health_check_policy", machine_health_check_policy)
        if machine_update_policy is not None:
            pulumi.set(__self__, "machine_update_policy", machine_update_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if polling_request_maximum_message_processing_timeout is not None:
            pulumi.set(__self__, "polling_request_maximum_message_processing_timeout", polling_request_maximum_message_processing_timeout)
        if polling_request_queue_timeout is not None:
            pulumi.set(__self__, "polling_request_queue_timeout", polling_request_queue_timeout)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="connectionConnectTimeout")
    def connection_connect_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_connect_timeout")

    @connection_connect_timeout.setter
    def connection_connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_connect_timeout", value)

    @property
    @pulumi.getter(name="connectionRetryCountLimit")
    def connection_retry_count_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_retry_count_limit")

    @connection_retry_count_limit.setter
    def connection_retry_count_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_retry_count_limit", value)

    @property
    @pulumi.getter(name="connectionRetrySleepInterval")
    def connection_retry_sleep_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_retry_sleep_interval")

    @connection_retry_sleep_interval.setter
    def connection_retry_sleep_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_retry_sleep_interval", value)

    @property
    @pulumi.getter(name="connectionRetryTimeLimit")
    def connection_retry_time_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_retry_time_limit")

    @connection_retry_time_limit.setter
    def connection_retry_time_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_retry_time_limit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this machine policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="machineCleanupPolicy")
    def machine_cleanup_policy(self) -> Optional[pulumi.Input['MachinePolicyMachineCleanupPolicyArgs']]:
        return pulumi.get(self, "machine_cleanup_policy")

    @machine_cleanup_policy.setter
    def machine_cleanup_policy(self, value: Optional[pulumi.Input['MachinePolicyMachineCleanupPolicyArgs']]):
        pulumi.set(self, "machine_cleanup_policy", value)

    @property
    @pulumi.getter(name="machineConnectivityPolicy")
    def machine_connectivity_policy(self) -> Optional[pulumi.Input['MachinePolicyMachineConnectivityPolicyArgs']]:
        return pulumi.get(self, "machine_connectivity_policy")

    @machine_connectivity_policy.setter
    def machine_connectivity_policy(self, value: Optional[pulumi.Input['MachinePolicyMachineConnectivityPolicyArgs']]):
        pulumi.set(self, "machine_connectivity_policy", value)

    @property
    @pulumi.getter(name="machineHealthCheckPolicy")
    def machine_health_check_policy(self) -> Optional[pulumi.Input['MachinePolicyMachineHealthCheckPolicyArgs']]:
        return pulumi.get(self, "machine_health_check_policy")

    @machine_health_check_policy.setter
    def machine_health_check_policy(self, value: Optional[pulumi.Input['MachinePolicyMachineHealthCheckPolicyArgs']]):
        pulumi.set(self, "machine_health_check_policy", value)

    @property
    @pulumi.getter(name="machineUpdatePolicy")
    def machine_update_policy(self) -> Optional[pulumi.Input['MachinePolicyMachineUpdatePolicyArgs']]:
        return pulumi.get(self, "machine_update_policy")

    @machine_update_policy.setter
    def machine_update_policy(self, value: Optional[pulumi.Input['MachinePolicyMachineUpdatePolicyArgs']]):
        pulumi.set(self, "machine_update_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pollingRequestMaximumMessageProcessingTimeout")
    def polling_request_maximum_message_processing_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "polling_request_maximum_message_processing_timeout")

    @polling_request_maximum_message_processing_timeout.setter
    def polling_request_maximum_message_processing_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_request_maximum_message_processing_timeout", value)

    @property
    @pulumi.getter(name="pollingRequestQueueTimeout")
    def polling_request_queue_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "polling_request_queue_timeout")

    @polling_request_queue_timeout.setter
    def polling_request_queue_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_request_queue_timeout", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class _MachinePolicyState:
    def __init__(__self__, *,
                 connection_connect_timeout: Optional[pulumi.Input[int]] = None,
                 connection_retry_count_limit: Optional[pulumi.Input[int]] = None,
                 connection_retry_sleep_interval: Optional[pulumi.Input[int]] = None,
                 connection_retry_time_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 machine_cleanup_policy: Optional[pulumi.Input['MachinePolicyMachineCleanupPolicyArgs']] = None,
                 machine_connectivity_policy: Optional[pulumi.Input['MachinePolicyMachineConnectivityPolicyArgs']] = None,
                 machine_health_check_policy: Optional[pulumi.Input['MachinePolicyMachineHealthCheckPolicyArgs']] = None,
                 machine_update_policy: Optional[pulumi.Input['MachinePolicyMachineUpdatePolicyArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 polling_request_maximum_message_processing_timeout: Optional[pulumi.Input[int]] = None,
                 polling_request_queue_timeout: Optional[pulumi.Input[int]] = None,
                 space_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MachinePolicy resources.
        :param pulumi.Input[str] description: The description of this machine policy.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        if connection_connect_timeout is not None:
            pulumi.set(__self__, "connection_connect_timeout", connection_connect_timeout)
        if connection_retry_count_limit is not None:
            pulumi.set(__self__, "connection_retry_count_limit", connection_retry_count_limit)
        if connection_retry_sleep_interval is not None:
            pulumi.set(__self__, "connection_retry_sleep_interval", connection_retry_sleep_interval)
        if connection_retry_time_limit is not None:
            pulumi.set(__self__, "connection_retry_time_limit", connection_retry_time_limit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if machine_cleanup_policy is not None:
            pulumi.set(__self__, "machine_cleanup_policy", machine_cleanup_policy)
        if machine_connectivity_policy is not None:
            pulumi.set(__self__, "machine_connectivity_policy", machine_connectivity_policy)
        if machine_health_check_policy is not None:
            pulumi.set(__self__, "machine_health_check_policy", machine_health_check_policy)
        if machine_update_policy is not None:
            pulumi.set(__self__, "machine_update_policy", machine_update_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if polling_request_maximum_message_processing_timeout is not None:
            pulumi.set(__self__, "polling_request_maximum_message_processing_timeout", polling_request_maximum_message_processing_timeout)
        if polling_request_queue_timeout is not None:
            pulumi.set(__self__, "polling_request_queue_timeout", polling_request_queue_timeout)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="connectionConnectTimeout")
    def connection_connect_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_connect_timeout")

    @connection_connect_timeout.setter
    def connection_connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_connect_timeout", value)

    @property
    @pulumi.getter(name="connectionRetryCountLimit")
    def connection_retry_count_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_retry_count_limit")

    @connection_retry_count_limit.setter
    def connection_retry_count_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_retry_count_limit", value)

    @property
    @pulumi.getter(name="connectionRetrySleepInterval")
    def connection_retry_sleep_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_retry_sleep_interval")

    @connection_retry_sleep_interval.setter
    def connection_retry_sleep_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_retry_sleep_interval", value)

    @property
    @pulumi.getter(name="connectionRetryTimeLimit")
    def connection_retry_time_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_retry_time_limit")

    @connection_retry_time_limit.setter
    def connection_retry_time_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_retry_time_limit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this machine policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="machineCleanupPolicy")
    def machine_cleanup_policy(self) -> Optional[pulumi.Input['MachinePolicyMachineCleanupPolicyArgs']]:
        return pulumi.get(self, "machine_cleanup_policy")

    @machine_cleanup_policy.setter
    def machine_cleanup_policy(self, value: Optional[pulumi.Input['MachinePolicyMachineCleanupPolicyArgs']]):
        pulumi.set(self, "machine_cleanup_policy", value)

    @property
    @pulumi.getter(name="machineConnectivityPolicy")
    def machine_connectivity_policy(self) -> Optional[pulumi.Input['MachinePolicyMachineConnectivityPolicyArgs']]:
        return pulumi.get(self, "machine_connectivity_policy")

    @machine_connectivity_policy.setter
    def machine_connectivity_policy(self, value: Optional[pulumi.Input['MachinePolicyMachineConnectivityPolicyArgs']]):
        pulumi.set(self, "machine_connectivity_policy", value)

    @property
    @pulumi.getter(name="machineHealthCheckPolicy")
    def machine_health_check_policy(self) -> Optional[pulumi.Input['MachinePolicyMachineHealthCheckPolicyArgs']]:
        return pulumi.get(self, "machine_health_check_policy")

    @machine_health_check_policy.setter
    def machine_health_check_policy(self, value: Optional[pulumi.Input['MachinePolicyMachineHealthCheckPolicyArgs']]):
        pulumi.set(self, "machine_health_check_policy", value)

    @property
    @pulumi.getter(name="machineUpdatePolicy")
    def machine_update_policy(self) -> Optional[pulumi.Input['MachinePolicyMachineUpdatePolicyArgs']]:
        return pulumi.get(self, "machine_update_policy")

    @machine_update_policy.setter
    def machine_update_policy(self, value: Optional[pulumi.Input['MachinePolicyMachineUpdatePolicyArgs']]):
        pulumi.set(self, "machine_update_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pollingRequestMaximumMessageProcessingTimeout")
    def polling_request_maximum_message_processing_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "polling_request_maximum_message_processing_timeout")

    @polling_request_maximum_message_processing_timeout.setter
    def polling_request_maximum_message_processing_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_request_maximum_message_processing_timeout", value)

    @property
    @pulumi.getter(name="pollingRequestQueueTimeout")
    def polling_request_queue_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "polling_request_queue_timeout")

    @polling_request_queue_timeout.setter
    def polling_request_queue_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_request_queue_timeout", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)


class MachinePolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_connect_timeout: Optional[pulumi.Input[int]] = None,
                 connection_retry_count_limit: Optional[pulumi.Input[int]] = None,
                 connection_retry_sleep_interval: Optional[pulumi.Input[int]] = None,
                 connection_retry_time_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 machine_cleanup_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineCleanupPolicyArgs']]] = None,
                 machine_connectivity_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineConnectivityPolicyArgs']]] = None,
                 machine_health_check_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineHealthCheckPolicyArgs']]] = None,
                 machine_update_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineUpdatePolicyArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 polling_request_maximum_message_processing_timeout: Optional[pulumi.Input[int]] = None,
                 polling_request_queue_timeout: Optional[pulumi.Input[int]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages machine policies in Octopus Deploy.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this machine policy.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[MachinePolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages machine policies in Octopus Deploy.

        :param str resource_name: The name of the resource.
        :param MachinePolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MachinePolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_connect_timeout: Optional[pulumi.Input[int]] = None,
                 connection_retry_count_limit: Optional[pulumi.Input[int]] = None,
                 connection_retry_sleep_interval: Optional[pulumi.Input[int]] = None,
                 connection_retry_time_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 machine_cleanup_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineCleanupPolicyArgs']]] = None,
                 machine_connectivity_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineConnectivityPolicyArgs']]] = None,
                 machine_health_check_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineHealthCheckPolicyArgs']]] = None,
                 machine_update_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineUpdatePolicyArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 polling_request_maximum_message_processing_timeout: Optional[pulumi.Input[int]] = None,
                 polling_request_queue_timeout: Optional[pulumi.Input[int]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MachinePolicyArgs.__new__(MachinePolicyArgs)

            __props__.__dict__["connection_connect_timeout"] = connection_connect_timeout
            __props__.__dict__["connection_retry_count_limit"] = connection_retry_count_limit
            __props__.__dict__["connection_retry_sleep_interval"] = connection_retry_sleep_interval
            __props__.__dict__["connection_retry_time_limit"] = connection_retry_time_limit
            __props__.__dict__["description"] = description
            __props__.__dict__["machine_cleanup_policy"] = machine_cleanup_policy
            __props__.__dict__["machine_connectivity_policy"] = machine_connectivity_policy
            __props__.__dict__["machine_health_check_policy"] = machine_health_check_policy
            __props__.__dict__["machine_update_policy"] = machine_update_policy
            __props__.__dict__["name"] = name
            __props__.__dict__["polling_request_maximum_message_processing_timeout"] = polling_request_maximum_message_processing_timeout
            __props__.__dict__["polling_request_queue_timeout"] = polling_request_queue_timeout
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["is_default"] = None
        super(MachinePolicy, __self__).__init__(
            'octopusdeploy:index/machinePolicy:MachinePolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_connect_timeout: Optional[pulumi.Input[int]] = None,
            connection_retry_count_limit: Optional[pulumi.Input[int]] = None,
            connection_retry_sleep_interval: Optional[pulumi.Input[int]] = None,
            connection_retry_time_limit: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            is_default: Optional[pulumi.Input[bool]] = None,
            machine_cleanup_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineCleanupPolicyArgs']]] = None,
            machine_connectivity_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineConnectivityPolicyArgs']]] = None,
            machine_health_check_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineHealthCheckPolicyArgs']]] = None,
            machine_update_policy: Optional[pulumi.Input[pulumi.InputType['MachinePolicyMachineUpdatePolicyArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            polling_request_maximum_message_processing_timeout: Optional[pulumi.Input[int]] = None,
            polling_request_queue_timeout: Optional[pulumi.Input[int]] = None,
            space_id: Optional[pulumi.Input[str]] = None) -> 'MachinePolicy':
        """
        Get an existing MachinePolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this machine policy.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MachinePolicyState.__new__(_MachinePolicyState)

        __props__.__dict__["connection_connect_timeout"] = connection_connect_timeout
        __props__.__dict__["connection_retry_count_limit"] = connection_retry_count_limit
        __props__.__dict__["connection_retry_sleep_interval"] = connection_retry_sleep_interval
        __props__.__dict__["connection_retry_time_limit"] = connection_retry_time_limit
        __props__.__dict__["description"] = description
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["machine_cleanup_policy"] = machine_cleanup_policy
        __props__.__dict__["machine_connectivity_policy"] = machine_connectivity_policy
        __props__.__dict__["machine_health_check_policy"] = machine_health_check_policy
        __props__.__dict__["machine_update_policy"] = machine_update_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["polling_request_maximum_message_processing_timeout"] = polling_request_maximum_message_processing_timeout
        __props__.__dict__["polling_request_queue_timeout"] = polling_request_queue_timeout
        __props__.__dict__["space_id"] = space_id
        return MachinePolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectionConnectTimeout")
    def connection_connect_timeout(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "connection_connect_timeout")

    @property
    @pulumi.getter(name="connectionRetryCountLimit")
    def connection_retry_count_limit(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "connection_retry_count_limit")

    @property
    @pulumi.getter(name="connectionRetrySleepInterval")
    def connection_retry_sleep_interval(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "connection_retry_sleep_interval")

    @property
    @pulumi.getter(name="connectionRetryTimeLimit")
    def connection_retry_time_limit(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "connection_retry_time_limit")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this machine policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="machineCleanupPolicy")
    def machine_cleanup_policy(self) -> pulumi.Output['outputs.MachinePolicyMachineCleanupPolicy']:
        return pulumi.get(self, "machine_cleanup_policy")

    @property
    @pulumi.getter(name="machineConnectivityPolicy")
    def machine_connectivity_policy(self) -> pulumi.Output['outputs.MachinePolicyMachineConnectivityPolicy']:
        return pulumi.get(self, "machine_connectivity_policy")

    @property
    @pulumi.getter(name="machineHealthCheckPolicy")
    def machine_health_check_policy(self) -> pulumi.Output['outputs.MachinePolicyMachineHealthCheckPolicy']:
        return pulumi.get(self, "machine_health_check_policy")

    @property
    @pulumi.getter(name="machineUpdatePolicy")
    def machine_update_policy(self) -> pulumi.Output['outputs.MachinePolicyMachineUpdatePolicy']:
        return pulumi.get(self, "machine_update_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pollingRequestMaximumMessageProcessingTimeout")
    def polling_request_maximum_message_processing_timeout(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "polling_request_maximum_message_processing_timeout")

    @property
    @pulumi.getter(name="pollingRequestQueueTimeout")
    def polling_request_queue_timeout(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "polling_request_queue_timeout")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

