# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RunbookArgs', 'Runbook']

@pulumi.input_type
class RunbookArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 connectivity_policy: Optional[pulumi.Input['RunbookConnectivityPolicyArgs']] = None,
                 default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_scope: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 force_package_download: Optional[pulumi.Input[bool]] = None,
                 multi_tenancy_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retention_policy: Optional[pulumi.Input['RunbookRetentionPolicyArgs']] = None,
                 space_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Runbook resource.
        :param pulumi.Input[str] project_id: The project that this runbook belongs to.
        :param pulumi.Input[str] default_guided_failure_mode: Sets the runbook guided failure mode.
        :param pulumi.Input[str] description: The description of this runbook.
        :param pulumi.Input[str] environment_scope: Determines how the runbook is scoped to environments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: When environment_scope is set to "Specified", this is the list of environments the runbook can be run against.
        :param pulumi.Input[bool] force_package_download: Whether to force packages to be re-downloaded or not
        :param pulumi.Input[str] multi_tenancy_mode: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[str] name: The name of the runbook in Octopus Deploy. This name must be unique.
        :param pulumi.Input['RunbookRetentionPolicyArgs'] retention_policy: Sets the runbook retention policy
        :param pulumi.Input[str] space_id: The space ID associated with this runbook.
        """
        pulumi.set(__self__, "project_id", project_id)
        if connectivity_policy is not None:
            pulumi.set(__self__, "connectivity_policy", connectivity_policy)
        if default_guided_failure_mode is not None:
            pulumi.set(__self__, "default_guided_failure_mode", default_guided_failure_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_scope is not None:
            pulumi.set(__self__, "environment_scope", environment_scope)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if force_package_download is not None:
            pulumi.set(__self__, "force_package_download", force_package_download)
        if multi_tenancy_mode is not None:
            pulumi.set(__self__, "multi_tenancy_mode", multi_tenancy_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The project that this runbook belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="connectivityPolicy")
    def connectivity_policy(self) -> Optional[pulumi.Input['RunbookConnectivityPolicyArgs']]:
        return pulumi.get(self, "connectivity_policy")

    @connectivity_policy.setter
    def connectivity_policy(self, value: Optional[pulumi.Input['RunbookConnectivityPolicyArgs']]):
        pulumi.set(self, "connectivity_policy", value)

    @property
    @pulumi.getter(name="defaultGuidedFailureMode")
    def default_guided_failure_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the runbook guided failure mode.
        """
        return pulumi.get(self, "default_guided_failure_mode")

    @default_guided_failure_mode.setter
    def default_guided_failure_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_guided_failure_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this runbook.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="environmentScope")
    def environment_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Determines how the runbook is scoped to environments.
        """
        return pulumi.get(self, "environment_scope")

    @environment_scope.setter
    def environment_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_scope", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When environment_scope is set to "Specified", this is the list of environments the runbook can be run against.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="forcePackageDownload")
    def force_package_download(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force packages to be re-downloaded or not
        """
        return pulumi.get(self, "force_package_download")

    @force_package_download.setter
    def force_package_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_package_download", value)

    @property
    @pulumi.getter(name="multiTenancyMode")
    def multi_tenancy_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "multi_tenancy_mode")

    @multi_tenancy_mode.setter
    def multi_tenancy_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_tenancy_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the runbook in Octopus Deploy. This name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input['RunbookRetentionPolicyArgs']]:
        """
        Sets the runbook retention policy
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input['RunbookRetentionPolicyArgs']]):
        pulumi.set(self, "retention_policy", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this runbook.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class _RunbookState:
    def __init__(__self__, *,
                 connectivity_policy: Optional[pulumi.Input['RunbookConnectivityPolicyArgs']] = None,
                 default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_scope: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 force_package_download: Optional[pulumi.Input[bool]] = None,
                 multi_tenancy_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 published_runbook_snapshot_id: Optional[pulumi.Input[str]] = None,
                 retention_policy: Optional[pulumi.Input['RunbookRetentionPolicyArgs']] = None,
                 runbook_process_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Runbook resources.
        :param pulumi.Input[str] default_guided_failure_mode: Sets the runbook guided failure mode.
        :param pulumi.Input[str] description: The description of this runbook.
        :param pulumi.Input[str] environment_scope: Determines how the runbook is scoped to environments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: When environment_scope is set to "Specified", this is the list of environments the runbook can be run against.
        :param pulumi.Input[bool] force_package_download: Whether to force packages to be re-downloaded or not
        :param pulumi.Input[str] multi_tenancy_mode: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[str] name: The name of the runbook in Octopus Deploy. This name must be unique.
        :param pulumi.Input[str] project_id: The project that this runbook belongs to.
        :param pulumi.Input[str] published_runbook_snapshot_id: The published snapshot ID.
        :param pulumi.Input['RunbookRetentionPolicyArgs'] retention_policy: Sets the runbook retention policy
        :param pulumi.Input[str] runbook_process_id: The runbook process ID.
        :param pulumi.Input[str] space_id: The space ID associated with this runbook.
        """
        if connectivity_policy is not None:
            pulumi.set(__self__, "connectivity_policy", connectivity_policy)
        if default_guided_failure_mode is not None:
            pulumi.set(__self__, "default_guided_failure_mode", default_guided_failure_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_scope is not None:
            pulumi.set(__self__, "environment_scope", environment_scope)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if force_package_download is not None:
            pulumi.set(__self__, "force_package_download", force_package_download)
        if multi_tenancy_mode is not None:
            pulumi.set(__self__, "multi_tenancy_mode", multi_tenancy_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if published_runbook_snapshot_id is not None:
            pulumi.set(__self__, "published_runbook_snapshot_id", published_runbook_snapshot_id)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if runbook_process_id is not None:
            pulumi.set(__self__, "runbook_process_id", runbook_process_id)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="connectivityPolicy")
    def connectivity_policy(self) -> Optional[pulumi.Input['RunbookConnectivityPolicyArgs']]:
        return pulumi.get(self, "connectivity_policy")

    @connectivity_policy.setter
    def connectivity_policy(self, value: Optional[pulumi.Input['RunbookConnectivityPolicyArgs']]):
        pulumi.set(self, "connectivity_policy", value)

    @property
    @pulumi.getter(name="defaultGuidedFailureMode")
    def default_guided_failure_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the runbook guided failure mode.
        """
        return pulumi.get(self, "default_guided_failure_mode")

    @default_guided_failure_mode.setter
    def default_guided_failure_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_guided_failure_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this runbook.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="environmentScope")
    def environment_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Determines how the runbook is scoped to environments.
        """
        return pulumi.get(self, "environment_scope")

    @environment_scope.setter
    def environment_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_scope", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When environment_scope is set to "Specified", this is the list of environments the runbook can be run against.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="forcePackageDownload")
    def force_package_download(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force packages to be re-downloaded or not
        """
        return pulumi.get(self, "force_package_download")

    @force_package_download.setter
    def force_package_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_package_download", value)

    @property
    @pulumi.getter(name="multiTenancyMode")
    def multi_tenancy_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "multi_tenancy_mode")

    @multi_tenancy_mode.setter
    def multi_tenancy_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_tenancy_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the runbook in Octopus Deploy. This name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project that this runbook belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="publishedRunbookSnapshotId")
    def published_runbook_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The published snapshot ID.
        """
        return pulumi.get(self, "published_runbook_snapshot_id")

    @published_runbook_snapshot_id.setter
    def published_runbook_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "published_runbook_snapshot_id", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input['RunbookRetentionPolicyArgs']]:
        """
        Sets the runbook retention policy
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input['RunbookRetentionPolicyArgs']]):
        pulumi.set(self, "retention_policy", value)

    @property
    @pulumi.getter(name="runbookProcessId")
    def runbook_process_id(self) -> Optional[pulumi.Input[str]]:
        """
        The runbook process ID.
        """
        return pulumi.get(self, "runbook_process_id")

    @runbook_process_id.setter
    def runbook_process_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runbook_process_id", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this runbook.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)


class Runbook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connectivity_policy: Optional[pulumi.Input[pulumi.InputType['RunbookConnectivityPolicyArgs']]] = None,
                 default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_scope: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 force_package_download: Optional[pulumi.Input[bool]] = None,
                 multi_tenancy_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 retention_policy: Optional[pulumi.Input[pulumi.InputType['RunbookRetentionPolicyArgs']]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages runbooks in Octopus Deploy.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] default_guided_failure_mode: Sets the runbook guided failure mode.
        :param pulumi.Input[str] description: The description of this runbook.
        :param pulumi.Input[str] environment_scope: Determines how the runbook is scoped to environments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: When environment_scope is set to "Specified", this is the list of environments the runbook can be run against.
        :param pulumi.Input[bool] force_package_download: Whether to force packages to be re-downloaded or not
        :param pulumi.Input[str] multi_tenancy_mode: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[str] name: The name of the runbook in Octopus Deploy. This name must be unique.
        :param pulumi.Input[str] project_id: The project that this runbook belongs to.
        :param pulumi.Input[pulumi.InputType['RunbookRetentionPolicyArgs']] retention_policy: Sets the runbook retention policy
        :param pulumi.Input[str] space_id: The space ID associated with this runbook.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RunbookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages runbooks in Octopus Deploy.

        :param str resource_name: The name of the resource.
        :param RunbookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RunbookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connectivity_policy: Optional[pulumi.Input[pulumi.InputType['RunbookConnectivityPolicyArgs']]] = None,
                 default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_scope: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 force_package_download: Optional[pulumi.Input[bool]] = None,
                 multi_tenancy_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 retention_policy: Optional[pulumi.Input[pulumi.InputType['RunbookRetentionPolicyArgs']]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RunbookArgs.__new__(RunbookArgs)

            __props__.__dict__["connectivity_policy"] = connectivity_policy
            __props__.__dict__["default_guided_failure_mode"] = default_guided_failure_mode
            __props__.__dict__["description"] = description
            __props__.__dict__["environment_scope"] = environment_scope
            __props__.__dict__["environments"] = environments
            __props__.__dict__["force_package_download"] = force_package_download
            __props__.__dict__["multi_tenancy_mode"] = multi_tenancy_mode
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["retention_policy"] = retention_policy
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["published_runbook_snapshot_id"] = None
            __props__.__dict__["runbook_process_id"] = None
        super(Runbook, __self__).__init__(
            'octopusdeploy:index/runbook:Runbook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connectivity_policy: Optional[pulumi.Input[pulumi.InputType['RunbookConnectivityPolicyArgs']]] = None,
            default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            environment_scope: Optional[pulumi.Input[str]] = None,
            environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            force_package_download: Optional[pulumi.Input[bool]] = None,
            multi_tenancy_mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            published_runbook_snapshot_id: Optional[pulumi.Input[str]] = None,
            retention_policy: Optional[pulumi.Input[pulumi.InputType['RunbookRetentionPolicyArgs']]] = None,
            runbook_process_id: Optional[pulumi.Input[str]] = None,
            space_id: Optional[pulumi.Input[str]] = None) -> 'Runbook':
        """
        Get an existing Runbook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] default_guided_failure_mode: Sets the runbook guided failure mode.
        :param pulumi.Input[str] description: The description of this runbook.
        :param pulumi.Input[str] environment_scope: Determines how the runbook is scoped to environments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: When environment_scope is set to "Specified", this is the list of environments the runbook can be run against.
        :param pulumi.Input[bool] force_package_download: Whether to force packages to be re-downloaded or not
        :param pulumi.Input[str] multi_tenancy_mode: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[str] name: The name of the runbook in Octopus Deploy. This name must be unique.
        :param pulumi.Input[str] project_id: The project that this runbook belongs to.
        :param pulumi.Input[str] published_runbook_snapshot_id: The published snapshot ID.
        :param pulumi.Input[pulumi.InputType['RunbookRetentionPolicyArgs']] retention_policy: Sets the runbook retention policy
        :param pulumi.Input[str] runbook_process_id: The runbook process ID.
        :param pulumi.Input[str] space_id: The space ID associated with this runbook.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RunbookState.__new__(_RunbookState)

        __props__.__dict__["connectivity_policy"] = connectivity_policy
        __props__.__dict__["default_guided_failure_mode"] = default_guided_failure_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["environment_scope"] = environment_scope
        __props__.__dict__["environments"] = environments
        __props__.__dict__["force_package_download"] = force_package_download
        __props__.__dict__["multi_tenancy_mode"] = multi_tenancy_mode
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["published_runbook_snapshot_id"] = published_runbook_snapshot_id
        __props__.__dict__["retention_policy"] = retention_policy
        __props__.__dict__["runbook_process_id"] = runbook_process_id
        __props__.__dict__["space_id"] = space_id
        return Runbook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectivityPolicy")
    def connectivity_policy(self) -> pulumi.Output['outputs.RunbookConnectivityPolicy']:
        return pulumi.get(self, "connectivity_policy")

    @property
    @pulumi.getter(name="defaultGuidedFailureMode")
    def default_guided_failure_mode(self) -> pulumi.Output[str]:
        """
        Sets the runbook guided failure mode.
        """
        return pulumi.get(self, "default_guided_failure_mode")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of this runbook.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentScope")
    def environment_scope(self) -> pulumi.Output[str]:
        """
        Determines how the runbook is scoped to environments.
        """
        return pulumi.get(self, "environment_scope")

    @property
    @pulumi.getter
    def environments(self) -> pulumi.Output[Sequence[str]]:
        """
        When environment_scope is set to "Specified", this is the list of environments the runbook can be run against.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="forcePackageDownload")
    def force_package_download(self) -> pulumi.Output[bool]:
        """
        Whether to force packages to be re-downloaded or not
        """
        return pulumi.get(self, "force_package_download")

    @property
    @pulumi.getter(name="multiTenancyMode")
    def multi_tenancy_mode(self) -> pulumi.Output[str]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "multi_tenancy_mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the runbook in Octopus Deploy. This name must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The project that this runbook belongs to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="publishedRunbookSnapshotId")
    def published_runbook_snapshot_id(self) -> pulumi.Output[str]:
        """
        The published snapshot ID.
        """
        return pulumi.get(self, "published_runbook_snapshot_id")

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> pulumi.Output['outputs.RunbookRetentionPolicy']:
        """
        Sets the runbook retention policy
        """
        return pulumi.get(self, "retention_policy")

    @property
    @pulumi.getter(name="runbookProcessId")
    def runbook_process_id(self) -> pulumi.Output[str]:
        """
        The runbook process ID.
        """
        return pulumi.get(self, "runbook_process_id")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID associated with this runbook.
        """
        return pulumi.get(self, "space_id")

