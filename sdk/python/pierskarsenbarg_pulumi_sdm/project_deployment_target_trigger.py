# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProjectDeploymentTargetTriggerArgs', 'ProjectDeploymentTargetTrigger']

@pulumi.input_type
class ProjectDeploymentTargetTriggerArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 should_redeploy: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ProjectDeploymentTargetTrigger resource.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_categories: Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_groups: Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[bool] should_redeploy: Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        pulumi.set(__self__, "project_id", project_id)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if event_categories is not None:
            pulumi.set(__self__, "event_categories", event_categories)
        if event_groups is not None:
            pulumi.set(__self__, "event_groups", event_groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if should_redeploy is not None:
            pulumi.set(__self__, "should_redeploy", should_redeploy)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The ID of the project to attach the trigger.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="eventCategories")
    def event_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "event_categories")

    @event_categories.setter
    def event_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "event_categories", value)

    @property
    @pulumi.getter(name="eventGroups")
    def event_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "event_groups")

    @event_groups.setter
    def event_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "event_groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shouldRedeploy")
    def should_redeploy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        return pulumi.get(self, "should_redeploy")

    @should_redeploy.setter
    def should_redeploy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_redeploy", value)


@pulumi.input_type
class _ProjectDeploymentTargetTriggerState:
    def __init__(__self__, *,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 should_redeploy: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ProjectDeploymentTargetTrigger resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_categories: Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_groups: Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[bool] should_redeploy: Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if event_categories is not None:
            pulumi.set(__self__, "event_categories", event_categories)
        if event_groups is not None:
            pulumi.set(__self__, "event_groups", event_groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if should_redeploy is not None:
            pulumi.set(__self__, "should_redeploy", should_redeploy)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="eventCategories")
    def event_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "event_categories")

    @event_categories.setter
    def event_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "event_categories", value)

    @property
    @pulumi.getter(name="eventGroups")
    def event_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "event_groups")

    @event_groups.setter
    def event_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "event_groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project to attach the trigger.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shouldRedeploy")
    def should_redeploy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        return pulumi.get(self, "should_redeploy")

    @should_redeploy.setter
    def should_redeploy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_redeploy", value)


class ProjectDeploymentTargetTrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 should_redeploy: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as octopusdeploy

        example = octopusdeploy.ProjectDeploymentTargetTrigger("example",
            event_categories=["MachineUnhealthy"],
            project_id="Projects-123")
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger [options] octopusdeploy_project_deployment_target_trigger.<name> <project_deployment_target_trigger-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_categories: Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_groups: Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[bool] should_redeploy: Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectDeploymentTargetTriggerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as octopusdeploy

        example = octopusdeploy.ProjectDeploymentTargetTrigger("example",
            event_categories=["MachineUnhealthy"],
            project_id="Projects-123")
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger [options] octopusdeploy_project_deployment_target_trigger.<name> <project_deployment_target_trigger-id>
        ```

        :param str resource_name: The name of the resource.
        :param ProjectDeploymentTargetTriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectDeploymentTargetTriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 should_redeploy: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectDeploymentTargetTriggerArgs.__new__(ProjectDeploymentTargetTriggerArgs)

            __props__.__dict__["environment_ids"] = environment_ids
            __props__.__dict__["event_categories"] = event_categories
            __props__.__dict__["event_groups"] = event_groups
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["roles"] = roles
            __props__.__dict__["should_redeploy"] = should_redeploy
        super(ProjectDeploymentTargetTrigger, __self__).__init__(
            'octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            event_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            event_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            should_redeploy: Optional[pulumi.Input[bool]] = None) -> 'ProjectDeploymentTargetTrigger':
        """
        Get an existing ProjectDeploymentTargetTrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_categories: Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_groups: Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        :param pulumi.Input[bool] should_redeploy: Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectDeploymentTargetTriggerState.__new__(_ProjectDeploymentTargetTriggerState)

        __props__.__dict__["environment_ids"] = environment_ids
        __props__.__dict__["event_categories"] = event_categories
        __props__.__dict__["event_groups"] = event_groups
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["roles"] = roles
        __props__.__dict__["should_redeploy"] = should_redeploy
        return ProjectDeploymentTargetTrigger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter(name="eventCategories")
    def event_categories(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "event_categories")

    @property
    @pulumi.getter(name="eventGroups")
    def event_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "event_groups")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The ID of the project to attach the trigger.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shouldRedeploy")
    def should_redeploy(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        return pulumi.get(self, "should_redeploy")

