# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LifecycleArgs', 'Lifecycle']

@pulumi.input_type
class LifecycleArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phases: Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseArgs']]]] = None,
                 release_retention_policy: Optional[pulumi.Input['LifecycleReleaseRetentionPolicyArgs']] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tentacle_retention_policy: Optional[pulumi.Input['LifecycleTentacleRetentionPolicyArgs']] = None):
        """
        The set of arguments for constructing a Lifecycle resource.
        :param pulumi.Input[str] description: The description of this lifecycle.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phases is not None:
            pulumi.set(__self__, "phases", phases)
        if release_retention_policy is not None:
            pulumi.set(__self__, "release_retention_policy", release_retention_policy)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if tentacle_retention_policy is not None:
            pulumi.set(__self__, "tentacle_retention_policy", tentacle_retention_policy)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this lifecycle.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def phases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseArgs']]]]:
        return pulumi.get(self, "phases")

    @phases.setter
    def phases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseArgs']]]]):
        pulumi.set(self, "phases", value)

    @property
    @pulumi.getter(name="releaseRetentionPolicy")
    def release_retention_policy(self) -> Optional[pulumi.Input['LifecycleReleaseRetentionPolicyArgs']]:
        return pulumi.get(self, "release_retention_policy")

    @release_retention_policy.setter
    def release_retention_policy(self, value: Optional[pulumi.Input['LifecycleReleaseRetentionPolicyArgs']]):
        pulumi.set(self, "release_retention_policy", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="tentacleRetentionPolicy")
    def tentacle_retention_policy(self) -> Optional[pulumi.Input['LifecycleTentacleRetentionPolicyArgs']]:
        return pulumi.get(self, "tentacle_retention_policy")

    @tentacle_retention_policy.setter
    def tentacle_retention_policy(self, value: Optional[pulumi.Input['LifecycleTentacleRetentionPolicyArgs']]):
        pulumi.set(self, "tentacle_retention_policy", value)


@pulumi.input_type
class _LifecycleState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phases: Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseArgs']]]] = None,
                 release_retention_policy: Optional[pulumi.Input['LifecycleReleaseRetentionPolicyArgs']] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tentacle_retention_policy: Optional[pulumi.Input['LifecycleTentacleRetentionPolicyArgs']] = None):
        """
        Input properties used for looking up and filtering Lifecycle resources.
        :param pulumi.Input[str] description: The description of this lifecycle.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phases is not None:
            pulumi.set(__self__, "phases", phases)
        if release_retention_policy is not None:
            pulumi.set(__self__, "release_retention_policy", release_retention_policy)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if tentacle_retention_policy is not None:
            pulumi.set(__self__, "tentacle_retention_policy", tentacle_retention_policy)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this lifecycle.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def phases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseArgs']]]]:
        return pulumi.get(self, "phases")

    @phases.setter
    def phases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseArgs']]]]):
        pulumi.set(self, "phases", value)

    @property
    @pulumi.getter(name="releaseRetentionPolicy")
    def release_retention_policy(self) -> Optional[pulumi.Input['LifecycleReleaseRetentionPolicyArgs']]:
        return pulumi.get(self, "release_retention_policy")

    @release_retention_policy.setter
    def release_retention_policy(self, value: Optional[pulumi.Input['LifecycleReleaseRetentionPolicyArgs']]):
        pulumi.set(self, "release_retention_policy", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="tentacleRetentionPolicy")
    def tentacle_retention_policy(self) -> Optional[pulumi.Input['LifecycleTentacleRetentionPolicyArgs']]:
        return pulumi.get(self, "tentacle_retention_policy")

    @tentacle_retention_policy.setter
    def tentacle_retention_policy(self, value: Optional[pulumi.Input['LifecycleTentacleRetentionPolicyArgs']]):
        pulumi.set(self, "tentacle_retention_policy", value)


class Lifecycle(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LifecyclePhaseArgs']]]]] = None,
                 release_retention_policy: Optional[pulumi.Input[pulumi.InputType['LifecycleReleaseRetentionPolicyArgs']]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tentacle_retention_policy: Optional[pulumi.Input[pulumi.InputType['LifecycleTentacleRetentionPolicyArgs']]] = None,
                 __props__=None):
        """
        This resource manages lifecycles in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as octopusdeploy

        example = octopusdeploy.Lifecycle("example",
            description="This is the default lifecycle.",
            phases=[
                octopusdeploy.LifecyclePhaseArgs(
                    automatic_deployment_targets=["Environments-321"],
                    name="foo",
                    release_retention_policy=octopusdeploy.LifecyclePhaseReleaseRetentionPolicyArgs(
                        quantity_to_keep=1,
                        should_keep_forever=True,
                        unit="Days",
                    ),
                    tentacle_retention_policy=octopusdeploy.LifecyclePhaseTentacleRetentionPolicyArgs(
                        quantity_to_keep=30,
                        should_keep_forever=False,
                        unit="Items",
                    ),
                ),
                octopusdeploy.LifecyclePhaseArgs(
                    is_optional_phase=True,
                    name="bar",
                    optional_deployment_targets=["Environments-321"],
                ),
            ],
            release_retention_policy=octopusdeploy.LifecycleReleaseRetentionPolicyArgs(
                quantity_to_keep=1,
                should_keep_forever=True,
                unit="Days",
            ),
            tentacle_retention_policy=octopusdeploy.LifecycleTentacleRetentionPolicyArgs(
                quantity_to_keep=30,
                should_keep_forever=False,
                unit="Items",
            ))
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/lifecycle:Lifecycle [options] octopusdeploy_lifecycle.<name> <lifecycle-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this lifecycle.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LifecycleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages lifecycles in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as octopusdeploy

        example = octopusdeploy.Lifecycle("example",
            description="This is the default lifecycle.",
            phases=[
                octopusdeploy.LifecyclePhaseArgs(
                    automatic_deployment_targets=["Environments-321"],
                    name="foo",
                    release_retention_policy=octopusdeploy.LifecyclePhaseReleaseRetentionPolicyArgs(
                        quantity_to_keep=1,
                        should_keep_forever=True,
                        unit="Days",
                    ),
                    tentacle_retention_policy=octopusdeploy.LifecyclePhaseTentacleRetentionPolicyArgs(
                        quantity_to_keep=30,
                        should_keep_forever=False,
                        unit="Items",
                    ),
                ),
                octopusdeploy.LifecyclePhaseArgs(
                    is_optional_phase=True,
                    name="bar",
                    optional_deployment_targets=["Environments-321"],
                ),
            ],
            release_retention_policy=octopusdeploy.LifecycleReleaseRetentionPolicyArgs(
                quantity_to_keep=1,
                should_keep_forever=True,
                unit="Days",
            ),
            tentacle_retention_policy=octopusdeploy.LifecycleTentacleRetentionPolicyArgs(
                quantity_to_keep=30,
                should_keep_forever=False,
                unit="Items",
            ))
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/lifecycle:Lifecycle [options] octopusdeploy_lifecycle.<name> <lifecycle-id>
        ```

        :param str resource_name: The name of the resource.
        :param LifecycleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LifecycleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LifecyclePhaseArgs']]]]] = None,
                 release_retention_policy: Optional[pulumi.Input[pulumi.InputType['LifecycleReleaseRetentionPolicyArgs']]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tentacle_retention_policy: Optional[pulumi.Input[pulumi.InputType['LifecycleTentacleRetentionPolicyArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LifecycleArgs.__new__(LifecycleArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["phases"] = phases
            __props__.__dict__["release_retention_policy"] = release_retention_policy
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["tentacle_retention_policy"] = tentacle_retention_policy
        super(Lifecycle, __self__).__init__(
            'octopusdeploy:index/lifecycle:Lifecycle',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            phases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LifecyclePhaseArgs']]]]] = None,
            release_retention_policy: Optional[pulumi.Input[pulumi.InputType['LifecycleReleaseRetentionPolicyArgs']]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            tentacle_retention_policy: Optional[pulumi.Input[pulumi.InputType['LifecycleTentacleRetentionPolicyArgs']]] = None) -> 'Lifecycle':
        """
        Get an existing Lifecycle resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this lifecycle.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LifecycleState.__new__(_LifecycleState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["phases"] = phases
        __props__.__dict__["release_retention_policy"] = release_retention_policy
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["tentacle_retention_policy"] = tentacle_retention_policy
        return Lifecycle(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this lifecycle.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phases(self) -> pulumi.Output[Sequence['outputs.LifecyclePhase']]:
        return pulumi.get(self, "phases")

    @property
    @pulumi.getter(name="releaseRetentionPolicy")
    def release_retention_policy(self) -> pulumi.Output['outputs.LifecycleReleaseRetentionPolicy']:
        return pulumi.get(self, "release_retention_policy")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tentacleRetentionPolicy")
    def tentacle_retention_policy(self) -> pulumi.Output['outputs.LifecycleTentacleRetentionPolicy']:
        return pulumi.get(self, "tentacle_retention_policy")

