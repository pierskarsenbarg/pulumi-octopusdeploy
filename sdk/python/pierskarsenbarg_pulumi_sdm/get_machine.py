# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetMachineResult',
    'AwaitableGetMachineResult',
    'get_machine',
    'get_machine_output',
]

@pulumi.output_type
class GetMachineResult:
    """
    A collection of values returned by getMachine.
    """
    def __init__(__self__, endpoint_communicationstyle=None, endpoint_id=None, endpoint_proxyid=None, endpoint_tentacleversiondetails_upgradelocked=None, endpoint_tentacleversiondetails_upgraderequired=None, endpoint_tentacleversiondetails_upgradesuggested=None, endpoint_tentacleversiondetails_version=None, endpoint_thumbprint=None, endpoint_uri=None, environments=None, haslatestcalamari=None, id=None, isdisabled=None, isinprocess=None, machinepolicy=None, name=None, roles=None, status=None, statussummary=None, tenanteddeploymentparticipation=None, tenantids=None, tenanttags=None):
        if endpoint_communicationstyle and not isinstance(endpoint_communicationstyle, str):
            raise TypeError("Expected argument 'endpoint_communicationstyle' to be a str")
        pulumi.set(__self__, "endpoint_communicationstyle", endpoint_communicationstyle)
        if endpoint_id and not isinstance(endpoint_id, str):
            raise TypeError("Expected argument 'endpoint_id' to be a str")
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if endpoint_proxyid and not isinstance(endpoint_proxyid, str):
            raise TypeError("Expected argument 'endpoint_proxyid' to be a str")
        pulumi.set(__self__, "endpoint_proxyid", endpoint_proxyid)
        if endpoint_tentacleversiondetails_upgradelocked and not isinstance(endpoint_tentacleversiondetails_upgradelocked, str):
            raise TypeError("Expected argument 'endpoint_tentacleversiondetails_upgradelocked' to be a str")
        pulumi.set(__self__, "endpoint_tentacleversiondetails_upgradelocked", endpoint_tentacleversiondetails_upgradelocked)
        if endpoint_tentacleversiondetails_upgraderequired and not isinstance(endpoint_tentacleversiondetails_upgraderequired, str):
            raise TypeError("Expected argument 'endpoint_tentacleversiondetails_upgraderequired' to be a str")
        pulumi.set(__self__, "endpoint_tentacleversiondetails_upgraderequired", endpoint_tentacleversiondetails_upgraderequired)
        if endpoint_tentacleversiondetails_upgradesuggested and not isinstance(endpoint_tentacleversiondetails_upgradesuggested, str):
            raise TypeError("Expected argument 'endpoint_tentacleversiondetails_upgradesuggested' to be a str")
        pulumi.set(__self__, "endpoint_tentacleversiondetails_upgradesuggested", endpoint_tentacleversiondetails_upgradesuggested)
        if endpoint_tentacleversiondetails_version and not isinstance(endpoint_tentacleversiondetails_version, str):
            raise TypeError("Expected argument 'endpoint_tentacleversiondetails_version' to be a str")
        pulumi.set(__self__, "endpoint_tentacleversiondetails_version", endpoint_tentacleversiondetails_version)
        if endpoint_thumbprint and not isinstance(endpoint_thumbprint, str):
            raise TypeError("Expected argument 'endpoint_thumbprint' to be a str")
        pulumi.set(__self__, "endpoint_thumbprint", endpoint_thumbprint)
        if endpoint_uri and not isinstance(endpoint_uri, str):
            raise TypeError("Expected argument 'endpoint_uri' to be a str")
        pulumi.set(__self__, "endpoint_uri", endpoint_uri)
        if environments and not isinstance(environments, list):
            raise TypeError("Expected argument 'environments' to be a list")
        pulumi.set(__self__, "environments", environments)
        if haslatestcalamari and not isinstance(haslatestcalamari, bool):
            raise TypeError("Expected argument 'haslatestcalamari' to be a bool")
        pulumi.set(__self__, "haslatestcalamari", haslatestcalamari)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if isdisabled and not isinstance(isdisabled, bool):
            raise TypeError("Expected argument 'isdisabled' to be a bool")
        pulumi.set(__self__, "isdisabled", isdisabled)
        if isinprocess and not isinstance(isinprocess, bool):
            raise TypeError("Expected argument 'isinprocess' to be a bool")
        pulumi.set(__self__, "isinprocess", isinprocess)
        if machinepolicy and not isinstance(machinepolicy, str):
            raise TypeError("Expected argument 'machinepolicy' to be a str")
        pulumi.set(__self__, "machinepolicy", machinepolicy)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if statussummary and not isinstance(statussummary, str):
            raise TypeError("Expected argument 'statussummary' to be a str")
        pulumi.set(__self__, "statussummary", statussummary)
        if tenanteddeploymentparticipation and not isinstance(tenanteddeploymentparticipation, str):
            raise TypeError("Expected argument 'tenanteddeploymentparticipation' to be a str")
        pulumi.set(__self__, "tenanteddeploymentparticipation", tenanteddeploymentparticipation)
        if tenantids and not isinstance(tenantids, list):
            raise TypeError("Expected argument 'tenantids' to be a list")
        pulumi.set(__self__, "tenantids", tenantids)
        if tenanttags and not isinstance(tenanttags, list):
            raise TypeError("Expected argument 'tenanttags' to be a list")
        pulumi.set(__self__, "tenanttags", tenanttags)

    @property
    @pulumi.getter(name="endpointCommunicationstyle")
    def endpoint_communicationstyle(self) -> str:
        return pulumi.get(self, "endpoint_communicationstyle")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> str:
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="endpointProxyid")
    def endpoint_proxyid(self) -> str:
        return pulumi.get(self, "endpoint_proxyid")

    @property
    @pulumi.getter(name="endpointTentacleversiondetailsUpgradelocked")
    def endpoint_tentacleversiondetails_upgradelocked(self) -> str:
        return pulumi.get(self, "endpoint_tentacleversiondetails_upgradelocked")

    @property
    @pulumi.getter(name="endpointTentacleversiondetailsUpgraderequired")
    def endpoint_tentacleversiondetails_upgraderequired(self) -> str:
        return pulumi.get(self, "endpoint_tentacleversiondetails_upgraderequired")

    @property
    @pulumi.getter(name="endpointTentacleversiondetailsUpgradesuggested")
    def endpoint_tentacleversiondetails_upgradesuggested(self) -> str:
        return pulumi.get(self, "endpoint_tentacleversiondetails_upgradesuggested")

    @property
    @pulumi.getter(name="endpointTentacleversiondetailsVersion")
    def endpoint_tentacleversiondetails_version(self) -> str:
        return pulumi.get(self, "endpoint_tentacleversiondetails_version")

    @property
    @pulumi.getter(name="endpointThumbprint")
    def endpoint_thumbprint(self) -> str:
        return pulumi.get(self, "endpoint_thumbprint")

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> str:
        return pulumi.get(self, "endpoint_uri")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def haslatestcalamari(self) -> bool:
        return pulumi.get(self, "haslatestcalamari")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def isdisabled(self) -> bool:
        return pulumi.get(self, "isdisabled")

    @property
    @pulumi.getter
    def isinprocess(self) -> bool:
        return pulumi.get(self, "isinprocess")

    @property
    @pulumi.getter
    def machinepolicy(self) -> str:
        return pulumi.get(self, "machinepolicy")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def statussummary(self) -> str:
        return pulumi.get(self, "statussummary")

    @property
    @pulumi.getter
    def tenanteddeploymentparticipation(self) -> str:
        return pulumi.get(self, "tenanteddeploymentparticipation")

    @property
    @pulumi.getter
    def tenantids(self) -> Sequence[str]:
        return pulumi.get(self, "tenantids")

    @property
    @pulumi.getter
    def tenanttags(self) -> Sequence[str]:
        return pulumi.get(self, "tenanttags")


class AwaitableGetMachineResult(GetMachineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMachineResult(
            endpoint_communicationstyle=self.endpoint_communicationstyle,
            endpoint_id=self.endpoint_id,
            endpoint_proxyid=self.endpoint_proxyid,
            endpoint_tentacleversiondetails_upgradelocked=self.endpoint_tentacleversiondetails_upgradelocked,
            endpoint_tentacleversiondetails_upgraderequired=self.endpoint_tentacleversiondetails_upgraderequired,
            endpoint_tentacleversiondetails_upgradesuggested=self.endpoint_tentacleversiondetails_upgradesuggested,
            endpoint_tentacleversiondetails_version=self.endpoint_tentacleversiondetails_version,
            endpoint_thumbprint=self.endpoint_thumbprint,
            endpoint_uri=self.endpoint_uri,
            environments=self.environments,
            haslatestcalamari=self.haslatestcalamari,
            id=self.id,
            isdisabled=self.isdisabled,
            isinprocess=self.isinprocess,
            machinepolicy=self.machinepolicy,
            name=self.name,
            roles=self.roles,
            status=self.status,
            statussummary=self.statussummary,
            tenanteddeploymentparticipation=self.tenanteddeploymentparticipation,
            tenantids=self.tenantids,
            tenanttags=self.tenanttags)


def get_machine(name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMachineResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getMachine:getMachine', __args__, opts=opts, typ=GetMachineResult).value

    return AwaitableGetMachineResult(
        endpoint_communicationstyle=__ret__.endpoint_communicationstyle,
        endpoint_id=__ret__.endpoint_id,
        endpoint_proxyid=__ret__.endpoint_proxyid,
        endpoint_tentacleversiondetails_upgradelocked=__ret__.endpoint_tentacleversiondetails_upgradelocked,
        endpoint_tentacleversiondetails_upgraderequired=__ret__.endpoint_tentacleversiondetails_upgraderequired,
        endpoint_tentacleversiondetails_upgradesuggested=__ret__.endpoint_tentacleversiondetails_upgradesuggested,
        endpoint_tentacleversiondetails_version=__ret__.endpoint_tentacleversiondetails_version,
        endpoint_thumbprint=__ret__.endpoint_thumbprint,
        endpoint_uri=__ret__.endpoint_uri,
        environments=__ret__.environments,
        haslatestcalamari=__ret__.haslatestcalamari,
        id=__ret__.id,
        isdisabled=__ret__.isdisabled,
        isinprocess=__ret__.isinprocess,
        machinepolicy=__ret__.machinepolicy,
        name=__ret__.name,
        roles=__ret__.roles,
        status=__ret__.status,
        statussummary=__ret__.statussummary,
        tenanteddeploymentparticipation=__ret__.tenanteddeploymentparticipation,
        tenantids=__ret__.tenantids,
        tenanttags=__ret__.tenanttags)


@_utilities.lift_output_func(get_machine)
def get_machine_output(name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMachineResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
