# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetFeedsResult',
    'AwaitableGetFeedsResult',
    'get_feeds',
    'get_feeds_output',
]

@pulumi.output_type
class GetFeedsResult:
    """
    A collection of values returned by getFeeds.
    """
    def __init__(__self__, feed_type=None, feeds=None, id=None, ids=None, name=None, partial_name=None, skip=None, take=None):
        if feed_type and not isinstance(feed_type, str):
            raise TypeError("Expected argument 'feed_type' to be a str")
        pulumi.set(__self__, "feed_type", feed_type)
        if feeds and not isinstance(feeds, list):
            raise TypeError("Expected argument 'feeds' to be a list")
        pulumi.set(__self__, "feeds", feeds)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partial_name and not isinstance(partial_name, str):
            raise TypeError("Expected argument 'partial_name' to be a str")
        pulumi.set(__self__, "partial_name", partial_name)
        if skip and not isinstance(skip, int):
            raise TypeError("Expected argument 'skip' to be a int")
        pulumi.set(__self__, "skip", skip)
        if take and not isinstance(take, int):
            raise TypeError("Expected argument 'take' to be a int")
        pulumi.set(__self__, "take", take)

    @property
    @pulumi.getter(name="feedType")
    def feed_type(self) -> Optional[str]:
        """
        A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
        """
        return pulumi.get(self, "feed_type")

    @property
    @pulumi.getter
    def feeds(self) -> Sequence['outputs.GetFeedsFeedResult']:
        """
        A list of feeds that match the filter(s).
        """
        return pulumi.get(self, "feeds")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A filter to search by name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partialName")
    def partial_name(self) -> Optional[str]:
        """
        A filter to search by the partial match of a name.
        """
        return pulumi.get(self, "partial_name")

    @property
    @pulumi.getter
    def skip(self) -> Optional[int]:
        """
        A filter to specify the number of items to skip in the response.
        """
        return pulumi.get(self, "skip")

    @property
    @pulumi.getter
    def take(self) -> Optional[int]:
        """
        A filter to specify the number of items to take (or return) in the response.
        """
        return pulumi.get(self, "take")


class AwaitableGetFeedsResult(GetFeedsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFeedsResult(
            feed_type=self.feed_type,
            feeds=self.feeds,
            id=self.id,
            ids=self.ids,
            name=self.name,
            partial_name=self.partial_name,
            skip=self.skip,
            take=self.take)


def get_feeds(feed_type: Optional[str] = None,
              feeds: Optional[Sequence[pulumi.InputType['GetFeedsFeedArgs']]] = None,
              ids: Optional[Sequence[str]] = None,
              name: Optional[str] = None,
              partial_name: Optional[str] = None,
              skip: Optional[int] = None,
              take: Optional[int] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFeedsResult:
    """
    Provides information about existing feeds.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_octopusdeploy as octopusdeploy

    example = octopusdeploy.get_feeds(feed_type="NuGet",
        ids=[
            "Feeds-123",
            "Feeds-321",
        ],
        partial_name="Develop",
        skip=5,
        take=100)
    ```


    :param str feed_type: A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
    :param Sequence[pulumi.InputType['GetFeedsFeedArgs']] feeds: A list of feeds that match the filter(s).
    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str name: A filter to search by name.
    :param str partial_name: A filter to search by the partial match of a name.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    """
    __args__ = dict()
    __args__['feedType'] = feed_type
    __args__['feeds'] = feeds
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['partialName'] = partial_name
    __args__['skip'] = skip
    __args__['take'] = take
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getFeeds:getFeeds', __args__, opts=opts, typ=GetFeedsResult).value

    return AwaitableGetFeedsResult(
        feed_type=__ret__.feed_type,
        feeds=__ret__.feeds,
        id=__ret__.id,
        ids=__ret__.ids,
        name=__ret__.name,
        partial_name=__ret__.partial_name,
        skip=__ret__.skip,
        take=__ret__.take)


@_utilities.lift_output_func(get_feeds)
def get_feeds_output(feed_type: Optional[pulumi.Input[Optional[str]]] = None,
                     feeds: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetFeedsFeedArgs']]]]] = None,
                     ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     name: Optional[pulumi.Input[Optional[str]]] = None,
                     partial_name: Optional[pulumi.Input[Optional[str]]] = None,
                     skip: Optional[pulumi.Input[Optional[int]]] = None,
                     take: Optional[pulumi.Input[Optional[int]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFeedsResult]:
    """
    Provides information about existing feeds.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_octopusdeploy as octopusdeploy

    example = octopusdeploy.get_feeds(feed_type="NuGet",
        ids=[
            "Feeds-123",
            "Feeds-321",
        ],
        partial_name="Develop",
        skip=5,
        take=100)
    ```


    :param str feed_type: A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
    :param Sequence[pulumi.InputType['GetFeedsFeedArgs']] feeds: A list of feeds that match the filter(s).
    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str name: A filter to search by name.
    :param str partial_name: A filter to search by the partial match of a name.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    """
    ...
