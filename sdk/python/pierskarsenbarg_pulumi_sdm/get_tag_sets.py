# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTagSetsResult',
    'AwaitableGetTagSetsResult',
    'get_tag_sets',
    'get_tag_sets_output',
]

@pulumi.output_type
class GetTagSetsResult:
    """
    A collection of values returned by getTagSets.
    """
    def __init__(__self__, id=None, ids=None, partial_name=None, skip=None, tag_sets=None, take=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if partial_name and not isinstance(partial_name, str):
            raise TypeError("Expected argument 'partial_name' to be a str")
        pulumi.set(__self__, "partial_name", partial_name)
        if skip and not isinstance(skip, int):
            raise TypeError("Expected argument 'skip' to be a int")
        pulumi.set(__self__, "skip", skip)
        if tag_sets and not isinstance(tag_sets, list):
            raise TypeError("Expected argument 'tag_sets' to be a list")
        pulumi.set(__self__, "tag_sets", tag_sets)
        if take and not isinstance(take, int):
            raise TypeError("Expected argument 'take' to be a int")
        pulumi.set(__self__, "take", take)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="partialName")
    def partial_name(self) -> Optional[str]:
        """
        A filter to search by the partial match of a name.
        """
        return pulumi.get(self, "partial_name")

    @property
    @pulumi.getter
    def skip(self) -> Optional[int]:
        """
        A filter to specify the number of items to skip in the response.
        """
        return pulumi.get(self, "skip")

    @property
    @pulumi.getter(name="tagSets")
    def tag_sets(self) -> Sequence['outputs.GetTagSetsTagSetResult']:
        """
        A list of tag sets that match the filter(s).
        """
        return pulumi.get(self, "tag_sets")

    @property
    @pulumi.getter
    def take(self) -> Optional[int]:
        """
        A filter to specify the number of items to take (or return) in the response.
        """
        return pulumi.get(self, "take")


class AwaitableGetTagSetsResult(GetTagSetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTagSetsResult(
            id=self.id,
            ids=self.ids,
            partial_name=self.partial_name,
            skip=self.skip,
            tag_sets=self.tag_sets,
            take=self.take)


def get_tag_sets(ids: Optional[Sequence[str]] = None,
                 partial_name: Optional[str] = None,
                 skip: Optional[int] = None,
                 tag_sets: Optional[Sequence[pulumi.InputType['GetTagSetsTagSetArgs']]] = None,
                 take: Optional[int] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTagSetsResult:
    """
    Provides information about existing tag sets.


    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str partial_name: A filter to search by the partial match of a name.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param Sequence[pulumi.InputType['GetTagSetsTagSetArgs']] tag_sets: A list of tag sets that match the filter(s).
    :param int take: A filter to specify the number of items to take (or return) in the response.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['partialName'] = partial_name
    __args__['skip'] = skip
    __args__['tagSets'] = tag_sets
    __args__['take'] = take
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getTagSets:getTagSets', __args__, opts=opts, typ=GetTagSetsResult).value

    return AwaitableGetTagSetsResult(
        id=__ret__.id,
        ids=__ret__.ids,
        partial_name=__ret__.partial_name,
        skip=__ret__.skip,
        tag_sets=__ret__.tag_sets,
        take=__ret__.take)


@_utilities.lift_output_func(get_tag_sets)
def get_tag_sets_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                        partial_name: Optional[pulumi.Input[Optional[str]]] = None,
                        skip: Optional[pulumi.Input[Optional[int]]] = None,
                        tag_sets: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTagSetsTagSetArgs']]]]] = None,
                        take: Optional[pulumi.Input[Optional[int]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTagSetsResult]:
    """
    Provides information about existing tag sets.


    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str partial_name: A filter to search by the partial match of a name.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param Sequence[pulumi.InputType['GetTagSetsTagSetArgs']] tag_sets: A list of tag sets that match the filter(s).
    :param int take: A filter to specify the number of items to take (or return) in the response.
    """
    ...
