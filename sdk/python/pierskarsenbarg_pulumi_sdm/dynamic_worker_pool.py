# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DynamicWorkerPoolArgs', 'DynamicWorkerPool']

@pulumi.input_type
class DynamicWorkerPoolArgs:
    def __init__(__self__, *,
                 worker_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 space_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DynamicWorkerPool resource.
        :param pulumi.Input[str] description: The description of this dynamic worker pool.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[int] sort_order: The order number to sort a dynamic worker pool.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "worker_type", worker_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "worker_type")

    @worker_type.setter
    def worker_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "worker_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this dynamic worker pool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        """
        The order number to sort a dynamic worker pool.
        """
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class _DynamicWorkerPoolState:
    def __init__(__self__, *,
                 can_add_workers: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 worker_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DynamicWorkerPool resources.
        :param pulumi.Input[str] description: The description of this dynamic worker pool.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[int] sort_order: The order number to sort a dynamic worker pool.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        if can_add_workers is not None:
            pulumi.set(__self__, "can_add_workers", can_add_workers)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if worker_type is not None:
            pulumi.set(__self__, "worker_type", worker_type)

    @property
    @pulumi.getter(name="canAddWorkers")
    def can_add_workers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_add_workers")

    @can_add_workers.setter
    def can_add_workers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_add_workers", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this dynamic worker pool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        """
        The order number to sort a dynamic worker pool.
        """
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_type")

    @worker_type.setter
    def worker_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_type", value)


class DynamicWorkerPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 worker_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages dynamic worker pools in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as octopusdeploy

        example = octopusdeploy.DynamicWorkerPool("example",
            description="Description for the dynamic worker pool.",
            is_default=True,
            sort_order=5,
            worker_type="UbuntuDefault")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this dynamic worker pool.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[int] sort_order: The order number to sort a dynamic worker pool.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DynamicWorkerPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages dynamic worker pools in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as octopusdeploy

        example = octopusdeploy.DynamicWorkerPool("example",
            description="Description for the dynamic worker pool.",
            is_default=True,
            sort_order=5,
            worker_type="UbuntuDefault")
        ```

        :param str resource_name: The name of the resource.
        :param DynamicWorkerPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DynamicWorkerPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 worker_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DynamicWorkerPoolArgs.__new__(DynamicWorkerPoolArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["is_default"] = is_default
            __props__.__dict__["name"] = name
            __props__.__dict__["sort_order"] = sort_order
            __props__.__dict__["space_id"] = space_id
            if worker_type is None and not opts.urn:
                raise TypeError("Missing required property 'worker_type'")
            __props__.__dict__["worker_type"] = worker_type
            __props__.__dict__["can_add_workers"] = None
        super(DynamicWorkerPool, __self__).__init__(
            'octopusdeploy:index/dynamicWorkerPool:DynamicWorkerPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            can_add_workers: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            is_default: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            sort_order: Optional[pulumi.Input[int]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            worker_type: Optional[pulumi.Input[str]] = None) -> 'DynamicWorkerPool':
        """
        Get an existing DynamicWorkerPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this dynamic worker pool.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[int] sort_order: The order number to sort a dynamic worker pool.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DynamicWorkerPoolState.__new__(_DynamicWorkerPoolState)

        __props__.__dict__["can_add_workers"] = can_add_workers
        __props__.__dict__["description"] = description
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["name"] = name
        __props__.__dict__["sort_order"] = sort_order
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["worker_type"] = worker_type
        return DynamicWorkerPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="canAddWorkers")
    def can_add_workers(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "can_add_workers")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this dynamic worker pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> pulumi.Output[int]:
        """
        The order number to sort a dynamic worker pool.
        """
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "worker_type")

