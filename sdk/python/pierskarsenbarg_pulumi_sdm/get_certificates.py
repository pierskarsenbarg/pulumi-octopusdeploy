# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCertificatesResult',
    'AwaitableGetCertificatesResult',
    'get_certificates',
    'get_certificates_output',
]

@pulumi.output_type
class GetCertificatesResult:
    """
    A collection of values returned by getCertificates.
    """
    def __init__(__self__, archived=None, certificates=None, first_result=None, id=None, ids=None, order_by=None, partial_name=None, search=None, skip=None, take=None, tenant=None):
        if archived and not isinstance(archived, str):
            raise TypeError("Expected argument 'archived' to be a str")
        pulumi.set(__self__, "archived", archived)
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if first_result and not isinstance(first_result, str):
            raise TypeError("Expected argument 'first_result' to be a str")
        pulumi.set(__self__, "first_result", first_result)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if partial_name and not isinstance(partial_name, str):
            raise TypeError("Expected argument 'partial_name' to be a str")
        pulumi.set(__self__, "partial_name", partial_name)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)
        if skip and not isinstance(skip, int):
            raise TypeError("Expected argument 'skip' to be a int")
        pulumi.set(__self__, "skip", skip)
        if take and not isinstance(take, int):
            raise TypeError("Expected argument 'take' to be a int")
        pulumi.set(__self__, "take", take)
        if tenant and not isinstance(tenant, str):
            raise TypeError("Expected argument 'tenant' to be a str")
        pulumi.set(__self__, "tenant", tenant)

    @property
    @pulumi.getter
    def archived(self) -> Optional[str]:
        """
        A filter to search for resources that have been archived.
        """
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetCertificatesCertificateResult']:
        """
        A list of certificates that match the filter(s).
        """
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter(name="firstResult")
    def first_result(self) -> Optional[str]:
        """
        A filter to define the first result.
        """
        return pulumi.get(self, "first_result")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        """
        A filter used to order the search results.
        """
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="partialName")
    def partial_name(self) -> Optional[str]:
        """
        A filter to search by the partial match of a name.
        """
        return pulumi.get(self, "partial_name")

    @property
    @pulumi.getter
    def search(self) -> Optional[str]:
        """
        A filter of terms used the search operation.
        """
        return pulumi.get(self, "search")

    @property
    @pulumi.getter
    def skip(self) -> Optional[int]:
        """
        A filter to specify the number of items to skip in the response.
        """
        return pulumi.get(self, "skip")

    @property
    @pulumi.getter
    def take(self) -> Optional[int]:
        """
        A filter to specify the number of items to take (or return) in the response.
        """
        return pulumi.get(self, "take")

    @property
    @pulumi.getter
    def tenant(self) -> Optional[str]:
        """
        A filter to search by a tenant ID.
        """
        return pulumi.get(self, "tenant")


class AwaitableGetCertificatesResult(GetCertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificatesResult(
            archived=self.archived,
            certificates=self.certificates,
            first_result=self.first_result,
            id=self.id,
            ids=self.ids,
            order_by=self.order_by,
            partial_name=self.partial_name,
            search=self.search,
            skip=self.skip,
            take=self.take,
            tenant=self.tenant)


def get_certificates(archived: Optional[str] = None,
                     certificates: Optional[Sequence[pulumi.InputType['GetCertificatesCertificateArgs']]] = None,
                     first_result: Optional[str] = None,
                     ids: Optional[Sequence[str]] = None,
                     order_by: Optional[str] = None,
                     partial_name: Optional[str] = None,
                     search: Optional[str] = None,
                     skip: Optional[int] = None,
                     take: Optional[int] = None,
                     tenant: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificatesResult:
    """
    Provides information about existing certificates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_octopusdeploy as octopusdeploy

    example = octopusdeploy.get_certificates(archived="false",
        ids=[
            "Certificates-123",
            "Certificates-321",
        ],
        partial_name="Defau",
        skip=5,
        take=100)
    ```


    :param str archived: A filter to search for resources that have been archived.
    :param Sequence[pulumi.InputType['GetCertificatesCertificateArgs']] certificates: A list of certificates that match the filter(s).
    :param str first_result: A filter to define the first result.
    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str order_by: A filter used to order the search results.
    :param str partial_name: A filter to search by the partial match of a name.
    :param str search: A filter of terms used the search operation.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    :param str tenant: A filter to search by a tenant ID.
    """
    __args__ = dict()
    __args__['archived'] = archived
    __args__['certificates'] = certificates
    __args__['firstResult'] = first_result
    __args__['ids'] = ids
    __args__['orderBy'] = order_by
    __args__['partialName'] = partial_name
    __args__['search'] = search
    __args__['skip'] = skip
    __args__['take'] = take
    __args__['tenant'] = tenant
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getCertificates:getCertificates', __args__, opts=opts, typ=GetCertificatesResult).value

    return AwaitableGetCertificatesResult(
        archived=__ret__.archived,
        certificates=__ret__.certificates,
        first_result=__ret__.first_result,
        id=__ret__.id,
        ids=__ret__.ids,
        order_by=__ret__.order_by,
        partial_name=__ret__.partial_name,
        search=__ret__.search,
        skip=__ret__.skip,
        take=__ret__.take,
        tenant=__ret__.tenant)


@_utilities.lift_output_func(get_certificates)
def get_certificates_output(archived: Optional[pulumi.Input[Optional[str]]] = None,
                            certificates: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetCertificatesCertificateArgs']]]]] = None,
                            first_result: Optional[pulumi.Input[Optional[str]]] = None,
                            ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            order_by: Optional[pulumi.Input[Optional[str]]] = None,
                            partial_name: Optional[pulumi.Input[Optional[str]]] = None,
                            search: Optional[pulumi.Input[Optional[str]]] = None,
                            skip: Optional[pulumi.Input[Optional[int]]] = None,
                            take: Optional[pulumi.Input[Optional[int]]] = None,
                            tenant: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCertificatesResult]:
    """
    Provides information about existing certificates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_octopusdeploy as octopusdeploy

    example = octopusdeploy.get_certificates(archived="false",
        ids=[
            "Certificates-123",
            "Certificates-321",
        ],
        partial_name="Defau",
        skip=5,
        take=100)
    ```


    :param str archived: A filter to search for resources that have been archived.
    :param Sequence[pulumi.InputType['GetCertificatesCertificateArgs']] certificates: A list of certificates that match the filter(s).
    :param str first_result: A filter to define the first result.
    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str order_by: A filter used to order the search results.
    :param str partial_name: A filter to search by the partial match of a name.
    :param str search: A filter of terms used the search operation.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    :param str tenant: A filter to search by a tenant ID.
    """
    ...
