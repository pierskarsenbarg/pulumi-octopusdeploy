# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AzureCloudServiceDeploymentTargetArgs', 'AzureCloudServiceDeploymentTarget']

@pulumi.input_type
class AzureCloudServiceDeploymentTargetArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 cloud_service_name: pulumi.Input[str],
                 environments: pulumi.Input[Sequence[pulumi.Input[str]]],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 storage_account_name: pulumi.Input[str],
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointArgs']]]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 machine_policy_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operating_system: Optional[pulumi.Input[str]] = None,
                 shell_name: Optional[pulumi.Input[str]] = None,
                 shell_version: Optional[pulumi.Input[str]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_summary: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a AzureCloudServiceDeploymentTarget resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[str] health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[str] status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param pulumi.Input[str] status_summary: A summary elaborating on the status of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if machine_policy_id is not None:
            pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if shell_name is not None:
            pulumi.set(__self__, "shell_name", shell_name)
        if shell_version is not None:
            pulumi.set(__self__, "shell_version", shell_version)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_summary is not None:
            pulumi.set(__self__, "status_summary", status_summary)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if tenanted_deployment_participation is not None:
            pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter
    def environments(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointArgs']]]]:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointArgs']]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> Optional[pulumi.Input[str]]:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)


@pulumi.input_type
class _AzureCloudServiceDeploymentTargetState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 has_latest_calamari: Optional[pulumi.Input[bool]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_in_process: Optional[pulumi.Input[bool]] = None,
                 machine_policy_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operating_system: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shell_name: Optional[pulumi.Input[str]] = None,
                 shell_version: Optional[pulumi.Input[str]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_summary: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering AzureCloudServiceDeploymentTarget resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[str] health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[str] status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param pulumi.Input[str] status_summary: A summary elaborating on the status of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if has_latest_calamari is not None:
            pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_in_process is not None:
            pulumi.set(__self__, "is_in_process", is_in_process)
        if machine_policy_id is not None:
            pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if shell_name is not None:
            pulumi.set(__self__, "shell_name", shell_name)
        if shell_version is not None:
            pulumi.set(__self__, "shell_version", shell_version)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_summary is not None:
            pulumi.set(__self__, "status_summary", status_summary)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if tenanted_deployment_participation is not None:
            pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointArgs']]]]:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointArgs']]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[str]]:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> Optional[pulumi.Input[str]]:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)


class AzureCloudServiceDeploymentTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AzureCloudServiceDeploymentTargetEndpointArgs']]]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 machine_policy_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operating_system: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shell_name: Optional[pulumi.Input[str]] = None,
                 shell_version: Optional[pulumi.Input[str]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_summary: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        This resource manages Azure cloud service deployment targets in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as octopusdeploy

        example = octopusdeploy.AzureCloudServiceDeploymentTarget("example",
            account_id="Accounts-123",
            cloud_service_name="[cloud_service_name]",
            environments=[
                "Environments-123",
                "Environment-321",
            ],
            roles=[
                "Development Team",
                "System Administrators",
            ],
            storage_account_name="[storage_account_name]",
            tenanted_deployment_participation="Untenanted")
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/azureCloudServiceDeploymentTarget:AzureCloudServiceDeploymentTarget [options] octopusdeploy_azure_cloud_service_deployment_target.<name> <machine-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[str] health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[str] status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param pulumi.Input[str] status_summary: A summary elaborating on the status of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AzureCloudServiceDeploymentTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages Azure cloud service deployment targets in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as octopusdeploy

        example = octopusdeploy.AzureCloudServiceDeploymentTarget("example",
            account_id="Accounts-123",
            cloud_service_name="[cloud_service_name]",
            environments=[
                "Environments-123",
                "Environment-321",
            ],
            roles=[
                "Development Team",
                "System Administrators",
            ],
            storage_account_name="[storage_account_name]",
            tenanted_deployment_participation="Untenanted")
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/azureCloudServiceDeploymentTarget:AzureCloudServiceDeploymentTarget [options] octopusdeploy_azure_cloud_service_deployment_target.<name> <machine-id>
        ```

        :param str resource_name: The name of the resource.
        :param AzureCloudServiceDeploymentTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AzureCloudServiceDeploymentTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AzureCloudServiceDeploymentTargetEndpointArgs']]]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_status: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 machine_policy_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operating_system: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shell_name: Optional[pulumi.Input[str]] = None,
                 shell_version: Optional[pulumi.Input[str]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_summary: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AzureCloudServiceDeploymentTargetArgs.__new__(AzureCloudServiceDeploymentTargetArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            if cloud_service_name is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_service_name'")
            __props__.__dict__["cloud_service_name"] = cloud_service_name
            __props__.__dict__["default_worker_pool_id"] = default_worker_pool_id
            __props__.__dict__["endpoints"] = endpoints
            if environments is None and not opts.urn:
                raise TypeError("Missing required property 'environments'")
            __props__.__dict__["environments"] = environments
            __props__.__dict__["health_status"] = health_status
            __props__.__dict__["is_disabled"] = is_disabled
            __props__.__dict__["machine_policy_id"] = machine_policy_id
            __props__.__dict__["name"] = name
            __props__.__dict__["operating_system"] = operating_system
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
            __props__.__dict__["shell_name"] = shell_name
            __props__.__dict__["shell_version"] = shell_version
            __props__.__dict__["slot"] = slot
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["status"] = status
            __props__.__dict__["status_summary"] = status_summary
            if storage_account_name is None and not opts.urn:
                raise TypeError("Missing required property 'storage_account_name'")
            __props__.__dict__["storage_account_name"] = storage_account_name
            __props__.__dict__["swap_if_possible"] = swap_if_possible
            __props__.__dict__["tenant_tags"] = tenant_tags
            __props__.__dict__["tenanted_deployment_participation"] = tenanted_deployment_participation
            __props__.__dict__["tenants"] = tenants
            __props__.__dict__["thumbprint"] = thumbprint
            __props__.__dict__["uri"] = uri
            __props__.__dict__["use_current_instance_count"] = use_current_instance_count
            __props__.__dict__["has_latest_calamari"] = None
            __props__.__dict__["is_in_process"] = None
        super(AzureCloudServiceDeploymentTarget, __self__).__init__(
            'octopusdeploy:index/azureCloudServiceDeploymentTarget:AzureCloudServiceDeploymentTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            cloud_service_name: Optional[pulumi.Input[str]] = None,
            default_worker_pool_id: Optional[pulumi.Input[str]] = None,
            endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AzureCloudServiceDeploymentTargetEndpointArgs']]]]] = None,
            environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            has_latest_calamari: Optional[pulumi.Input[bool]] = None,
            health_status: Optional[pulumi.Input[str]] = None,
            is_disabled: Optional[pulumi.Input[bool]] = None,
            is_in_process: Optional[pulumi.Input[bool]] = None,
            machine_policy_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operating_system: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            shell_name: Optional[pulumi.Input[str]] = None,
            shell_version: Optional[pulumi.Input[str]] = None,
            slot: Optional[pulumi.Input[str]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            status_summary: Optional[pulumi.Input[str]] = None,
            storage_account_name: Optional[pulumi.Input[str]] = None,
            swap_if_possible: Optional[pulumi.Input[bool]] = None,
            tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
            tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            thumbprint: Optional[pulumi.Input[str]] = None,
            uri: Optional[pulumi.Input[str]] = None,
            use_current_instance_count: Optional[pulumi.Input[bool]] = None) -> 'AzureCloudServiceDeploymentTarget':
        """
        Get an existing AzureCloudServiceDeploymentTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[str] health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[str] status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param pulumi.Input[str] status_summary: A summary elaborating on the status of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AzureCloudServiceDeploymentTargetState.__new__(_AzureCloudServiceDeploymentTargetState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["cloud_service_name"] = cloud_service_name
        __props__.__dict__["default_worker_pool_id"] = default_worker_pool_id
        __props__.__dict__["endpoints"] = endpoints
        __props__.__dict__["environments"] = environments
        __props__.__dict__["has_latest_calamari"] = has_latest_calamari
        __props__.__dict__["health_status"] = health_status
        __props__.__dict__["is_disabled"] = is_disabled
        __props__.__dict__["is_in_process"] = is_in_process
        __props__.__dict__["machine_policy_id"] = machine_policy_id
        __props__.__dict__["name"] = name
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["roles"] = roles
        __props__.__dict__["shell_name"] = shell_name
        __props__.__dict__["shell_version"] = shell_version
        __props__.__dict__["slot"] = slot
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["status"] = status
        __props__.__dict__["status_summary"] = status_summary
        __props__.__dict__["storage_account_name"] = storage_account_name
        __props__.__dict__["swap_if_possible"] = swap_if_possible
        __props__.__dict__["tenant_tags"] = tenant_tags
        __props__.__dict__["tenanted_deployment_participation"] = tenanted_deployment_participation
        __props__.__dict__["tenants"] = tenants
        __props__.__dict__["thumbprint"] = thumbprint
        __props__.__dict__["uri"] = uri
        __props__.__dict__["use_current_instance_count"] = use_current_instance_count
        return AzureCloudServiceDeploymentTarget(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Output[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpoint']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> pulumi.Output[str]:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter
    def slot(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> pulumi.Output[str]:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> pulumi.Output[str]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "use_current_instance_count")

