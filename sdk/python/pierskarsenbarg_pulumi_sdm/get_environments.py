# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEnvironmentsResult',
    'AwaitableGetEnvironmentsResult',
    'get_environments',
    'get_environments_output',
]

@pulumi.output_type
class GetEnvironmentsResult:
    """
    A collection of values returned by getEnvironments.
    """
    def __init__(__self__, environments=None, id=None, ids=None, name=None, partial_name=None, skip=None, take=None):
        if environments and not isinstance(environments, list):
            raise TypeError("Expected argument 'environments' to be a list")
        pulumi.set(__self__, "environments", environments)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partial_name and not isinstance(partial_name, str):
            raise TypeError("Expected argument 'partial_name' to be a str")
        pulumi.set(__self__, "partial_name", partial_name)
        if skip and not isinstance(skip, int):
            raise TypeError("Expected argument 'skip' to be a int")
        pulumi.set(__self__, "skip", skip)
        if take and not isinstance(take, int):
            raise TypeError("Expected argument 'take' to be a int")
        pulumi.set(__self__, "take", take)

    @property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetEnvironmentsEnvironmentResult']:
        """
        A list of environments that match the filter(s).
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A filter to search by name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partialName")
    def partial_name(self) -> Optional[str]:
        """
        A filter to search by the partial match of a name.
        """
        return pulumi.get(self, "partial_name")

    @property
    @pulumi.getter
    def skip(self) -> Optional[int]:
        """
        A filter to specify the number of items to skip in the response.
        """
        return pulumi.get(self, "skip")

    @property
    @pulumi.getter
    def take(self) -> Optional[int]:
        """
        A filter to specify the number of items to take (or return) in the response.
        """
        return pulumi.get(self, "take")


class AwaitableGetEnvironmentsResult(GetEnvironmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvironmentsResult(
            environments=self.environments,
            id=self.id,
            ids=self.ids,
            name=self.name,
            partial_name=self.partial_name,
            skip=self.skip,
            take=self.take)


def get_environments(environments: Optional[Sequence[pulumi.InputType['GetEnvironmentsEnvironmentArgs']]] = None,
                     ids: Optional[Sequence[str]] = None,
                     name: Optional[str] = None,
                     partial_name: Optional[str] = None,
                     skip: Optional[int] = None,
                     take: Optional[int] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvironmentsResult:
    """
    Provides information about existing environments.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_octopusdeploy as octopusdeploy

    example = octopusdeploy.get_environments(ids=[
            "Environments-123",
            "Environments-321",
        ],
        name="Production",
        partial_name="Produc",
        skip=5,
        take=100)
    ```


    :param Sequence[pulumi.InputType['GetEnvironmentsEnvironmentArgs']] environments: A list of environments that match the filter(s).
    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str name: A filter to search by name.
    :param str partial_name: A filter to search by the partial match of a name.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    """
    __args__ = dict()
    __args__['environments'] = environments
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['partialName'] = partial_name
    __args__['skip'] = skip
    __args__['take'] = take
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getEnvironments:getEnvironments', __args__, opts=opts, typ=GetEnvironmentsResult).value

    return AwaitableGetEnvironmentsResult(
        environments=__ret__.environments,
        id=__ret__.id,
        ids=__ret__.ids,
        name=__ret__.name,
        partial_name=__ret__.partial_name,
        skip=__ret__.skip,
        take=__ret__.take)


@_utilities.lift_output_func(get_environments)
def get_environments_output(environments: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetEnvironmentsEnvironmentArgs']]]]] = None,
                            ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            name: Optional[pulumi.Input[Optional[str]]] = None,
                            partial_name: Optional[pulumi.Input[Optional[str]]] = None,
                            skip: Optional[pulumi.Input[Optional[int]]] = None,
                            take: Optional[pulumi.Input[Optional[int]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEnvironmentsResult]:
    """
    Provides information about existing environments.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_octopusdeploy as octopusdeploy

    example = octopusdeploy.get_environments(ids=[
            "Environments-123",
            "Environments-321",
        ],
        name="Production",
        partial_name="Produc",
        skip=5,
        take=100)
    ```


    :param Sequence[pulumi.InputType['GetEnvironmentsEnvironmentArgs']] environments: A list of environments that match the filter(s).
    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str name: A filter to search by name.
    :param str partial_name: A filter to search by the partial match of a name.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    """
    ...
