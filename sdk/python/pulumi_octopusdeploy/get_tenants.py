# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTenantsResult',
    'AwaitableGetTenantsResult',
    'get_tenants',
    'get_tenants_output',
]

@pulumi.output_type
class GetTenantsResult:
    """
    A collection of values returned by getTenants.
    """
    def __init__(__self__, cloned_from_tenant_id=None, id=None, ids=None, is_clone=None, name=None, partial_name=None, project_id=None, skip=None, tags=None, take=None, tenants=None):
        if cloned_from_tenant_id and not isinstance(cloned_from_tenant_id, str):
            raise TypeError("Expected argument 'cloned_from_tenant_id' to be a str")
        pulumi.set(__self__, "cloned_from_tenant_id", cloned_from_tenant_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if is_clone and not isinstance(is_clone, bool):
            raise TypeError("Expected argument 'is_clone' to be a bool")
        pulumi.set(__self__, "is_clone", is_clone)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partial_name and not isinstance(partial_name, str):
            raise TypeError("Expected argument 'partial_name' to be a str")
        pulumi.set(__self__, "partial_name", partial_name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if skip and not isinstance(skip, int):
            raise TypeError("Expected argument 'skip' to be a int")
        pulumi.set(__self__, "skip", skip)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if take and not isinstance(take, int):
            raise TypeError("Expected argument 'take' to be a int")
        pulumi.set(__self__, "take", take)
        if tenants and not isinstance(tenants, list):
            raise TypeError("Expected argument 'tenants' to be a list")
        pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter(name="clonedFromTenantId")
    def cloned_from_tenant_id(self) -> Optional[str]:
        """
        A filter to search for a cloned tenant by its ID.
        """
        return pulumi.get(self, "cloned_from_tenant_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="isClone")
    def is_clone(self) -> Optional[bool]:
        """
        A filter to search for cloned resources.
        """
        return pulumi.get(self, "is_clone")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A filter to search by name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partialName")
    def partial_name(self) -> Optional[str]:
        """
        A filter to search by the partial match of a name.
        """
        return pulumi.get(self, "partial_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        A filter to search by a project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def skip(self) -> Optional[int]:
        """
        A filter to specify the number of items to skip in the response.
        """
        return pulumi.get(self, "skip")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def take(self) -> Optional[int]:
        """
        A filter to specify the number of items to take (or return) in the response.
        """
        return pulumi.get(self, "take")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence['outputs.GetTenantsTenantResult']:
        """
        A list of tenants that match the filter(s).
        """
        return pulumi.get(self, "tenants")


class AwaitableGetTenantsResult(GetTenantsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantsResult(
            cloned_from_tenant_id=self.cloned_from_tenant_id,
            id=self.id,
            ids=self.ids,
            is_clone=self.is_clone,
            name=self.name,
            partial_name=self.partial_name,
            project_id=self.project_id,
            skip=self.skip,
            tags=self.tags,
            take=self.take,
            tenants=self.tenants)


def get_tenants(cloned_from_tenant_id: Optional[str] = None,
                ids: Optional[Sequence[str]] = None,
                is_clone: Optional[bool] = None,
                name: Optional[str] = None,
                partial_name: Optional[str] = None,
                project_id: Optional[str] = None,
                skip: Optional[int] = None,
                tags: Optional[Sequence[str]] = None,
                take: Optional[int] = None,
                tenants: Optional[Sequence[pulumi.InputType['GetTenantsTenantArgs']]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantsResult:
    """
    Provides information about existing tenants.


    :param str cloned_from_tenant_id: A filter to search for a cloned tenant by its ID.
    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param bool is_clone: A filter to search for cloned resources.
    :param str name: A filter to search by name.
    :param str partial_name: A filter to search by the partial match of a name.
    :param str project_id: A filter to search by a project ID.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param Sequence[str] tags: A filter to search by a list of tags.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    :param Sequence[pulumi.InputType['GetTenantsTenantArgs']] tenants: A list of tenants that match the filter(s).
    """
    __args__ = dict()
    __args__['clonedFromTenantId'] = cloned_from_tenant_id
    __args__['ids'] = ids
    __args__['isClone'] = is_clone
    __args__['name'] = name
    __args__['partialName'] = partial_name
    __args__['projectId'] = project_id
    __args__['skip'] = skip
    __args__['tags'] = tags
    __args__['take'] = take
    __args__['tenants'] = tenants
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getTenants:getTenants', __args__, opts=opts, typ=GetTenantsResult).value

    return AwaitableGetTenantsResult(
        cloned_from_tenant_id=__ret__.cloned_from_tenant_id,
        id=__ret__.id,
        ids=__ret__.ids,
        is_clone=__ret__.is_clone,
        name=__ret__.name,
        partial_name=__ret__.partial_name,
        project_id=__ret__.project_id,
        skip=__ret__.skip,
        tags=__ret__.tags,
        take=__ret__.take,
        tenants=__ret__.tenants)


@_utilities.lift_output_func(get_tenants)
def get_tenants_output(cloned_from_tenant_id: Optional[pulumi.Input[Optional[str]]] = None,
                       ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       is_clone: Optional[pulumi.Input[Optional[bool]]] = None,
                       name: Optional[pulumi.Input[Optional[str]]] = None,
                       partial_name: Optional[pulumi.Input[Optional[str]]] = None,
                       project_id: Optional[pulumi.Input[Optional[str]]] = None,
                       skip: Optional[pulumi.Input[Optional[int]]] = None,
                       tags: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       take: Optional[pulumi.Input[Optional[int]]] = None,
                       tenants: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTenantsTenantArgs']]]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTenantsResult]:
    """
    Provides information about existing tenants.


    :param str cloned_from_tenant_id: A filter to search for a cloned tenant by its ID.
    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param bool is_clone: A filter to search for cloned resources.
    :param str name: A filter to search by name.
    :param str partial_name: A filter to search by the partial match of a name.
    :param str project_id: A filter to search by a project ID.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param Sequence[str] tags: A filter to search by a list of tags.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    :param Sequence[pulumi.InputType['GetTenantsTenantArgs']] tenants: A list of tenants that match the filter(s).
    """
    ...
