# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['CertificateArgs', 'Certificate']

@pulumi.input_type
class CertificateArgs:
    def __init__(__self__, *,
                 certificate_data: pulumi.Input[str],
                 password: pulumi.Input[str],
                 archived: Optional[pulumi.Input[str]] = None,
                 certificate_data_format: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 has_private_key: Optional[pulumi.Input[bool]] = None,
                 is_expired: Optional[pulumi.Input[bool]] = None,
                 issuer_common_name: Optional[pulumi.Input[str]] = None,
                 issuer_distinguished_name: Optional[pulumi.Input[str]] = None,
                 issuer_organization: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 not_after: Optional[pulumi.Input[str]] = None,
                 not_before: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 replaced_by: Optional[pulumi.Input[str]] = None,
                 self_signed: Optional[pulumi.Input[bool]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 signature_algorithm_name: Optional[pulumi.Input[str]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_common_name: Optional[pulumi.Input[str]] = None,
                 subject_distinguished_name: Optional[pulumi.Input[str]] = None,
                 subject_organization: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Certificate resource.
        :param pulumi.Input[str] certificate_data: The encoded data of the certificate.
        :param pulumi.Input[str] password: The password associated with this resource.
        :param pulumi.Input[str] certificate_data_format: Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[bool] has_private_key: Indicates if the certificate has a private key.
        :param pulumi.Input[bool] is_expired: Indicates if the certificate has expired.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "certificate_data", certificate_data)
        pulumi.set(__self__, "password", password)
        if archived is not None:
            pulumi.set(__self__, "archived", archived)
        if certificate_data_format is not None:
            pulumi.set(__self__, "certificate_data_format", certificate_data_format)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if has_private_key is not None:
            pulumi.set(__self__, "has_private_key", has_private_key)
        if is_expired is not None:
            pulumi.set(__self__, "is_expired", is_expired)
        if issuer_common_name is not None:
            pulumi.set(__self__, "issuer_common_name", issuer_common_name)
        if issuer_distinguished_name is not None:
            pulumi.set(__self__, "issuer_distinguished_name", issuer_distinguished_name)
        if issuer_organization is not None:
            pulumi.set(__self__, "issuer_organization", issuer_organization)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if replaced_by is not None:
            pulumi.set(__self__, "replaced_by", replaced_by)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signature_algorithm_name is not None:
            pulumi.set(__self__, "signature_algorithm_name", signature_algorithm_name)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if subject_common_name is not None:
            pulumi.set(__self__, "subject_common_name", subject_common_name)
        if subject_distinguished_name is not None:
            pulumi.set(__self__, "subject_distinguished_name", subject_distinguished_name)
        if subject_organization is not None:
            pulumi.set(__self__, "subject_organization", subject_organization)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if tenanted_deployment_participation is not None:
            pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> pulumi.Input[str]:
        """
        The encoded data of the certificate.
        """
        return pulumi.get(self, "certificate_data")

    @certificate_data.setter
    def certificate_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_data", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def archived(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archived")

    @archived.setter
    def archived(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archived", value)

    @property
    @pulumi.getter(name="certificateDataFormat")
    def certificate_data_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        """
        return pulumi.get(self, "certificate_data_format")

    @certificate_data_format.setter
    def certificate_data_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_data_format", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasPrivateKey")
    def has_private_key(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the certificate has a private key.
        """
        return pulumi.get(self, "has_private_key")

    @has_private_key.setter
    def has_private_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_private_key", value)

    @property
    @pulumi.getter(name="isExpired")
    def is_expired(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the certificate has expired.
        """
        return pulumi.get(self, "is_expired")

    @is_expired.setter
    def is_expired(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_expired", value)

    @property
    @pulumi.getter(name="issuerCommonName")
    def issuer_common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_common_name")

    @issuer_common_name.setter
    def issuer_common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_common_name", value)

    @property
    @pulumi.getter(name="issuerDistinguishedName")
    def issuer_distinguished_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_distinguished_name")

    @issuer_distinguished_name.setter
    def issuer_distinguished_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_distinguished_name", value)

    @property
    @pulumi.getter(name="issuerOrganization")
    def issuer_organization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_organization")

    @issuer_organization.setter
    def issuer_organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_organization", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "not_after")

    @not_after.setter
    def not_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "not_after", value)

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "not_before")

    @not_before.setter
    def not_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "not_before", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="replacedBy")
    def replaced_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replaced_by")

    @replaced_by.setter
    def replaced_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replaced_by", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="signatureAlgorithmName")
    def signature_algorithm_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature_algorithm_name")

    @signature_algorithm_name.setter
    def signature_algorithm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_algorithm_name", value)

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subject_alternative_names", value)

    @property
    @pulumi.getter(name="subjectCommonName")
    def subject_common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_common_name")

    @subject_common_name.setter
    def subject_common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_common_name", value)

    @property
    @pulumi.getter(name="subjectDistinguishedName")
    def subject_distinguished_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_distinguished_name")

    @subject_distinguished_name.setter
    def subject_distinguished_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_distinguished_name", value)

    @property
    @pulumi.getter(name="subjectOrganization")
    def subject_organization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_organization")

    @subject_organization.setter
    def subject_organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_organization", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _CertificateState:
    def __init__(__self__, *,
                 archived: Optional[pulumi.Input[str]] = None,
                 certificate_data: Optional[pulumi.Input[str]] = None,
                 certificate_data_format: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 has_private_key: Optional[pulumi.Input[bool]] = None,
                 is_expired: Optional[pulumi.Input[bool]] = None,
                 issuer_common_name: Optional[pulumi.Input[str]] = None,
                 issuer_distinguished_name: Optional[pulumi.Input[str]] = None,
                 issuer_organization: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 not_after: Optional[pulumi.Input[str]] = None,
                 not_before: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 replaced_by: Optional[pulumi.Input[str]] = None,
                 self_signed: Optional[pulumi.Input[bool]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 signature_algorithm_name: Optional[pulumi.Input[str]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_common_name: Optional[pulumi.Input[str]] = None,
                 subject_distinguished_name: Optional[pulumi.Input[str]] = None,
                 subject_organization: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Certificate resources.
        :param pulumi.Input[str] certificate_data: The encoded data of the certificate.
        :param pulumi.Input[str] certificate_data_format: Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[bool] has_private_key: Indicates if the certificate has a private key.
        :param pulumi.Input[bool] is_expired: Indicates if the certificate has expired.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] password: The password associated with this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        if archived is not None:
            pulumi.set(__self__, "archived", archived)
        if certificate_data is not None:
            pulumi.set(__self__, "certificate_data", certificate_data)
        if certificate_data_format is not None:
            pulumi.set(__self__, "certificate_data_format", certificate_data_format)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if has_private_key is not None:
            pulumi.set(__self__, "has_private_key", has_private_key)
        if is_expired is not None:
            pulumi.set(__self__, "is_expired", is_expired)
        if issuer_common_name is not None:
            pulumi.set(__self__, "issuer_common_name", issuer_common_name)
        if issuer_distinguished_name is not None:
            pulumi.set(__self__, "issuer_distinguished_name", issuer_distinguished_name)
        if issuer_organization is not None:
            pulumi.set(__self__, "issuer_organization", issuer_organization)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if replaced_by is not None:
            pulumi.set(__self__, "replaced_by", replaced_by)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signature_algorithm_name is not None:
            pulumi.set(__self__, "signature_algorithm_name", signature_algorithm_name)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if subject_common_name is not None:
            pulumi.set(__self__, "subject_common_name", subject_common_name)
        if subject_distinguished_name is not None:
            pulumi.set(__self__, "subject_distinguished_name", subject_distinguished_name)
        if subject_organization is not None:
            pulumi.set(__self__, "subject_organization", subject_organization)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if tenanted_deployment_participation is not None:
            pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def archived(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archived")

    @archived.setter
    def archived(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archived", value)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> Optional[pulumi.Input[str]]:
        """
        The encoded data of the certificate.
        """
        return pulumi.get(self, "certificate_data")

    @certificate_data.setter
    def certificate_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_data", value)

    @property
    @pulumi.getter(name="certificateDataFormat")
    def certificate_data_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        """
        return pulumi.get(self, "certificate_data_format")

    @certificate_data_format.setter
    def certificate_data_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_data_format", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasPrivateKey")
    def has_private_key(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the certificate has a private key.
        """
        return pulumi.get(self, "has_private_key")

    @has_private_key.setter
    def has_private_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_private_key", value)

    @property
    @pulumi.getter(name="isExpired")
    def is_expired(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the certificate has expired.
        """
        return pulumi.get(self, "is_expired")

    @is_expired.setter
    def is_expired(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_expired", value)

    @property
    @pulumi.getter(name="issuerCommonName")
    def issuer_common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_common_name")

    @issuer_common_name.setter
    def issuer_common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_common_name", value)

    @property
    @pulumi.getter(name="issuerDistinguishedName")
    def issuer_distinguished_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_distinguished_name")

    @issuer_distinguished_name.setter
    def issuer_distinguished_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_distinguished_name", value)

    @property
    @pulumi.getter(name="issuerOrganization")
    def issuer_organization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_organization")

    @issuer_organization.setter
    def issuer_organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_organization", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "not_after")

    @not_after.setter
    def not_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "not_after", value)

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "not_before")

    @not_before.setter
    def not_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "not_before", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="replacedBy")
    def replaced_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replaced_by")

    @replaced_by.setter
    def replaced_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replaced_by", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="signatureAlgorithmName")
    def signature_algorithm_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature_algorithm_name")

    @signature_algorithm_name.setter
    def signature_algorithm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_algorithm_name", value)

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subject_alternative_names", value)

    @property
    @pulumi.getter(name="subjectCommonName")
    def subject_common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_common_name")

    @subject_common_name.setter
    def subject_common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_common_name", value)

    @property
    @pulumi.getter(name="subjectDistinguishedName")
    def subject_distinguished_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_distinguished_name")

    @subject_distinguished_name.setter
    def subject_distinguished_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_distinguished_name", value)

    @property
    @pulumi.getter(name="subjectOrganization")
    def subject_organization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_organization")

    @subject_organization.setter
    def subject_organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_organization", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class Certificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 archived: Optional[pulumi.Input[str]] = None,
                 certificate_data: Optional[pulumi.Input[str]] = None,
                 certificate_data_format: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 has_private_key: Optional[pulumi.Input[bool]] = None,
                 is_expired: Optional[pulumi.Input[bool]] = None,
                 issuer_common_name: Optional[pulumi.Input[str]] = None,
                 issuer_distinguished_name: Optional[pulumi.Input[str]] = None,
                 issuer_organization: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 not_after: Optional[pulumi.Input[str]] = None,
                 not_before: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 replaced_by: Optional[pulumi.Input[str]] = None,
                 self_signed: Optional[pulumi.Input[bool]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 signature_algorithm_name: Optional[pulumi.Input[str]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_common_name: Optional[pulumi.Input[str]] = None,
                 subject_distinguished_name: Optional[pulumi.Input[str]] = None,
                 subject_organization: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource manages certificates in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.Certificate("example",
            certificate_data="a-base-64-encoded-string-representing-the-certificate-data",
            password="###########")
        # required; get from secure environment/store
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/certificate:Certificate [options] octopusdeploy_certificate.<name> <certificate-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_data: The encoded data of the certificate.
        :param pulumi.Input[str] certificate_data_format: Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[bool] has_private_key: Indicates if the certificate has a private key.
        :param pulumi.Input[bool] is_expired: Indicates if the certificate has expired.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] password: The password associated with this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages certificates in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.Certificate("example",
            certificate_data="a-base-64-encoded-string-representing-the-certificate-data",
            password="###########")
        # required; get from secure environment/store
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/certificate:Certificate [options] octopusdeploy_certificate.<name> <certificate-id>
        ```

        :param str resource_name: The name of the resource.
        :param CertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 archived: Optional[pulumi.Input[str]] = None,
                 certificate_data: Optional[pulumi.Input[str]] = None,
                 certificate_data_format: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 has_private_key: Optional[pulumi.Input[bool]] = None,
                 is_expired: Optional[pulumi.Input[bool]] = None,
                 issuer_common_name: Optional[pulumi.Input[str]] = None,
                 issuer_distinguished_name: Optional[pulumi.Input[str]] = None,
                 issuer_organization: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 not_after: Optional[pulumi.Input[str]] = None,
                 not_before: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 replaced_by: Optional[pulumi.Input[str]] = None,
                 self_signed: Optional[pulumi.Input[bool]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 signature_algorithm_name: Optional[pulumi.Input[str]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_common_name: Optional[pulumi.Input[str]] = None,
                 subject_distinguished_name: Optional[pulumi.Input[str]] = None,
                 subject_organization: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateArgs.__new__(CertificateArgs)

            __props__.__dict__["archived"] = archived
            if certificate_data is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_data'")
            __props__.__dict__["certificate_data"] = None if certificate_data is None else pulumi.Output.secret(certificate_data)
            __props__.__dict__["certificate_data_format"] = certificate_data_format
            __props__.__dict__["environments"] = environments
            __props__.__dict__["has_private_key"] = has_private_key
            __props__.__dict__["is_expired"] = is_expired
            __props__.__dict__["issuer_common_name"] = issuer_common_name
            __props__.__dict__["issuer_distinguished_name"] = issuer_distinguished_name
            __props__.__dict__["issuer_organization"] = issuer_organization
            __props__.__dict__["name"] = name
            __props__.__dict__["not_after"] = not_after
            __props__.__dict__["not_before"] = not_before
            __props__.__dict__["notes"] = notes
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["replaced_by"] = replaced_by
            __props__.__dict__["self_signed"] = self_signed
            __props__.__dict__["serial_number"] = serial_number
            __props__.__dict__["signature_algorithm_name"] = signature_algorithm_name
            __props__.__dict__["subject_alternative_names"] = subject_alternative_names
            __props__.__dict__["subject_common_name"] = subject_common_name
            __props__.__dict__["subject_distinguished_name"] = subject_distinguished_name
            __props__.__dict__["subject_organization"] = subject_organization
            __props__.__dict__["tenant_tags"] = tenant_tags
            __props__.__dict__["tenanted_deployment_participation"] = tenanted_deployment_participation
            __props__.__dict__["tenants"] = tenants
            __props__.__dict__["thumbprint"] = thumbprint
            __props__.__dict__["version"] = version
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["certificateData", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Certificate, __self__).__init__(
            'octopusdeploy:index/certificate:Certificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            archived: Optional[pulumi.Input[str]] = None,
            certificate_data: Optional[pulumi.Input[str]] = None,
            certificate_data_format: Optional[pulumi.Input[str]] = None,
            environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            has_private_key: Optional[pulumi.Input[bool]] = None,
            is_expired: Optional[pulumi.Input[bool]] = None,
            issuer_common_name: Optional[pulumi.Input[str]] = None,
            issuer_distinguished_name: Optional[pulumi.Input[str]] = None,
            issuer_organization: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            not_after: Optional[pulumi.Input[str]] = None,
            not_before: Optional[pulumi.Input[str]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            replaced_by: Optional[pulumi.Input[str]] = None,
            self_signed: Optional[pulumi.Input[bool]] = None,
            serial_number: Optional[pulumi.Input[str]] = None,
            signature_algorithm_name: Optional[pulumi.Input[str]] = None,
            subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            subject_common_name: Optional[pulumi.Input[str]] = None,
            subject_distinguished_name: Optional[pulumi.Input[str]] = None,
            subject_organization: Optional[pulumi.Input[str]] = None,
            tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
            tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            thumbprint: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'Certificate':
        """
        Get an existing Certificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_data: The encoded data of the certificate.
        :param pulumi.Input[str] certificate_data_format: Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[bool] has_private_key: Indicates if the certificate has a private key.
        :param pulumi.Input[bool] is_expired: Indicates if the certificate has expired.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] password: The password associated with this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CertificateState.__new__(_CertificateState)

        __props__.__dict__["archived"] = archived
        __props__.__dict__["certificate_data"] = certificate_data
        __props__.__dict__["certificate_data_format"] = certificate_data_format
        __props__.__dict__["environments"] = environments
        __props__.__dict__["has_private_key"] = has_private_key
        __props__.__dict__["is_expired"] = is_expired
        __props__.__dict__["issuer_common_name"] = issuer_common_name
        __props__.__dict__["issuer_distinguished_name"] = issuer_distinguished_name
        __props__.__dict__["issuer_organization"] = issuer_organization
        __props__.__dict__["name"] = name
        __props__.__dict__["not_after"] = not_after
        __props__.__dict__["not_before"] = not_before
        __props__.__dict__["notes"] = notes
        __props__.__dict__["password"] = password
        __props__.__dict__["replaced_by"] = replaced_by
        __props__.__dict__["self_signed"] = self_signed
        __props__.__dict__["serial_number"] = serial_number
        __props__.__dict__["signature_algorithm_name"] = signature_algorithm_name
        __props__.__dict__["subject_alternative_names"] = subject_alternative_names
        __props__.__dict__["subject_common_name"] = subject_common_name
        __props__.__dict__["subject_distinguished_name"] = subject_distinguished_name
        __props__.__dict__["subject_organization"] = subject_organization
        __props__.__dict__["tenant_tags"] = tenant_tags
        __props__.__dict__["tenanted_deployment_participation"] = tenanted_deployment_participation
        __props__.__dict__["tenants"] = tenants
        __props__.__dict__["thumbprint"] = thumbprint
        __props__.__dict__["version"] = version
        return Certificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def archived(self) -> pulumi.Output[str]:
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> pulumi.Output[str]:
        """
        The encoded data of the certificate.
        """
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="certificateDataFormat")
    def certificate_data_format(self) -> pulumi.Output[str]:
        """
        Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        """
        return pulumi.get(self, "certificate_data_format")

    @property
    @pulumi.getter
    def environments(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasPrivateKey")
    def has_private_key(self) -> pulumi.Output[bool]:
        """
        Indicates if the certificate has a private key.
        """
        return pulumi.get(self, "has_private_key")

    @property
    @pulumi.getter(name="isExpired")
    def is_expired(self) -> pulumi.Output[bool]:
        """
        Indicates if the certificate has expired.
        """
        return pulumi.get(self, "is_expired")

    @property
    @pulumi.getter(name="issuerCommonName")
    def issuer_common_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "issuer_common_name")

    @property
    @pulumi.getter(name="issuerDistinguishedName")
    def issuer_distinguished_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "issuer_distinguished_name")

    @property
    @pulumi.getter(name="issuerOrganization")
    def issuer_organization(self) -> pulumi.Output[str]:
        return pulumi.get(self, "issuer_organization")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> pulumi.Output[str]:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> pulumi.Output[str]:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="replacedBy")
    def replaced_by(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replaced_by")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="signatureAlgorithmName")
    def signature_algorithm_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "signature_algorithm_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCommonName")
    def subject_common_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "subject_common_name")

    @property
    @pulumi.getter(name="subjectDistinguishedName")
    def subject_distinguished_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "subject_distinguished_name")

    @property
    @pulumi.getter(name="subjectOrganization")
    def subject_organization(self) -> pulumi.Output[str]:
        return pulumi.get(self, "subject_organization")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> pulumi.Output[str]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        return pulumi.get(self, "version")

