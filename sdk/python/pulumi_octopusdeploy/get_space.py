# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSpaceResult',
    'AwaitableGetSpaceResult',
    'get_space',
    'get_space_output',
]

@pulumi.output_type
class GetSpaceResult:
    """
    A collection of values returned by getSpace.
    """
    def __init__(__self__, description=None, id=None, is_default=None, is_task_queue_stopped=None, name=None, slug=None, space_managers_team_members=None, space_managers_teams=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if is_task_queue_stopped and not isinstance(is_task_queue_stopped, bool):
            raise TypeError("Expected argument 'is_task_queue_stopped' to be a bool")
        pulumi.set(__self__, "is_task_queue_stopped", is_task_queue_stopped)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if space_managers_team_members and not isinstance(space_managers_team_members, list):
            raise TypeError("Expected argument 'space_managers_team_members' to be a list")
        pulumi.set(__self__, "space_managers_team_members", space_managers_team_members)
        if space_managers_teams and not isinstance(space_managers_teams, list):
            raise TypeError("Expected argument 'space_managers_teams' to be a list")
        pulumi.set(__self__, "space_managers_teams", space_managers_teams)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this space.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Specifies if this space is the default space in Octopus.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isTaskQueueStopped")
    def is_task_queue_stopped(self) -> bool:
        """
        Specifies the status of the task queue for this space.
        """
        return pulumi.get(self, "is_task_queue_stopped")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The unique slug of this space.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="spaceManagersTeamMembers")
    def space_managers_team_members(self) -> Sequence[str]:
        """
        A list of user IDs designated to be managers of this space.
        """
        return pulumi.get(self, "space_managers_team_members")

    @property
    @pulumi.getter(name="spaceManagersTeams")
    def space_managers_teams(self) -> Sequence[str]:
        """
        A list of team IDs designated to be managers of this space.
        """
        return pulumi.get(self, "space_managers_teams")


class AwaitableGetSpaceResult(GetSpaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSpaceResult(
            description=self.description,
            id=self.id,
            is_default=self.is_default,
            is_task_queue_stopped=self.is_task_queue_stopped,
            name=self.name,
            slug=self.slug,
            space_managers_team_members=self.space_managers_team_members,
            space_managers_teams=self.space_managers_teams)


def get_space(name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSpaceResult:
    """
    Provides information about an existing space.


    :param str name: The name of this resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getSpace:getSpace', __args__, opts=opts, typ=GetSpaceResult).value

    return AwaitableGetSpaceResult(
        description=__ret__.description,
        id=__ret__.id,
        is_default=__ret__.is_default,
        is_task_queue_stopped=__ret__.is_task_queue_stopped,
        name=__ret__.name,
        slug=__ret__.slug,
        space_managers_team_members=__ret__.space_managers_team_members,
        space_managers_teams=__ret__.space_managers_teams)


@_utilities.lift_output_func(get_space)
def get_space_output(name: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSpaceResult]:
    """
    Provides information about an existing space.


    :param str name: The name of this resource.
    """
    ...
