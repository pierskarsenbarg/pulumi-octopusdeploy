# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTeamsResult',
    'AwaitableGetTeamsResult',
    'get_teams',
    'get_teams_output',
]

@pulumi.output_type
class GetTeamsResult:
    """
    A collection of values returned by getTeams.
    """
    def __init__(__self__, id=None, ids=None, include_system=None, partial_name=None, skip=None, spaces=None, take=None, teams=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if include_system and not isinstance(include_system, bool):
            raise TypeError("Expected argument 'include_system' to be a bool")
        pulumi.set(__self__, "include_system", include_system)
        if partial_name and not isinstance(partial_name, str):
            raise TypeError("Expected argument 'partial_name' to be a str")
        pulumi.set(__self__, "partial_name", partial_name)
        if skip and not isinstance(skip, int):
            raise TypeError("Expected argument 'skip' to be a int")
        pulumi.set(__self__, "skip", skip)
        if spaces and not isinstance(spaces, list):
            raise TypeError("Expected argument 'spaces' to be a list")
        pulumi.set(__self__, "spaces", spaces)
        if take and not isinstance(take, int):
            raise TypeError("Expected argument 'take' to be a int")
        pulumi.set(__self__, "take", take)
        if teams and not isinstance(teams, list):
            raise TypeError("Expected argument 'teams' to be a list")
        pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="includeSystem")
    def include_system(self) -> Optional[bool]:
        """
        A filter to include system teams.
        """
        return pulumi.get(self, "include_system")

    @property
    @pulumi.getter(name="partialName")
    def partial_name(self) -> Optional[str]:
        """
        A filter to search by the partial match of a name.
        """
        return pulumi.get(self, "partial_name")

    @property
    @pulumi.getter
    def skip(self) -> Optional[int]:
        """
        A filter to specify the number of items to skip in the response.
        """
        return pulumi.get(self, "skip")

    @property
    @pulumi.getter
    def spaces(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of space IDs.
        """
        return pulumi.get(self, "spaces")

    @property
    @pulumi.getter
    def take(self) -> Optional[int]:
        """
        A filter to specify the number of items to take (or return) in the response.
        """
        return pulumi.get(self, "take")

    @property
    @pulumi.getter
    def teams(self) -> Sequence['outputs.GetTeamsTeamResult']:
        """
        A list of teams that match the filter(s).
        """
        return pulumi.get(self, "teams")


class AwaitableGetTeamsResult(GetTeamsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamsResult(
            id=self.id,
            ids=self.ids,
            include_system=self.include_system,
            partial_name=self.partial_name,
            skip=self.skip,
            spaces=self.spaces,
            take=self.take,
            teams=self.teams)


def get_teams(ids: Optional[Sequence[str]] = None,
              include_system: Optional[bool] = None,
              partial_name: Optional[str] = None,
              skip: Optional[int] = None,
              spaces: Optional[Sequence[str]] = None,
              take: Optional[int] = None,
              teams: Optional[Sequence[pulumi.InputType['GetTeamsTeamArgs']]] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamsResult:
    """
    Provides information about existing users.


    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param bool include_system: A filter to include system teams.
    :param str partial_name: A filter to search by the partial match of a name.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param Sequence[str] spaces: A filter to search by a list of space IDs.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    :param Sequence[pulumi.InputType['GetTeamsTeamArgs']] teams: A list of teams that match the filter(s).
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['includeSystem'] = include_system
    __args__['partialName'] = partial_name
    __args__['skip'] = skip
    __args__['spaces'] = spaces
    __args__['take'] = take
    __args__['teams'] = teams
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getTeams:getTeams', __args__, opts=opts, typ=GetTeamsResult).value

    return AwaitableGetTeamsResult(
        id=__ret__.id,
        ids=__ret__.ids,
        include_system=__ret__.include_system,
        partial_name=__ret__.partial_name,
        skip=__ret__.skip,
        spaces=__ret__.spaces,
        take=__ret__.take,
        teams=__ret__.teams)


@_utilities.lift_output_func(get_teams)
def get_teams_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     include_system: Optional[pulumi.Input[Optional[bool]]] = None,
                     partial_name: Optional[pulumi.Input[Optional[str]]] = None,
                     skip: Optional[pulumi.Input[Optional[int]]] = None,
                     spaces: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     take: Optional[pulumi.Input[Optional[int]]] = None,
                     teams: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTeamsTeamArgs']]]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamsResult]:
    """
    Provides information about existing users.


    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param bool include_system: A filter to include system teams.
    :param str partial_name: A filter to search by the partial match of a name.
    :param int skip: A filter to specify the number of items to skip in the response.
    :param Sequence[str] spaces: A filter to search by a list of space IDs.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    :param Sequence[pulumi.InputType['GetTeamsTeamArgs']] teams: A list of teams that match the filter(s).
    """
    ...
