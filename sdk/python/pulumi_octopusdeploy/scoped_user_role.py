# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ScopedUserRoleArgs', 'ScopedUserRole']

@pulumi.input_type
class ScopedUserRoleArgs:
    def __init__(__self__, *,
                 space_id: pulumi.Input[str],
                 team_id: pulumi.Input[str],
                 user_role_id: pulumi.Input[str],
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ScopedUserRole resource.
        """
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "team_id", team_id)
        pulumi.set(__self__, "user_role_id", user_role_id)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if project_group_ids is not None:
            pulumi.set(__self__, "project_group_ids", project_group_ids)
        if project_ids is not None:
            pulumi.set(__self__, "project_ids", project_ids)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="userRoleId")
    def user_role_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_role_id")

    @user_role_id.setter
    def user_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_role_id", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="projectGroupIds")
    def project_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "project_group_ids")

    @project_group_ids.setter
    def project_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_group_ids", value)

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "project_ids")

    @project_ids.setter
    def project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_ids", value)

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_ids")

    @tenant_ids.setter
    def tenant_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_ids", value)


@pulumi.input_type
class _ScopedUserRoleState:
    def __init__(__self__, *,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_role_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ScopedUserRole resources.
        """
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if project_group_ids is not None:
            pulumi.set(__self__, "project_group_ids", project_group_ids)
        if project_ids is not None:
            pulumi.set(__self__, "project_ids", project_ids)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)
        if user_role_id is not None:
            pulumi.set(__self__, "user_role_id", user_role_id)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="projectGroupIds")
    def project_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "project_group_ids")

    @project_group_ids.setter
    def project_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_group_ids", value)

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "project_ids")

    @project_ids.setter
    def project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_ids", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_ids")

    @tenant_ids.setter
    def tenant_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_ids", value)

    @property
    @pulumi.getter(name="userRoleId")
    def user_role_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_role_id")

    @user_role_id.setter
    def user_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_role_id", value)


class ScopedUserRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_role_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages scoped user roles in Octopus Deploy.

        > **NOTE on Team User Roles and Scoped User Roles:** We currently
        provides both a standalone Scoped User Role resource
        and a Team resource with `user_roles` blocks defined in-line. At this time you
        cannot use a Team with in-line user_roles in conjunction with any Scoped User Role
        resources. Doing so will cause a conflict of user role settings and will overwrite
        user roles.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScopedUserRoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages scoped user roles in Octopus Deploy.

        > **NOTE on Team User Roles and Scoped User Roles:** We currently
        provides both a standalone Scoped User Role resource
        and a Team resource with `user_roles` blocks defined in-line. At this time you
        cannot use a Team with in-line user_roles in conjunction with any Scoped User Role
        resources. Doing so will cause a conflict of user role settings and will overwrite
        user roles.

        :param str resource_name: The name of the resource.
        :param ScopedUserRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScopedUserRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_role_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScopedUserRoleArgs.__new__(ScopedUserRoleArgs)

            __props__.__dict__["environment_ids"] = environment_ids
            __props__.__dict__["project_group_ids"] = project_group_ids
            __props__.__dict__["project_ids"] = project_ids
            if space_id is None and not opts.urn:
                raise TypeError("Missing required property 'space_id'")
            __props__.__dict__["space_id"] = space_id
            if team_id is None and not opts.urn:
                raise TypeError("Missing required property 'team_id'")
            __props__.__dict__["team_id"] = team_id
            __props__.__dict__["tenant_ids"] = tenant_ids
            if user_role_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_role_id'")
            __props__.__dict__["user_role_id"] = user_role_id
        super(ScopedUserRole, __self__).__init__(
            'octopusdeploy:index/scopedUserRole:ScopedUserRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            project_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            team_id: Optional[pulumi.Input[str]] = None,
            tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            user_role_id: Optional[pulumi.Input[str]] = None) -> 'ScopedUserRole':
        """
        Get an existing ScopedUserRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScopedUserRoleState.__new__(_ScopedUserRoleState)

        __props__.__dict__["environment_ids"] = environment_ids
        __props__.__dict__["project_group_ids"] = project_group_ids
        __props__.__dict__["project_ids"] = project_ids
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["team_id"] = team_id
        __props__.__dict__["tenant_ids"] = tenant_ids
        __props__.__dict__["user_role_id"] = user_role_id
        return ScopedUserRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter(name="projectGroupIds")
    def project_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "project_group_ids")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tenant_ids")

    @property
    @pulumi.getter(name="userRoleId")
    def user_role_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_role_id")

