# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetScriptModulesResult',
    'AwaitableGetScriptModulesResult',
    'get_script_modules',
    'get_script_modules_output',
]

@pulumi.output_type
class GetScriptModulesResult:
    """
    A collection of values returned by getScriptModules.
    """
    def __init__(__self__, id=None, ids=None, partial_name=None, script_modules=None, skip=None, take=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if partial_name and not isinstance(partial_name, str):
            raise TypeError("Expected argument 'partial_name' to be a str")
        pulumi.set(__self__, "partial_name", partial_name)
        if script_modules and not isinstance(script_modules, list):
            raise TypeError("Expected argument 'script_modules' to be a list")
        pulumi.set(__self__, "script_modules", script_modules)
        if skip and not isinstance(skip, int):
            raise TypeError("Expected argument 'skip' to be a int")
        pulumi.set(__self__, "skip", skip)
        if take and not isinstance(take, int):
            raise TypeError("Expected argument 'take' to be a int")
        pulumi.set(__self__, "take", take)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="partialName")
    def partial_name(self) -> Optional[str]:
        """
        A filter to search by the partial match of a name.
        """
        return pulumi.get(self, "partial_name")

    @property
    @pulumi.getter(name="scriptModules")
    def script_modules(self) -> Sequence['outputs.GetScriptModulesScriptModuleResult']:
        """
        A list of script modules that match the filter(s).
        """
        return pulumi.get(self, "script_modules")

    @property
    @pulumi.getter
    def skip(self) -> Optional[int]:
        """
        A filter to specify the number of items to skip in the response.
        """
        return pulumi.get(self, "skip")

    @property
    @pulumi.getter
    def take(self) -> Optional[int]:
        """
        A filter to specify the number of items to take (or return) in the response.
        """
        return pulumi.get(self, "take")


class AwaitableGetScriptModulesResult(GetScriptModulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScriptModulesResult(
            id=self.id,
            ids=self.ids,
            partial_name=self.partial_name,
            script_modules=self.script_modules,
            skip=self.skip,
            take=self.take)


def get_script_modules(ids: Optional[Sequence[str]] = None,
                       partial_name: Optional[str] = None,
                       script_modules: Optional[Sequence[pulumi.InputType['GetScriptModulesScriptModuleArgs']]] = None,
                       skip: Optional[int] = None,
                       take: Optional[int] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScriptModulesResult:
    """
    Provides information about existing script modules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_octopusdeploy as octopusdeploy

    example = octopusdeploy.get_script_modules(ids=[
            "LibraryVariableSets-123",
            "LibraryVariableSets-321",
        ],
        partial_name="Defau",
        skip=5,
        take=100)
    ```


    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str partial_name: A filter to search by the partial match of a name.
    :param Sequence[pulumi.InputType['GetScriptModulesScriptModuleArgs']] script_modules: A list of script modules that match the filter(s).
    :param int skip: A filter to specify the number of items to skip in the response.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['partialName'] = partial_name
    __args__['scriptModules'] = script_modules
    __args__['skip'] = skip
    __args__['take'] = take
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getScriptModules:getScriptModules', __args__, opts=opts, typ=GetScriptModulesResult).value

    return AwaitableGetScriptModulesResult(
        id=__ret__.id,
        ids=__ret__.ids,
        partial_name=__ret__.partial_name,
        script_modules=__ret__.script_modules,
        skip=__ret__.skip,
        take=__ret__.take)


@_utilities.lift_output_func(get_script_modules)
def get_script_modules_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                              partial_name: Optional[pulumi.Input[Optional[str]]] = None,
                              script_modules: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetScriptModulesScriptModuleArgs']]]]] = None,
                              skip: Optional[pulumi.Input[Optional[int]]] = None,
                              take: Optional[pulumi.Input[Optional[int]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetScriptModulesResult]:
    """
    Provides information about existing script modules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_octopusdeploy as octopusdeploy

    example = octopusdeploy.get_script_modules(ids=[
            "LibraryVariableSets-123",
            "LibraryVariableSets-321",
        ],
        partial_name="Defau",
        skip=5,
        take=100)
    ```


    :param Sequence[str] ids: A filter to search by a list of IDs.
    :param str partial_name: A filter to search by the partial match of a name.
    :param Sequence[pulumi.InputType['GetScriptModulesScriptModuleArgs']] script_modules: A list of script modules that match the filter(s).
    :param int skip: A filter to specify the number of items to skip in the response.
    :param int take: A filter to specify the number of items to take (or return) in the response.
    """
    ...
