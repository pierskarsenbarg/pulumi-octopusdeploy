# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 lifecycle_id: pulumi.Input[str],
                 project_group_id: pulumi.Input[str],
                 allow_deployments_to_no_targets: Optional[pulumi.Input[bool]] = None,
                 auto_create_release: Optional[pulumi.Input[bool]] = None,
                 auto_deploy_release_overrides: Optional[pulumi.Input[str]] = None,
                 cloned_from_project_id: Optional[pulumi.Input[str]] = None,
                 connectivity_policy: Optional[pulumi.Input['ProjectConnectivityPolicyArgs']] = None,
                 default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
                 default_to_skip_if_already_installed: Optional[pulumi.Input[bool]] = None,
                 deployment_changes_template: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discrete_channel_release: Optional[pulumi.Input[bool]] = None,
                 git_anonymous_persistence_settings: Optional[pulumi.Input['ProjectGitAnonymousPersistenceSettingsArgs']] = None,
                 git_library_persistence_settings: Optional[pulumi.Input['ProjectGitLibraryPersistenceSettingsArgs']] = None,
                 git_username_password_persistence_settings: Optional[pulumi.Input['ProjectGitUsernamePasswordPersistenceSettingsArgs']] = None,
                 included_library_variable_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_discrete_channel_release: Optional[pulumi.Input[bool]] = None,
                 is_version_controlled: Optional[pulumi.Input[bool]] = None,
                 jira_service_management_extension_settings: Optional[pulumi.Input['ProjectJiraServiceManagementExtensionSettingsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release_creation_strategy: Optional[pulumi.Input['ProjectReleaseCreationStrategyArgs']] = None,
                 release_notes_template: Optional[pulumi.Input[str]] = None,
                 servicenow_extension_settings: Optional[pulumi.Input['ProjectServicenowExtensionSettingsArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectTemplateArgs']]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 versioning_strategies: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectVersioningStrategyArgs']]]] = None):
        """
        The set of arguments for constructing a Project resource.
        :param pulumi.Input[str] lifecycle_id: The lifecycle ID associated with this project.
        :param pulumi.Input[str] project_group_id: The project group ID associated with this project.
        :param pulumi.Input[str] description: The description of this project.
        :param pulumi.Input[bool] discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param pulumi.Input['ProjectGitAnonymousPersistenceSettingsArgs'] git_anonymous_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input['ProjectGitLibraryPersistenceSettingsArgs'] git_library_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input['ProjectGitUsernamePasswordPersistenceSettingsArgs'] git_username_password_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input[bool] is_discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param pulumi.Input['ProjectJiraServiceManagementExtensionSettingsArgs'] jira_service_management_extension_settings: Provides extension settings for the Jira Service Management (JSM) integration for this project.
        :param pulumi.Input[str] name: The name of the project in Octopus Deploy. This name must be unique.
        :param pulumi.Input['ProjectServicenowExtensionSettingsArgs'] servicenow_extension_settings: Provides extension settings for the ServiceNow integration for this project.
        :param pulumi.Input[str] slug: A human-readable, unique identifier, used to identify a project.
        :param pulumi.Input[str] space_id: The space ID associated with this project.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        pulumi.set(__self__, "lifecycle_id", lifecycle_id)
        pulumi.set(__self__, "project_group_id", project_group_id)
        if allow_deployments_to_no_targets is not None:
            warnings.warn("""This value is only valid for an associated connectivity policy and should not be specified here.""", DeprecationWarning)
            pulumi.log.warn("""allow_deployments_to_no_targets is deprecated: This value is only valid for an associated connectivity policy and should not be specified here.""")
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if auto_create_release is not None:
            pulumi.set(__self__, "auto_create_release", auto_create_release)
        if auto_deploy_release_overrides is not None:
            pulumi.set(__self__, "auto_deploy_release_overrides", auto_deploy_release_overrides)
        if cloned_from_project_id is not None:
            pulumi.set(__self__, "cloned_from_project_id", cloned_from_project_id)
        if connectivity_policy is not None:
            pulumi.set(__self__, "connectivity_policy", connectivity_policy)
        if default_guided_failure_mode is not None:
            pulumi.set(__self__, "default_guided_failure_mode", default_guided_failure_mode)
        if default_to_skip_if_already_installed is not None:
            pulumi.set(__self__, "default_to_skip_if_already_installed", default_to_skip_if_already_installed)
        if deployment_changes_template is not None:
            pulumi.set(__self__, "deployment_changes_template", deployment_changes_template)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if discrete_channel_release is not None:
            pulumi.set(__self__, "discrete_channel_release", discrete_channel_release)
        if git_anonymous_persistence_settings is not None:
            pulumi.set(__self__, "git_anonymous_persistence_settings", git_anonymous_persistence_settings)
        if git_library_persistence_settings is not None:
            pulumi.set(__self__, "git_library_persistence_settings", git_library_persistence_settings)
        if git_username_password_persistence_settings is not None:
            pulumi.set(__self__, "git_username_password_persistence_settings", git_username_password_persistence_settings)
        if included_library_variable_sets is not None:
            pulumi.set(__self__, "included_library_variable_sets", included_library_variable_sets)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_discrete_channel_release is not None:
            pulumi.set(__self__, "is_discrete_channel_release", is_discrete_channel_release)
        if is_version_controlled is not None:
            pulumi.set(__self__, "is_version_controlled", is_version_controlled)
        if jira_service_management_extension_settings is not None:
            pulumi.set(__self__, "jira_service_management_extension_settings", jira_service_management_extension_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release_creation_strategy is not None:
            pulumi.set(__self__, "release_creation_strategy", release_creation_strategy)
        if release_notes_template is not None:
            pulumi.set(__self__, "release_notes_template", release_notes_template)
        if servicenow_extension_settings is not None:
            pulumi.set(__self__, "servicenow_extension_settings", servicenow_extension_settings)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)
        if tenanted_deployment_participation is not None:
            pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        if versioning_strategies is not None:
            pulumi.set(__self__, "versioning_strategies", versioning_strategies)

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> pulumi.Input[str]:
        """
        The lifecycle ID associated with this project.
        """
        return pulumi.get(self, "lifecycle_id")

    @lifecycle_id.setter
    def lifecycle_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "lifecycle_id", value)

    @property
    @pulumi.getter(name="projectGroupId")
    def project_group_id(self) -> pulumi.Input[str]:
        """
        The project group ID associated with this project.
        """
        return pulumi.get(self, "project_group_id")

    @project_group_id.setter
    def project_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_group_id", value)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @allow_deployments_to_no_targets.setter
    def allow_deployments_to_no_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deployments_to_no_targets", value)

    @property
    @pulumi.getter(name="autoCreateRelease")
    def auto_create_release(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_create_release")

    @auto_create_release.setter
    def auto_create_release(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_release", value)

    @property
    @pulumi.getter(name="autoDeployReleaseOverrides")
    def auto_deploy_release_overrides(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_deploy_release_overrides")

    @auto_deploy_release_overrides.setter
    def auto_deploy_release_overrides(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_deploy_release_overrides", value)

    @property
    @pulumi.getter(name="clonedFromProjectId")
    def cloned_from_project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloned_from_project_id")

    @cloned_from_project_id.setter
    def cloned_from_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloned_from_project_id", value)

    @property
    @pulumi.getter(name="connectivityPolicy")
    def connectivity_policy(self) -> Optional[pulumi.Input['ProjectConnectivityPolicyArgs']]:
        return pulumi.get(self, "connectivity_policy")

    @connectivity_policy.setter
    def connectivity_policy(self, value: Optional[pulumi.Input['ProjectConnectivityPolicyArgs']]):
        pulumi.set(self, "connectivity_policy", value)

    @property
    @pulumi.getter(name="defaultGuidedFailureMode")
    def default_guided_failure_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_guided_failure_mode")

    @default_guided_failure_mode.setter
    def default_guided_failure_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_guided_failure_mode", value)

    @property
    @pulumi.getter(name="defaultToSkipIfAlreadyInstalled")
    def default_to_skip_if_already_installed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default_to_skip_if_already_installed")

    @default_to_skip_if_already_installed.setter
    def default_to_skip_if_already_installed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_to_skip_if_already_installed", value)

    @property
    @pulumi.getter(name="deploymentChangesTemplate")
    def deployment_changes_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_changes_template")

    @deployment_changes_template.setter
    def deployment_changes_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_changes_template", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this project.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discreteChannelRelease")
    def discrete_channel_release(self) -> Optional[pulumi.Input[bool]]:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "discrete_channel_release")

    @discrete_channel_release.setter
    def discrete_channel_release(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "discrete_channel_release", value)

    @property
    @pulumi.getter(name="gitAnonymousPersistenceSettings")
    def git_anonymous_persistence_settings(self) -> Optional[pulumi.Input['ProjectGitAnonymousPersistenceSettingsArgs']]:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_anonymous_persistence_settings")

    @git_anonymous_persistence_settings.setter
    def git_anonymous_persistence_settings(self, value: Optional[pulumi.Input['ProjectGitAnonymousPersistenceSettingsArgs']]):
        pulumi.set(self, "git_anonymous_persistence_settings", value)

    @property
    @pulumi.getter(name="gitLibraryPersistenceSettings")
    def git_library_persistence_settings(self) -> Optional[pulumi.Input['ProjectGitLibraryPersistenceSettingsArgs']]:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_library_persistence_settings")

    @git_library_persistence_settings.setter
    def git_library_persistence_settings(self, value: Optional[pulumi.Input['ProjectGitLibraryPersistenceSettingsArgs']]):
        pulumi.set(self, "git_library_persistence_settings", value)

    @property
    @pulumi.getter(name="gitUsernamePasswordPersistenceSettings")
    def git_username_password_persistence_settings(self) -> Optional[pulumi.Input['ProjectGitUsernamePasswordPersistenceSettingsArgs']]:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_username_password_persistence_settings")

    @git_username_password_persistence_settings.setter
    def git_username_password_persistence_settings(self, value: Optional[pulumi.Input['ProjectGitUsernamePasswordPersistenceSettingsArgs']]):
        pulumi.set(self, "git_username_password_persistence_settings", value)

    @property
    @pulumi.getter(name="includedLibraryVariableSets")
    def included_library_variable_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_library_variable_sets")

    @included_library_variable_sets.setter
    def included_library_variable_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_library_variable_sets", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isDiscreteChannelRelease")
    def is_discrete_channel_release(self) -> Optional[pulumi.Input[bool]]:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "is_discrete_channel_release")

    @is_discrete_channel_release.setter
    def is_discrete_channel_release(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_discrete_channel_release", value)

    @property
    @pulumi.getter(name="isVersionControlled")
    def is_version_controlled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_version_controlled")

    @is_version_controlled.setter
    def is_version_controlled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_version_controlled", value)

    @property
    @pulumi.getter(name="jiraServiceManagementExtensionSettings")
    def jira_service_management_extension_settings(self) -> Optional[pulumi.Input['ProjectJiraServiceManagementExtensionSettingsArgs']]:
        """
        Provides extension settings for the Jira Service Management (JSM) integration for this project.
        """
        return pulumi.get(self, "jira_service_management_extension_settings")

    @jira_service_management_extension_settings.setter
    def jira_service_management_extension_settings(self, value: Optional[pulumi.Input['ProjectJiraServiceManagementExtensionSettingsArgs']]):
        pulumi.set(self, "jira_service_management_extension_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project in Octopus Deploy. This name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="releaseCreationStrategy")
    def release_creation_strategy(self) -> Optional[pulumi.Input['ProjectReleaseCreationStrategyArgs']]:
        return pulumi.get(self, "release_creation_strategy")

    @release_creation_strategy.setter
    def release_creation_strategy(self, value: Optional[pulumi.Input['ProjectReleaseCreationStrategyArgs']]):
        pulumi.set(self, "release_creation_strategy", value)

    @property
    @pulumi.getter(name="releaseNotesTemplate")
    def release_notes_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release_notes_template")

    @release_notes_template.setter
    def release_notes_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_notes_template", value)

    @property
    @pulumi.getter(name="servicenowExtensionSettings")
    def servicenow_extension_settings(self) -> Optional[pulumi.Input['ProjectServicenowExtensionSettingsArgs']]:
        """
        Provides extension settings for the ServiceNow integration for this project.
        """
        return pulumi.get(self, "servicenow_extension_settings")

    @servicenow_extension_settings.setter
    def servicenow_extension_settings(self, value: Optional[pulumi.Input['ProjectServicenowExtensionSettingsArgs']]):
        pulumi.set(self, "servicenow_extension_settings", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable, unique identifier, used to identify a project.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this project.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectTemplateArgs']]]]:
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectTemplateArgs']]]]):
        pulumi.set(self, "templates", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter(name="versioningStrategies")
    def versioning_strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectVersioningStrategyArgs']]]]:
        return pulumi.get(self, "versioning_strategies")

    @versioning_strategies.setter
    def versioning_strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectVersioningStrategyArgs']]]]):
        pulumi.set(self, "versioning_strategies", value)


@pulumi.input_type
class _ProjectState:
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: Optional[pulumi.Input[bool]] = None,
                 auto_create_release: Optional[pulumi.Input[bool]] = None,
                 auto_deploy_release_overrides: Optional[pulumi.Input[str]] = None,
                 cloned_from_project_id: Optional[pulumi.Input[str]] = None,
                 connectivity_policy: Optional[pulumi.Input['ProjectConnectivityPolicyArgs']] = None,
                 default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
                 default_to_skip_if_already_installed: Optional[pulumi.Input[bool]] = None,
                 deployment_changes_template: Optional[pulumi.Input[str]] = None,
                 deployment_process_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discrete_channel_release: Optional[pulumi.Input[bool]] = None,
                 git_anonymous_persistence_settings: Optional[pulumi.Input['ProjectGitAnonymousPersistenceSettingsArgs']] = None,
                 git_library_persistence_settings: Optional[pulumi.Input['ProjectGitLibraryPersistenceSettingsArgs']] = None,
                 git_username_password_persistence_settings: Optional[pulumi.Input['ProjectGitUsernamePasswordPersistenceSettingsArgs']] = None,
                 included_library_variable_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_discrete_channel_release: Optional[pulumi.Input[bool]] = None,
                 is_version_controlled: Optional[pulumi.Input[bool]] = None,
                 jira_service_management_extension_settings: Optional[pulumi.Input['ProjectJiraServiceManagementExtensionSettingsArgs']] = None,
                 lifecycle_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_group_id: Optional[pulumi.Input[str]] = None,
                 release_creation_strategy: Optional[pulumi.Input['ProjectReleaseCreationStrategyArgs']] = None,
                 release_notes_template: Optional[pulumi.Input[str]] = None,
                 servicenow_extension_settings: Optional[pulumi.Input['ProjectServicenowExtensionSettingsArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectTemplateArgs']]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 variable_set_id: Optional[pulumi.Input[str]] = None,
                 versioning_strategies: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectVersioningStrategyArgs']]]] = None):
        """
        Input properties used for looking up and filtering Project resources.
        :param pulumi.Input[str] description: The description of this project.
        :param pulumi.Input[bool] discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param pulumi.Input['ProjectGitAnonymousPersistenceSettingsArgs'] git_anonymous_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input['ProjectGitLibraryPersistenceSettingsArgs'] git_library_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input['ProjectGitUsernamePasswordPersistenceSettingsArgs'] git_username_password_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input[bool] is_discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param pulumi.Input['ProjectJiraServiceManagementExtensionSettingsArgs'] jira_service_management_extension_settings: Provides extension settings for the Jira Service Management (JSM) integration for this project.
        :param pulumi.Input[str] lifecycle_id: The lifecycle ID associated with this project.
        :param pulumi.Input[str] name: The name of the project in Octopus Deploy. This name must be unique.
        :param pulumi.Input[str] project_group_id: The project group ID associated with this project.
        :param pulumi.Input['ProjectServicenowExtensionSettingsArgs'] servicenow_extension_settings: Provides extension settings for the ServiceNow integration for this project.
        :param pulumi.Input[str] slug: A human-readable, unique identifier, used to identify a project.
        :param pulumi.Input[str] space_id: The space ID associated with this project.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        if allow_deployments_to_no_targets is not None:
            warnings.warn("""This value is only valid for an associated connectivity policy and should not be specified here.""", DeprecationWarning)
            pulumi.log.warn("""allow_deployments_to_no_targets is deprecated: This value is only valid for an associated connectivity policy and should not be specified here.""")
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if auto_create_release is not None:
            pulumi.set(__self__, "auto_create_release", auto_create_release)
        if auto_deploy_release_overrides is not None:
            pulumi.set(__self__, "auto_deploy_release_overrides", auto_deploy_release_overrides)
        if cloned_from_project_id is not None:
            pulumi.set(__self__, "cloned_from_project_id", cloned_from_project_id)
        if connectivity_policy is not None:
            pulumi.set(__self__, "connectivity_policy", connectivity_policy)
        if default_guided_failure_mode is not None:
            pulumi.set(__self__, "default_guided_failure_mode", default_guided_failure_mode)
        if default_to_skip_if_already_installed is not None:
            pulumi.set(__self__, "default_to_skip_if_already_installed", default_to_skip_if_already_installed)
        if deployment_changes_template is not None:
            pulumi.set(__self__, "deployment_changes_template", deployment_changes_template)
        if deployment_process_id is not None:
            pulumi.set(__self__, "deployment_process_id", deployment_process_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if discrete_channel_release is not None:
            pulumi.set(__self__, "discrete_channel_release", discrete_channel_release)
        if git_anonymous_persistence_settings is not None:
            pulumi.set(__self__, "git_anonymous_persistence_settings", git_anonymous_persistence_settings)
        if git_library_persistence_settings is not None:
            pulumi.set(__self__, "git_library_persistence_settings", git_library_persistence_settings)
        if git_username_password_persistence_settings is not None:
            pulumi.set(__self__, "git_username_password_persistence_settings", git_username_password_persistence_settings)
        if included_library_variable_sets is not None:
            pulumi.set(__self__, "included_library_variable_sets", included_library_variable_sets)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_discrete_channel_release is not None:
            pulumi.set(__self__, "is_discrete_channel_release", is_discrete_channel_release)
        if is_version_controlled is not None:
            pulumi.set(__self__, "is_version_controlled", is_version_controlled)
        if jira_service_management_extension_settings is not None:
            pulumi.set(__self__, "jira_service_management_extension_settings", jira_service_management_extension_settings)
        if lifecycle_id is not None:
            pulumi.set(__self__, "lifecycle_id", lifecycle_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_group_id is not None:
            pulumi.set(__self__, "project_group_id", project_group_id)
        if release_creation_strategy is not None:
            pulumi.set(__self__, "release_creation_strategy", release_creation_strategy)
        if release_notes_template is not None:
            pulumi.set(__self__, "release_notes_template", release_notes_template)
        if servicenow_extension_settings is not None:
            pulumi.set(__self__, "servicenow_extension_settings", servicenow_extension_settings)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)
        if tenanted_deployment_participation is not None:
            pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        if variable_set_id is not None:
            pulumi.set(__self__, "variable_set_id", variable_set_id)
        if versioning_strategies is not None:
            pulumi.set(__self__, "versioning_strategies", versioning_strategies)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @allow_deployments_to_no_targets.setter
    def allow_deployments_to_no_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deployments_to_no_targets", value)

    @property
    @pulumi.getter(name="autoCreateRelease")
    def auto_create_release(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_create_release")

    @auto_create_release.setter
    def auto_create_release(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_release", value)

    @property
    @pulumi.getter(name="autoDeployReleaseOverrides")
    def auto_deploy_release_overrides(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_deploy_release_overrides")

    @auto_deploy_release_overrides.setter
    def auto_deploy_release_overrides(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_deploy_release_overrides", value)

    @property
    @pulumi.getter(name="clonedFromProjectId")
    def cloned_from_project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloned_from_project_id")

    @cloned_from_project_id.setter
    def cloned_from_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloned_from_project_id", value)

    @property
    @pulumi.getter(name="connectivityPolicy")
    def connectivity_policy(self) -> Optional[pulumi.Input['ProjectConnectivityPolicyArgs']]:
        return pulumi.get(self, "connectivity_policy")

    @connectivity_policy.setter
    def connectivity_policy(self, value: Optional[pulumi.Input['ProjectConnectivityPolicyArgs']]):
        pulumi.set(self, "connectivity_policy", value)

    @property
    @pulumi.getter(name="defaultGuidedFailureMode")
    def default_guided_failure_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_guided_failure_mode")

    @default_guided_failure_mode.setter
    def default_guided_failure_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_guided_failure_mode", value)

    @property
    @pulumi.getter(name="defaultToSkipIfAlreadyInstalled")
    def default_to_skip_if_already_installed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default_to_skip_if_already_installed")

    @default_to_skip_if_already_installed.setter
    def default_to_skip_if_already_installed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_to_skip_if_already_installed", value)

    @property
    @pulumi.getter(name="deploymentChangesTemplate")
    def deployment_changes_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_changes_template")

    @deployment_changes_template.setter
    def deployment_changes_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_changes_template", value)

    @property
    @pulumi.getter(name="deploymentProcessId")
    def deployment_process_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_process_id")

    @deployment_process_id.setter
    def deployment_process_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_process_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this project.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discreteChannelRelease")
    def discrete_channel_release(self) -> Optional[pulumi.Input[bool]]:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "discrete_channel_release")

    @discrete_channel_release.setter
    def discrete_channel_release(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "discrete_channel_release", value)

    @property
    @pulumi.getter(name="gitAnonymousPersistenceSettings")
    def git_anonymous_persistence_settings(self) -> Optional[pulumi.Input['ProjectGitAnonymousPersistenceSettingsArgs']]:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_anonymous_persistence_settings")

    @git_anonymous_persistence_settings.setter
    def git_anonymous_persistence_settings(self, value: Optional[pulumi.Input['ProjectGitAnonymousPersistenceSettingsArgs']]):
        pulumi.set(self, "git_anonymous_persistence_settings", value)

    @property
    @pulumi.getter(name="gitLibraryPersistenceSettings")
    def git_library_persistence_settings(self) -> Optional[pulumi.Input['ProjectGitLibraryPersistenceSettingsArgs']]:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_library_persistence_settings")

    @git_library_persistence_settings.setter
    def git_library_persistence_settings(self, value: Optional[pulumi.Input['ProjectGitLibraryPersistenceSettingsArgs']]):
        pulumi.set(self, "git_library_persistence_settings", value)

    @property
    @pulumi.getter(name="gitUsernamePasswordPersistenceSettings")
    def git_username_password_persistence_settings(self) -> Optional[pulumi.Input['ProjectGitUsernamePasswordPersistenceSettingsArgs']]:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_username_password_persistence_settings")

    @git_username_password_persistence_settings.setter
    def git_username_password_persistence_settings(self, value: Optional[pulumi.Input['ProjectGitUsernamePasswordPersistenceSettingsArgs']]):
        pulumi.set(self, "git_username_password_persistence_settings", value)

    @property
    @pulumi.getter(name="includedLibraryVariableSets")
    def included_library_variable_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_library_variable_sets")

    @included_library_variable_sets.setter
    def included_library_variable_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_library_variable_sets", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isDiscreteChannelRelease")
    def is_discrete_channel_release(self) -> Optional[pulumi.Input[bool]]:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "is_discrete_channel_release")

    @is_discrete_channel_release.setter
    def is_discrete_channel_release(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_discrete_channel_release", value)

    @property
    @pulumi.getter(name="isVersionControlled")
    def is_version_controlled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_version_controlled")

    @is_version_controlled.setter
    def is_version_controlled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_version_controlled", value)

    @property
    @pulumi.getter(name="jiraServiceManagementExtensionSettings")
    def jira_service_management_extension_settings(self) -> Optional[pulumi.Input['ProjectJiraServiceManagementExtensionSettingsArgs']]:
        """
        Provides extension settings for the Jira Service Management (JSM) integration for this project.
        """
        return pulumi.get(self, "jira_service_management_extension_settings")

    @jira_service_management_extension_settings.setter
    def jira_service_management_extension_settings(self, value: Optional[pulumi.Input['ProjectJiraServiceManagementExtensionSettingsArgs']]):
        pulumi.set(self, "jira_service_management_extension_settings", value)

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> Optional[pulumi.Input[str]]:
        """
        The lifecycle ID associated with this project.
        """
        return pulumi.get(self, "lifecycle_id")

    @lifecycle_id.setter
    def lifecycle_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project in Octopus Deploy. This name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectGroupId")
    def project_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project group ID associated with this project.
        """
        return pulumi.get(self, "project_group_id")

    @project_group_id.setter
    def project_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_group_id", value)

    @property
    @pulumi.getter(name="releaseCreationStrategy")
    def release_creation_strategy(self) -> Optional[pulumi.Input['ProjectReleaseCreationStrategyArgs']]:
        return pulumi.get(self, "release_creation_strategy")

    @release_creation_strategy.setter
    def release_creation_strategy(self, value: Optional[pulumi.Input['ProjectReleaseCreationStrategyArgs']]):
        pulumi.set(self, "release_creation_strategy", value)

    @property
    @pulumi.getter(name="releaseNotesTemplate")
    def release_notes_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release_notes_template")

    @release_notes_template.setter
    def release_notes_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_notes_template", value)

    @property
    @pulumi.getter(name="servicenowExtensionSettings")
    def servicenow_extension_settings(self) -> Optional[pulumi.Input['ProjectServicenowExtensionSettingsArgs']]:
        """
        Provides extension settings for the ServiceNow integration for this project.
        """
        return pulumi.get(self, "servicenow_extension_settings")

    @servicenow_extension_settings.setter
    def servicenow_extension_settings(self, value: Optional[pulumi.Input['ProjectServicenowExtensionSettingsArgs']]):
        pulumi.set(self, "servicenow_extension_settings", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable, unique identifier, used to identify a project.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this project.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectTemplateArgs']]]]:
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectTemplateArgs']]]]):
        pulumi.set(self, "templates", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable_set_id")

    @variable_set_id.setter
    def variable_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_set_id", value)

    @property
    @pulumi.getter(name="versioningStrategies")
    def versioning_strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectVersioningStrategyArgs']]]]:
        return pulumi.get(self, "versioning_strategies")

    @versioning_strategies.setter
    def versioning_strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectVersioningStrategyArgs']]]]):
        pulumi.set(self, "versioning_strategies", value)


class Project(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_deployments_to_no_targets: Optional[pulumi.Input[bool]] = None,
                 auto_create_release: Optional[pulumi.Input[bool]] = None,
                 auto_deploy_release_overrides: Optional[pulumi.Input[str]] = None,
                 cloned_from_project_id: Optional[pulumi.Input[str]] = None,
                 connectivity_policy: Optional[pulumi.Input[pulumi.InputType['ProjectConnectivityPolicyArgs']]] = None,
                 default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
                 default_to_skip_if_already_installed: Optional[pulumi.Input[bool]] = None,
                 deployment_changes_template: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discrete_channel_release: Optional[pulumi.Input[bool]] = None,
                 git_anonymous_persistence_settings: Optional[pulumi.Input[pulumi.InputType['ProjectGitAnonymousPersistenceSettingsArgs']]] = None,
                 git_library_persistence_settings: Optional[pulumi.Input[pulumi.InputType['ProjectGitLibraryPersistenceSettingsArgs']]] = None,
                 git_username_password_persistence_settings: Optional[pulumi.Input[pulumi.InputType['ProjectGitUsernamePasswordPersistenceSettingsArgs']]] = None,
                 included_library_variable_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_discrete_channel_release: Optional[pulumi.Input[bool]] = None,
                 is_version_controlled: Optional[pulumi.Input[bool]] = None,
                 jira_service_management_extension_settings: Optional[pulumi.Input[pulumi.InputType['ProjectJiraServiceManagementExtensionSettingsArgs']]] = None,
                 lifecycle_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_group_id: Optional[pulumi.Input[str]] = None,
                 release_creation_strategy: Optional[pulumi.Input[pulumi.InputType['ProjectReleaseCreationStrategyArgs']]] = None,
                 release_notes_template: Optional[pulumi.Input[str]] = None,
                 servicenow_extension_settings: Optional[pulumi.Input[pulumi.InputType['ProjectServicenowExtensionSettingsArgs']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectTemplateArgs']]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 versioning_strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectVersioningStrategyArgs']]]]] = None,
                 __props__=None):
        """
        This resource manages projects in Octopus Deploy.

        > Credentials are stored in state as plaintext. Read more about sensitive data in state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.Project("example",
            auto_create_release=False,
            default_guided_failure_mode="EnvironmentDefault",
            default_to_skip_if_already_installed=False,
            description="The development project.",
            discrete_channel_release=False,
            is_disabled=False,
            is_discrete_channel_release=False,
            is_version_controlled=False,
            lifecycle_id="Lifecycles-123",
            project_group_id="ProjectGroups-123",
            tenanted_deployment_participation="TenantedOrUntenanted",
            connectivity_policy=octopusdeploy.ProjectConnectivityPolicyArgs(
                allow_deployments_to_no_targets=False,
                exclude_unhealthy_targets=False,
                skip_machine_behavior="SkipUnavailableMachines",
            ),
            jira_service_management_extension_settings=octopusdeploy.ProjectJiraServiceManagementExtensionSettingsArgs(
                connection_id="133d7fe602514060a48bc42ee9870f99",
                is_enabled=False,
                service_desk_project_name="Test Service Desk Project (OK to Delete)",
            ),
            servicenow_extension_settings=octopusdeploy.ProjectServicenowExtensionSettingsArgs(
                connection_id="989034685e2c48c4b06a29286c9ef5cc",
                is_enabled=False,
                is_state_automatically_transitioned=False,
                standard_change_template_name="Standard Change Template Name (OK to Delete)",
            ),
            templates=[octopusdeploy.ProjectTemplateArgs(
                default_value="example-default-value",
                help_text="example-help-test",
                label="example-label",
                name="example-template-value",
                display_settings={
                    "Octopus.ControlType": "SingleLineText",
                },
            )])
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/project:Project [options] octopusdeploy_project.<name> <project-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this project.
        :param pulumi.Input[bool] discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param pulumi.Input[pulumi.InputType['ProjectGitAnonymousPersistenceSettingsArgs']] git_anonymous_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input[pulumi.InputType['ProjectGitLibraryPersistenceSettingsArgs']] git_library_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input[pulumi.InputType['ProjectGitUsernamePasswordPersistenceSettingsArgs']] git_username_password_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input[bool] is_discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param pulumi.Input[pulumi.InputType['ProjectJiraServiceManagementExtensionSettingsArgs']] jira_service_management_extension_settings: Provides extension settings for the Jira Service Management (JSM) integration for this project.
        :param pulumi.Input[str] lifecycle_id: The lifecycle ID associated with this project.
        :param pulumi.Input[str] name: The name of the project in Octopus Deploy. This name must be unique.
        :param pulumi.Input[str] project_group_id: The project group ID associated with this project.
        :param pulumi.Input[pulumi.InputType['ProjectServicenowExtensionSettingsArgs']] servicenow_extension_settings: Provides extension settings for the ServiceNow integration for this project.
        :param pulumi.Input[str] slug: A human-readable, unique identifier, used to identify a project.
        :param pulumi.Input[str] space_id: The space ID associated with this project.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages projects in Octopus Deploy.

        > Credentials are stored in state as plaintext. Read more about sensitive data in state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.Project("example",
            auto_create_release=False,
            default_guided_failure_mode="EnvironmentDefault",
            default_to_skip_if_already_installed=False,
            description="The development project.",
            discrete_channel_release=False,
            is_disabled=False,
            is_discrete_channel_release=False,
            is_version_controlled=False,
            lifecycle_id="Lifecycles-123",
            project_group_id="ProjectGroups-123",
            tenanted_deployment_participation="TenantedOrUntenanted",
            connectivity_policy=octopusdeploy.ProjectConnectivityPolicyArgs(
                allow_deployments_to_no_targets=False,
                exclude_unhealthy_targets=False,
                skip_machine_behavior="SkipUnavailableMachines",
            ),
            jira_service_management_extension_settings=octopusdeploy.ProjectJiraServiceManagementExtensionSettingsArgs(
                connection_id="133d7fe602514060a48bc42ee9870f99",
                is_enabled=False,
                service_desk_project_name="Test Service Desk Project (OK to Delete)",
            ),
            servicenow_extension_settings=octopusdeploy.ProjectServicenowExtensionSettingsArgs(
                connection_id="989034685e2c48c4b06a29286c9ef5cc",
                is_enabled=False,
                is_state_automatically_transitioned=False,
                standard_change_template_name="Standard Change Template Name (OK to Delete)",
            ),
            templates=[octopusdeploy.ProjectTemplateArgs(
                default_value="example-default-value",
                help_text="example-help-test",
                label="example-label",
                name="example-template-value",
                display_settings={
                    "Octopus.ControlType": "SingleLineText",
                },
            )])
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/project:Project [options] octopusdeploy_project.<name> <project-id>
        ```

        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_deployments_to_no_targets: Optional[pulumi.Input[bool]] = None,
                 auto_create_release: Optional[pulumi.Input[bool]] = None,
                 auto_deploy_release_overrides: Optional[pulumi.Input[str]] = None,
                 cloned_from_project_id: Optional[pulumi.Input[str]] = None,
                 connectivity_policy: Optional[pulumi.Input[pulumi.InputType['ProjectConnectivityPolicyArgs']]] = None,
                 default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
                 default_to_skip_if_already_installed: Optional[pulumi.Input[bool]] = None,
                 deployment_changes_template: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discrete_channel_release: Optional[pulumi.Input[bool]] = None,
                 git_anonymous_persistence_settings: Optional[pulumi.Input[pulumi.InputType['ProjectGitAnonymousPersistenceSettingsArgs']]] = None,
                 git_library_persistence_settings: Optional[pulumi.Input[pulumi.InputType['ProjectGitLibraryPersistenceSettingsArgs']]] = None,
                 git_username_password_persistence_settings: Optional[pulumi.Input[pulumi.InputType['ProjectGitUsernamePasswordPersistenceSettingsArgs']]] = None,
                 included_library_variable_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_discrete_channel_release: Optional[pulumi.Input[bool]] = None,
                 is_version_controlled: Optional[pulumi.Input[bool]] = None,
                 jira_service_management_extension_settings: Optional[pulumi.Input[pulumi.InputType['ProjectJiraServiceManagementExtensionSettingsArgs']]] = None,
                 lifecycle_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_group_id: Optional[pulumi.Input[str]] = None,
                 release_creation_strategy: Optional[pulumi.Input[pulumi.InputType['ProjectReleaseCreationStrategyArgs']]] = None,
                 release_notes_template: Optional[pulumi.Input[str]] = None,
                 servicenow_extension_settings: Optional[pulumi.Input[pulumi.InputType['ProjectServicenowExtensionSettingsArgs']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectTemplateArgs']]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 versioning_strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectVersioningStrategyArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            if allow_deployments_to_no_targets is not None and not opts.urn:
                warnings.warn("""This value is only valid for an associated connectivity policy and should not be specified here.""", DeprecationWarning)
                pulumi.log.warn("""allow_deployments_to_no_targets is deprecated: This value is only valid for an associated connectivity policy and should not be specified here.""")
            __props__.__dict__["allow_deployments_to_no_targets"] = allow_deployments_to_no_targets
            __props__.__dict__["auto_create_release"] = auto_create_release
            __props__.__dict__["auto_deploy_release_overrides"] = auto_deploy_release_overrides
            __props__.__dict__["cloned_from_project_id"] = cloned_from_project_id
            __props__.__dict__["connectivity_policy"] = connectivity_policy
            __props__.__dict__["default_guided_failure_mode"] = default_guided_failure_mode
            __props__.__dict__["default_to_skip_if_already_installed"] = default_to_skip_if_already_installed
            __props__.__dict__["deployment_changes_template"] = deployment_changes_template
            __props__.__dict__["description"] = description
            __props__.__dict__["discrete_channel_release"] = discrete_channel_release
            __props__.__dict__["git_anonymous_persistence_settings"] = git_anonymous_persistence_settings
            __props__.__dict__["git_library_persistence_settings"] = git_library_persistence_settings
            __props__.__dict__["git_username_password_persistence_settings"] = git_username_password_persistence_settings
            __props__.__dict__["included_library_variable_sets"] = included_library_variable_sets
            __props__.__dict__["is_disabled"] = is_disabled
            __props__.__dict__["is_discrete_channel_release"] = is_discrete_channel_release
            __props__.__dict__["is_version_controlled"] = is_version_controlled
            __props__.__dict__["jira_service_management_extension_settings"] = jira_service_management_extension_settings
            if lifecycle_id is None and not opts.urn:
                raise TypeError("Missing required property 'lifecycle_id'")
            __props__.__dict__["lifecycle_id"] = lifecycle_id
            __props__.__dict__["name"] = name
            if project_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_group_id'")
            __props__.__dict__["project_group_id"] = project_group_id
            __props__.__dict__["release_creation_strategy"] = release_creation_strategy
            __props__.__dict__["release_notes_template"] = release_notes_template
            __props__.__dict__["servicenow_extension_settings"] = servicenow_extension_settings
            __props__.__dict__["slug"] = slug
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["templates"] = templates
            __props__.__dict__["tenanted_deployment_participation"] = tenanted_deployment_participation
            __props__.__dict__["versioning_strategies"] = versioning_strategies
            __props__.__dict__["deployment_process_id"] = None
            __props__.__dict__["variable_set_id"] = None
        super(Project, __self__).__init__(
            'octopusdeploy:index/project:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_deployments_to_no_targets: Optional[pulumi.Input[bool]] = None,
            auto_create_release: Optional[pulumi.Input[bool]] = None,
            auto_deploy_release_overrides: Optional[pulumi.Input[str]] = None,
            cloned_from_project_id: Optional[pulumi.Input[str]] = None,
            connectivity_policy: Optional[pulumi.Input[pulumi.InputType['ProjectConnectivityPolicyArgs']]] = None,
            default_guided_failure_mode: Optional[pulumi.Input[str]] = None,
            default_to_skip_if_already_installed: Optional[pulumi.Input[bool]] = None,
            deployment_changes_template: Optional[pulumi.Input[str]] = None,
            deployment_process_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            discrete_channel_release: Optional[pulumi.Input[bool]] = None,
            git_anonymous_persistence_settings: Optional[pulumi.Input[pulumi.InputType['ProjectGitAnonymousPersistenceSettingsArgs']]] = None,
            git_library_persistence_settings: Optional[pulumi.Input[pulumi.InputType['ProjectGitLibraryPersistenceSettingsArgs']]] = None,
            git_username_password_persistence_settings: Optional[pulumi.Input[pulumi.InputType['ProjectGitUsernamePasswordPersistenceSettingsArgs']]] = None,
            included_library_variable_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_disabled: Optional[pulumi.Input[bool]] = None,
            is_discrete_channel_release: Optional[pulumi.Input[bool]] = None,
            is_version_controlled: Optional[pulumi.Input[bool]] = None,
            jira_service_management_extension_settings: Optional[pulumi.Input[pulumi.InputType['ProjectJiraServiceManagementExtensionSettingsArgs']]] = None,
            lifecycle_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_group_id: Optional[pulumi.Input[str]] = None,
            release_creation_strategy: Optional[pulumi.Input[pulumi.InputType['ProjectReleaseCreationStrategyArgs']]] = None,
            release_notes_template: Optional[pulumi.Input[str]] = None,
            servicenow_extension_settings: Optional[pulumi.Input[pulumi.InputType['ProjectServicenowExtensionSettingsArgs']]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            templates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectTemplateArgs']]]]] = None,
            tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
            variable_set_id: Optional[pulumi.Input[str]] = None,
            versioning_strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectVersioningStrategyArgs']]]]] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this project.
        :param pulumi.Input[bool] discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param pulumi.Input[pulumi.InputType['ProjectGitAnonymousPersistenceSettingsArgs']] git_anonymous_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input[pulumi.InputType['ProjectGitLibraryPersistenceSettingsArgs']] git_library_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input[pulumi.InputType['ProjectGitUsernamePasswordPersistenceSettingsArgs']] git_username_password_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param pulumi.Input[bool] is_discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param pulumi.Input[pulumi.InputType['ProjectJiraServiceManagementExtensionSettingsArgs']] jira_service_management_extension_settings: Provides extension settings for the Jira Service Management (JSM) integration for this project.
        :param pulumi.Input[str] lifecycle_id: The lifecycle ID associated with this project.
        :param pulumi.Input[str] name: The name of the project in Octopus Deploy. This name must be unique.
        :param pulumi.Input[str] project_group_id: The project group ID associated with this project.
        :param pulumi.Input[pulumi.InputType['ProjectServicenowExtensionSettingsArgs']] servicenow_extension_settings: Provides extension settings for the ServiceNow integration for this project.
        :param pulumi.Input[str] slug: A human-readable, unique identifier, used to identify a project.
        :param pulumi.Input[str] space_id: The space ID associated with this project.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectState.__new__(_ProjectState)

        __props__.__dict__["allow_deployments_to_no_targets"] = allow_deployments_to_no_targets
        __props__.__dict__["auto_create_release"] = auto_create_release
        __props__.__dict__["auto_deploy_release_overrides"] = auto_deploy_release_overrides
        __props__.__dict__["cloned_from_project_id"] = cloned_from_project_id
        __props__.__dict__["connectivity_policy"] = connectivity_policy
        __props__.__dict__["default_guided_failure_mode"] = default_guided_failure_mode
        __props__.__dict__["default_to_skip_if_already_installed"] = default_to_skip_if_already_installed
        __props__.__dict__["deployment_changes_template"] = deployment_changes_template
        __props__.__dict__["deployment_process_id"] = deployment_process_id
        __props__.__dict__["description"] = description
        __props__.__dict__["discrete_channel_release"] = discrete_channel_release
        __props__.__dict__["git_anonymous_persistence_settings"] = git_anonymous_persistence_settings
        __props__.__dict__["git_library_persistence_settings"] = git_library_persistence_settings
        __props__.__dict__["git_username_password_persistence_settings"] = git_username_password_persistence_settings
        __props__.__dict__["included_library_variable_sets"] = included_library_variable_sets
        __props__.__dict__["is_disabled"] = is_disabled
        __props__.__dict__["is_discrete_channel_release"] = is_discrete_channel_release
        __props__.__dict__["is_version_controlled"] = is_version_controlled
        __props__.__dict__["jira_service_management_extension_settings"] = jira_service_management_extension_settings
        __props__.__dict__["lifecycle_id"] = lifecycle_id
        __props__.__dict__["name"] = name
        __props__.__dict__["project_group_id"] = project_group_id
        __props__.__dict__["release_creation_strategy"] = release_creation_strategy
        __props__.__dict__["release_notes_template"] = release_notes_template
        __props__.__dict__["servicenow_extension_settings"] = servicenow_extension_settings
        __props__.__dict__["slug"] = slug
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["templates"] = templates
        __props__.__dict__["tenanted_deployment_participation"] = tenanted_deployment_participation
        __props__.__dict__["variable_set_id"] = variable_set_id
        __props__.__dict__["versioning_strategies"] = versioning_strategies
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @property
    @pulumi.getter(name="autoCreateRelease")
    def auto_create_release(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "auto_create_release")

    @property
    @pulumi.getter(name="autoDeployReleaseOverrides")
    def auto_deploy_release_overrides(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_deploy_release_overrides")

    @property
    @pulumi.getter(name="clonedFromProjectId")
    def cloned_from_project_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cloned_from_project_id")

    @property
    @pulumi.getter(name="connectivityPolicy")
    def connectivity_policy(self) -> pulumi.Output['outputs.ProjectConnectivityPolicy']:
        return pulumi.get(self, "connectivity_policy")

    @property
    @pulumi.getter(name="defaultGuidedFailureMode")
    def default_guided_failure_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_guided_failure_mode")

    @property
    @pulumi.getter(name="defaultToSkipIfAlreadyInstalled")
    def default_to_skip_if_already_installed(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "default_to_skip_if_already_installed")

    @property
    @pulumi.getter(name="deploymentChangesTemplate")
    def deployment_changes_template(self) -> pulumi.Output[str]:
        return pulumi.get(self, "deployment_changes_template")

    @property
    @pulumi.getter(name="deploymentProcessId")
    def deployment_process_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "deployment_process_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of this project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discreteChannelRelease")
    def discrete_channel_release(self) -> pulumi.Output[Optional[bool]]:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "discrete_channel_release")

    @property
    @pulumi.getter(name="gitAnonymousPersistenceSettings")
    def git_anonymous_persistence_settings(self) -> pulumi.Output[Optional['outputs.ProjectGitAnonymousPersistenceSettings']]:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_anonymous_persistence_settings")

    @property
    @pulumi.getter(name="gitLibraryPersistenceSettings")
    def git_library_persistence_settings(self) -> pulumi.Output[Optional['outputs.ProjectGitLibraryPersistenceSettings']]:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_library_persistence_settings")

    @property
    @pulumi.getter(name="gitUsernamePasswordPersistenceSettings")
    def git_username_password_persistence_settings(self) -> pulumi.Output[Optional['outputs.ProjectGitUsernamePasswordPersistenceSettings']]:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_username_password_persistence_settings")

    @property
    @pulumi.getter(name="includedLibraryVariableSets")
    def included_library_variable_sets(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "included_library_variable_sets")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isDiscreteChannelRelease")
    def is_discrete_channel_release(self) -> pulumi.Output[bool]:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "is_discrete_channel_release")

    @property
    @pulumi.getter(name="isVersionControlled")
    def is_version_controlled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_version_controlled")

    @property
    @pulumi.getter(name="jiraServiceManagementExtensionSettings")
    def jira_service_management_extension_settings(self) -> pulumi.Output[Optional['outputs.ProjectJiraServiceManagementExtensionSettings']]:
        """
        Provides extension settings for the Jira Service Management (JSM) integration for this project.
        """
        return pulumi.get(self, "jira_service_management_extension_settings")

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> pulumi.Output[str]:
        """
        The lifecycle ID associated with this project.
        """
        return pulumi.get(self, "lifecycle_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the project in Octopus Deploy. This name must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectGroupId")
    def project_group_id(self) -> pulumi.Output[str]:
        """
        The project group ID associated with this project.
        """
        return pulumi.get(self, "project_group_id")

    @property
    @pulumi.getter(name="releaseCreationStrategy")
    def release_creation_strategy(self) -> pulumi.Output['outputs.ProjectReleaseCreationStrategy']:
        return pulumi.get(self, "release_creation_strategy")

    @property
    @pulumi.getter(name="releaseNotesTemplate")
    def release_notes_template(self) -> pulumi.Output[str]:
        return pulumi.get(self, "release_notes_template")

    @property
    @pulumi.getter(name="servicenowExtensionSettings")
    def servicenow_extension_settings(self) -> pulumi.Output[Optional['outputs.ProjectServicenowExtensionSettings']]:
        """
        Provides extension settings for the ServiceNow integration for this project.
        """
        return pulumi.get(self, "servicenow_extension_settings")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        A human-readable, unique identifier, used to identify a project.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID associated with this project.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def templates(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectTemplate']]]:
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> pulumi.Output[str]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "variable_set_id")

    @property
    @pulumi.getter(name="versioningStrategies")
    def versioning_strategies(self) -> pulumi.Output[Sequence['outputs.ProjectVersioningStrategy']]:
        return pulumi.get(self, "versioning_strategies")

