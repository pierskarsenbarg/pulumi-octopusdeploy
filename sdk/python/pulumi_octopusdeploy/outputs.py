# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AzureCloudServiceDeploymentTargetEndpoint',
    'AzureCloudServiceDeploymentTargetEndpointAuthentication',
    'AzureCloudServiceDeploymentTargetEndpointContainer',
    'AzureCloudServiceDeploymentTargetEndpointDestination',
    'AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail',
    'AzureServiceFabricClusterDeploymentTargetEndpoint',
    'AzureServiceFabricClusterDeploymentTargetEndpointAuthentication',
    'AzureServiceFabricClusterDeploymentTargetEndpointContainer',
    'AzureServiceFabricClusterDeploymentTargetEndpointDestination',
    'AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail',
    'AzureWebAppDeploymentTargetEndpoint',
    'AzureWebAppDeploymentTargetEndpointAuthentication',
    'AzureWebAppDeploymentTargetEndpointContainer',
    'AzureWebAppDeploymentTargetEndpointDestination',
    'AzureWebAppDeploymentTargetEndpointTentacleVersionDetail',
    'ChannelRule',
    'ChannelRuleActionPackage',
    'DeploymentProcessStep',
    'DeploymentProcessStepAction',
    'DeploymentProcessStepActionActionTemplate',
    'DeploymentProcessStepActionContainer',
    'DeploymentProcessStepActionPackage',
    'DeploymentProcessStepActionPrimaryPackage',
    'DeploymentProcessStepApplyTerraformTemplateAction',
    'DeploymentProcessStepApplyTerraformTemplateActionActionTemplate',
    'DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions',
    'DeploymentProcessStepApplyTerraformTemplateActionAwsAccount',
    'DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole',
    'DeploymentProcessStepApplyTerraformTemplateActionAzureAccount',
    'DeploymentProcessStepApplyTerraformTemplateActionContainer',
    'DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount',
    'DeploymentProcessStepApplyTerraformTemplateActionPackage',
    'DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage',
    'DeploymentProcessStepApplyTerraformTemplateActionTemplate',
    'DeploymentProcessStepDeployKubernetesSecretAction',
    'DeploymentProcessStepDeployKubernetesSecretActionActionTemplate',
    'DeploymentProcessStepDeployKubernetesSecretActionContainer',
    'DeploymentProcessStepDeployKubernetesSecretActionPackage',
    'DeploymentProcessStepDeployPackageAction',
    'DeploymentProcessStepDeployPackageActionActionTemplate',
    'DeploymentProcessStepDeployPackageActionContainer',
    'DeploymentProcessStepDeployPackageActionPackage',
    'DeploymentProcessStepDeployPackageActionPrimaryPackage',
    'DeploymentProcessStepDeployPackageActionWindowsService',
    'DeploymentProcessStepDeployWindowsServiceAction',
    'DeploymentProcessStepDeployWindowsServiceActionActionTemplate',
    'DeploymentProcessStepDeployWindowsServiceActionContainer',
    'DeploymentProcessStepDeployWindowsServiceActionPackage',
    'DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage',
    'DeploymentProcessStepManualInterventionAction',
    'DeploymentProcessStepManualInterventionActionActionTemplate',
    'DeploymentProcessStepManualInterventionActionContainer',
    'DeploymentProcessStepManualInterventionActionPackage',
    'DeploymentProcessStepRunKubectlScriptAction',
    'DeploymentProcessStepRunKubectlScriptActionActionTemplate',
    'DeploymentProcessStepRunKubectlScriptActionContainer',
    'DeploymentProcessStepRunKubectlScriptActionPackage',
    'DeploymentProcessStepRunKubectlScriptActionPrimaryPackage',
    'DeploymentProcessStepRunScriptAction',
    'DeploymentProcessStepRunScriptActionActionTemplate',
    'DeploymentProcessStepRunScriptActionContainer',
    'DeploymentProcessStepRunScriptActionPackage',
    'DeploymentProcessStepRunScriptActionPrimaryPackage',
    'EnvironmentJiraExtensionSettings',
    'EnvironmentJiraServiceManagementExtensionSettings',
    'EnvironmentServicenowExtensionSettings',
    'KubernetesClusterDeploymentTargetAuthentication',
    'KubernetesClusterDeploymentTargetAwsAccountAuthentication',
    'KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication',
    'KubernetesClusterDeploymentTargetCertificateAuthentication',
    'KubernetesClusterDeploymentTargetContainer',
    'KubernetesClusterDeploymentTargetEndpoint',
    'KubernetesClusterDeploymentTargetEndpointAuthentication',
    'KubernetesClusterDeploymentTargetEndpointContainer',
    'KubernetesClusterDeploymentTargetEndpointDestination',
    'KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail',
    'KubernetesClusterDeploymentTargetGcpAccountAuthentication',
    'LibraryVariableSetTemplate',
    'LifecyclePhase',
    'LifecyclePhaseReleaseRetentionPolicy',
    'LifecyclePhaseTentacleRetentionPolicy',
    'LifecycleReleaseRetentionPolicy',
    'LifecycleTentacleRetentionPolicy',
    'ListeningTentacleDeploymentTargetTentacleVersionDetail',
    'MachinePolicyMachineCleanupPolicy',
    'MachinePolicyMachineConnectivityPolicy',
    'MachinePolicyMachineHealthCheckPolicy',
    'MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy',
    'MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy',
    'MachinePolicyMachineUpdatePolicy',
    'OfflinePackageDropDeploymentTargetDestination',
    'OfflinePackageDropDeploymentTargetEndpoint',
    'OfflinePackageDropDeploymentTargetEndpointAuthentication',
    'OfflinePackageDropDeploymentTargetEndpointContainer',
    'OfflinePackageDropDeploymentTargetEndpointDestination',
    'OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail',
    'PollingTentacleDeploymentTargetEndpoint',
    'PollingTentacleDeploymentTargetEndpointAuthentication',
    'PollingTentacleDeploymentTargetEndpointContainer',
    'PollingTentacleDeploymentTargetEndpointDestination',
    'PollingTentacleDeploymentTargetEndpointTentacleVersionDetail',
    'PollingTentacleDeploymentTargetTentacleVersionDetail',
    'ProjectConnectivityPolicy',
    'ProjectGitAnonymousPersistenceSettings',
    'ProjectGitLibraryPersistenceSettings',
    'ProjectGitUsernamePasswordPersistenceSettings',
    'ProjectJiraServiceManagementExtensionSettings',
    'ProjectReleaseCreationStrategy',
    'ProjectReleaseCreationStrategyReleaseCreationPackage',
    'ProjectServicenowExtensionSettings',
    'ProjectTemplate',
    'ProjectVersioningStrategy',
    'ProjectVersioningStrategyDonorPackage',
    'RunbookConnectivityPolicy',
    'RunbookProcessStep',
    'RunbookProcessStepAction',
    'RunbookProcessStepActionActionTemplate',
    'RunbookProcessStepActionContainer',
    'RunbookProcessStepActionPackage',
    'RunbookProcessStepActionPrimaryPackage',
    'RunbookProcessStepApplyTerraformTemplateAction',
    'RunbookProcessStepApplyTerraformTemplateActionActionTemplate',
    'RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions',
    'RunbookProcessStepApplyTerraformTemplateActionAwsAccount',
    'RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole',
    'RunbookProcessStepApplyTerraformTemplateActionAzureAccount',
    'RunbookProcessStepApplyTerraformTemplateActionContainer',
    'RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount',
    'RunbookProcessStepApplyTerraformTemplateActionPackage',
    'RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage',
    'RunbookProcessStepApplyTerraformTemplateActionTemplate',
    'RunbookProcessStepDeployKubernetesSecretAction',
    'RunbookProcessStepDeployKubernetesSecretActionActionTemplate',
    'RunbookProcessStepDeployKubernetesSecretActionContainer',
    'RunbookProcessStepDeployKubernetesSecretActionPackage',
    'RunbookProcessStepDeployPackageAction',
    'RunbookProcessStepDeployPackageActionActionTemplate',
    'RunbookProcessStepDeployPackageActionContainer',
    'RunbookProcessStepDeployPackageActionPackage',
    'RunbookProcessStepDeployPackageActionPrimaryPackage',
    'RunbookProcessStepDeployPackageActionWindowsService',
    'RunbookProcessStepDeployWindowsServiceAction',
    'RunbookProcessStepDeployWindowsServiceActionActionTemplate',
    'RunbookProcessStepDeployWindowsServiceActionContainer',
    'RunbookProcessStepDeployWindowsServiceActionPackage',
    'RunbookProcessStepDeployWindowsServiceActionPrimaryPackage',
    'RunbookProcessStepManualInterventionAction',
    'RunbookProcessStepManualInterventionActionActionTemplate',
    'RunbookProcessStepManualInterventionActionContainer',
    'RunbookProcessStepManualInterventionActionPackage',
    'RunbookProcessStepRunKubectlScriptAction',
    'RunbookProcessStepRunKubectlScriptActionActionTemplate',
    'RunbookProcessStepRunKubectlScriptActionContainer',
    'RunbookProcessStepRunKubectlScriptActionPackage',
    'RunbookProcessStepRunKubectlScriptActionPrimaryPackage',
    'RunbookProcessStepRunScriptAction',
    'RunbookProcessStepRunScriptActionActionTemplate',
    'RunbookProcessStepRunScriptActionContainer',
    'RunbookProcessStepRunScriptActionPackage',
    'RunbookProcessStepRunScriptActionPrimaryPackage',
    'RunbookRetentionPolicy',
    'ScriptModuleScript',
    'SshConnectionDeploymentTargetEndpoint',
    'SshConnectionDeploymentTargetEndpointAuthentication',
    'SshConnectionDeploymentTargetEndpointContainer',
    'SshConnectionDeploymentTargetEndpointDestination',
    'SshConnectionDeploymentTargetEndpointTentacleVersionDetail',
    'TeamExternalSecurityGroup',
    'TeamUserRole',
    'TenantProjectEnvironment',
    'UserIdentity',
    'UserIdentityClaim',
    'VariablePrompt',
    'VariablePromptDisplaySettings',
    'VariablePromptDisplaySettingsSelectOption',
    'VariableScope',
    'GetAccountsAccountResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetCertificatesCertificateResult',
    'GetChannelsChannelResult',
    'GetChannelsChannelRuleResult',
    'GetChannelsChannelRuleActionPackageResult',
    'GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetResult',
    'GetDeploymentTargetsDeploymentTargetResult',
    'GetDeploymentTargetsDeploymentTargetEndpointResult',
    'GetDeploymentTargetsDeploymentTargetEndpointAuthenticationResult',
    'GetDeploymentTargetsDeploymentTargetEndpointContainerResult',
    'GetDeploymentTargetsDeploymentTargetEndpointDestinationResult',
    'GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetEnvironmentsEnvironmentResult',
    'GetEnvironmentsEnvironmentJiraExtensionSettingResult',
    'GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingResult',
    'GetEnvironmentsEnvironmentServicenowExtensionSettingResult',
    'GetFeedsFeedResult',
    'GetGitCredentialsGitCredentialResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationResult',
    'GetLibraryVariableSetsLibraryVariableSetResult',
    'GetLibraryVariableSetsLibraryVariableSetTemplateResult',
    'GetLifecyclesLifecycleResult',
    'GetLifecyclesLifecyclePhaseResult',
    'GetLifecyclesLifecyclePhaseReleaseRetentionPolicyResult',
    'GetLifecyclesLifecyclePhaseTentacleRetentionPolicyResult',
    'GetLifecyclesLifecycleReleaseRetentionPolicyResult',
    'GetLifecyclesLifecycleTentacleRetentionPolicyResult',
    'GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetResult',
    'GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailResult',
    'GetMachinePoliciesMachinePolicyResult',
    'GetMachinePoliciesMachinePolicyMachineCleanupPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineConnectivityPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineUpdatePolicyResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailResult',
    'GetProjectGroupsProjectGroupResult',
    'GetProjectsProjectResult',
    'GetProjectsProjectConnectivityPolicyResult',
    'GetProjectsProjectGitAnonymousPersistenceSettingResult',
    'GetProjectsProjectGitLibraryPersistenceSettingResult',
    'GetProjectsProjectGitUsernamePasswordPersistenceSettingResult',
    'GetProjectsProjectJiraServiceManagementExtensionSettingResult',
    'GetProjectsProjectReleaseCreationStrategyResult',
    'GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageResult',
    'GetProjectsProjectServicenowExtensionSettingResult',
    'GetProjectsProjectTemplateResult',
    'GetProjectsProjectVersioningStrategyResult',
    'GetProjectsProjectVersioningStrategyDonorPackageResult',
    'GetScriptModulesScriptModuleResult',
    'GetScriptModulesScriptModuleScriptResult',
    'GetSpacesSpaceResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetTagSetsTagSetResult',
    'GetTeamsTeamResult',
    'GetTeamsTeamExternalSecurityGroupResult',
    'GetTenantsTenantResult',
    'GetTenantsTenantProjectEnvironmentResult',
    'GetUserRolesUserRoleResult',
    'GetUsersUserResult',
    'GetUsersUserIdentityResult',
    'GetUsersUserIdentityClaimResult',
    'GetVariablesVariableResult',
    'GetVariablesVariablePromptResult',
    'GetVariablesVariablePromptDisplaySettingsResult',
    'GetVariablesVariablePromptDisplaySettingsSelectOptionResult',
    'GetVariablesVariableScopeResult',
    'GetWorkerPoolsWorkerPoolResult',
]

@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.AzureCloudServiceDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 containers: Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.AzureCloudServiceDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.AzureServiceFabricClusterDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 containers: Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.AzureServiceFabricClusterDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.AzureWebAppDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 containers: Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.AzureWebAppDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ChannelRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionPackages":
            suggest = "action_packages"
        elif key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_packages: Sequence['outputs.ChannelRuleActionPackage'],
                 id: Optional[str] = None,
                 tag: Optional[str] = None,
                 version_range: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "action_packages", action_packages)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter(name="actionPackages")
    def action_packages(self) -> Sequence['outputs.ChannelRuleActionPackage']:
        return pulumi.get(self, "action_packages")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class ChannelRuleActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentAction":
            suggest = "deployment_action"
        elif key == "packageReference":
            suggest = "package_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelRuleActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelRuleActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelRuleActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class DeploymentProcessStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyTerraformTemplateActions":
            suggest = "apply_terraform_template_actions"
        elif key == "conditionExpression":
            suggest = "condition_expression"
        elif key == "deployKubernetesSecretActions":
            suggest = "deploy_kubernetes_secret_actions"
        elif key == "deployPackageActions":
            suggest = "deploy_package_actions"
        elif key == "deployWindowsServiceActions":
            suggest = "deploy_windows_service_actions"
        elif key == "manualInterventionActions":
            suggest = "manual_intervention_actions"
        elif key == "packageRequirement":
            suggest = "package_requirement"
        elif key == "runKubectlScriptActions":
            suggest = "run_kubectl_script_actions"
        elif key == "runScriptActions":
            suggest = "run_script_actions"
        elif key == "startTrigger":
            suggest = "start_trigger"
        elif key == "targetRoles":
            suggest = "target_roles"
        elif key == "windowSize":
            suggest = "window_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 actions: Optional[Sequence['outputs.DeploymentProcessStepAction']] = None,
                 apply_terraform_template_actions: Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateAction']] = None,
                 condition: Optional[str] = None,
                 condition_expression: Optional[str] = None,
                 deploy_kubernetes_secret_actions: Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretAction']] = None,
                 deploy_package_actions: Optional[Sequence['outputs.DeploymentProcessStepDeployPackageAction']] = None,
                 deploy_windows_service_actions: Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceAction']] = None,
                 id: Optional[str] = None,
                 manual_intervention_actions: Optional[Sequence['outputs.DeploymentProcessStepManualInterventionAction']] = None,
                 package_requirement: Optional[str] = None,
                 properties: Optional[Mapping[str, Any]] = None,
                 run_kubectl_script_actions: Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptAction']] = None,
                 run_script_actions: Optional[Sequence['outputs.DeploymentProcessStepRunScriptAction']] = None,
                 start_trigger: Optional[str] = None,
                 target_roles: Optional[Sequence[str]] = None,
                 window_size: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param str condition: When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        :param str condition_expression: The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        :param str id: The unique ID for this resource.
        :param str package_requirement: Whether to run this step before or after package acquisition (if possible)
        :param str start_trigger: Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        :param Sequence[str] target_roles: The roles that this step run against, or runs on behalf of
        :param str window_size: The maximum number of targets to deploy to simultaneously
        """
        pulumi.set(__self__, "name", name)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if apply_terraform_template_actions is not None:
            pulumi.set(__self__, "apply_terraform_template_actions", apply_terraform_template_actions)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if deploy_kubernetes_secret_actions is not None:
            pulumi.set(__self__, "deploy_kubernetes_secret_actions", deploy_kubernetes_secret_actions)
        if deploy_package_actions is not None:
            pulumi.set(__self__, "deploy_package_actions", deploy_package_actions)
        if deploy_windows_service_actions is not None:
            pulumi.set(__self__, "deploy_windows_service_actions", deploy_windows_service_actions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manual_intervention_actions is not None:
            pulumi.set(__self__, "manual_intervention_actions", manual_intervention_actions)
        if package_requirement is not None:
            pulumi.set(__self__, "package_requirement", package_requirement)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_kubectl_script_actions is not None:
            pulumi.set(__self__, "run_kubectl_script_actions", run_kubectl_script_actions)
        if run_script_actions is not None:
            pulumi.set(__self__, "run_script_actions", run_script_actions)
        if start_trigger is not None:
            pulumi.set(__self__, "start_trigger", start_trigger)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepAction']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="applyTerraformTemplateActions")
    def apply_terraform_template_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateAction']]:
        return pulumi.get(self, "apply_terraform_template_actions")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[str]:
        """
        The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        """
        return pulumi.get(self, "condition_expression")

    @property
    @pulumi.getter(name="deployKubernetesSecretActions")
    def deploy_kubernetes_secret_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretAction']]:
        return pulumi.get(self, "deploy_kubernetes_secret_actions")

    @property
    @pulumi.getter(name="deployPackageActions")
    def deploy_package_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployPackageAction']]:
        return pulumi.get(self, "deploy_package_actions")

    @property
    @pulumi.getter(name="deployWindowsServiceActions")
    def deploy_windows_service_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceAction']]:
        return pulumi.get(self, "deploy_windows_service_actions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="manualInterventionActions")
    def manual_intervention_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepManualInterventionAction']]:
        return pulumi.get(self, "manual_intervention_actions")

    @property
    @pulumi.getter(name="packageRequirement")
    def package_requirement(self) -> Optional[str]:
        """
        Whether to run this step before or after package acquisition (if possible)
        """
        return pulumi.get(self, "package_requirement")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runKubectlScriptActions")
    def run_kubectl_script_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptAction']]:
        return pulumi.get(self, "run_kubectl_script_actions")

    @property
    @pulumi.getter(name="runScriptActions")
    def run_script_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunScriptAction']]:
        return pulumi.get(self, "run_script_actions")

    @property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> Optional[str]:
        """
        Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        """
        return pulumi.get(self, "start_trigger")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[Sequence[str]]:
        """
        The roles that this step run against, or runs on behalf of
        """
        return pulumi.get(self, "target_roles")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[str]:
        """
        The maximum number of targets to deploy to simultaneously
        """
        return pulumi.get(self, "window_size")


@pulumi.output_type
class DeploymentProcessStepAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: str,
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepActionPackage']] = None,
                 primary_package: Optional['outputs.DeploymentProcessStepActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.DeploymentProcessStepActionPrimaryPackage']:
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class DeploymentProcessStepActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advancedOptions":
            suggest = "advanced_options"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "awsAccount":
            suggest = "aws_account"
        elif key == "azureAccount":
            suggest = "azure_account"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "googleCloudAccount":
            suggest = "google_cloud_account"
        elif key == "inlineTemplate":
            suggest = "inline_template"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "templateParameters":
            suggest = "template_parameters"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advanced_options: 'outputs.DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions',
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionActionTemplate'] = None,
                 aws_account: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccount'] = None,
                 azure_account: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAzureAccount'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 google_cloud_account: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount'] = None,
                 id: Optional[str] = None,
                 inline_template: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateActionPackage']] = None,
                 primary_package: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 template: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionTemplate'] = None,
                 template_parameters: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if aws_account is not None:
            pulumi.set(__self__, "aws_account", aws_account)
        if azure_account is not None:
            pulumi.set(__self__, "azure_account", azure_account)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if google_cloud_account is not None:
            pulumi.set(__self__, "google_cloud_account", google_cloud_account)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inline_template is not None:
            pulumi.set(__self__, "inline_template", inline_template)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> 'outputs.DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions':
        return pulumi.get(self, "advanced_options")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="awsAccount")
    def aws_account(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccount']:
        return pulumi.get(self, "aws_account")

    @property
    @pulumi.getter(name="azureAccount")
    def azure_account(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAzureAccount']:
        return pulumi.get(self, "azure_account")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="googleCloudAccount")
    def google_cloud_account(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount']:
        return pulumi.get(self, "google_cloud_account")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inlineTemplate")
    def inline_template(self) -> Optional[str]:
        return pulumi.get(self, "inline_template")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage']:
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionTemplate']:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[str]:
        return pulumi.get(self, "template_parameters")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAdditionalPluginDownloads":
            suggest = "allow_additional_plugin_downloads"
        elif key == "applyParameters":
            suggest = "apply_parameters"
        elif key == "initParameters":
            suggest = "init_parameters"
        elif key == "pluginCacheDirectory":
            suggest = "plugin_cache_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_additional_plugin_downloads: Optional[bool] = None,
                 apply_parameters: Optional[str] = None,
                 init_parameters: Optional[str] = None,
                 plugin_cache_directory: Optional[str] = None,
                 workspace: Optional[str] = None):
        if allow_additional_plugin_downloads is not None:
            pulumi.set(__self__, "allow_additional_plugin_downloads", allow_additional_plugin_downloads)
        if apply_parameters is not None:
            pulumi.set(__self__, "apply_parameters", apply_parameters)
        if init_parameters is not None:
            pulumi.set(__self__, "init_parameters", init_parameters)
        if plugin_cache_directory is not None:
            pulumi.set(__self__, "plugin_cache_directory", plugin_cache_directory)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="allowAdditionalPluginDownloads")
    def allow_additional_plugin_downloads(self) -> Optional[bool]:
        return pulumi.get(self, "allow_additional_plugin_downloads")

    @property
    @pulumi.getter(name="applyParameters")
    def apply_parameters(self) -> Optional[str]:
        return pulumi.get(self, "apply_parameters")

    @property
    @pulumi.getter(name="initParameters")
    def init_parameters(self) -> Optional[str]:
        return pulumi.get(self, "init_parameters")

    @property
    @pulumi.getter(name="pluginCacheDirectory")
    def plugin_cache_directory(self) -> Optional[str]:
        return pulumi.get(self, "plugin_cache_directory")

    @property
    @pulumi.getter
    def workspace(self) -> Optional[str]:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionAwsAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useInstanceRole":
            suggest = "use_instance_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionAwsAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAwsAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAwsAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: Optional[str] = None,
                 role: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole'] = None,
                 use_instance_role: Optional[bool] = None,
                 variable: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole']:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"
        elif key == "roleSessionName":
            suggest = "role_session_name"
        elif key == "sessionDuration":
            suggest = "session_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 external_id: Optional[str] = None,
                 role_session_name: Optional[str] = None,
                 session_duration: Optional[int] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_session_name is not None:
            pulumi.set(__self__, "role_session_name", role_session_name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="roleSessionName")
    def role_session_name(self) -> Optional[str]:
        return pulumi.get(self, "role_session_name")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionAzureAccount(dict):
    def __init__(__self__, *,
                 variable: Optional[str] = None):
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_vm_service_account: Optional[bool] = None,
                 variable: Optional[str] = None,
                 zone: Optional[str] = None):
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVariableFiles":
            suggest = "additional_variable_files"
        elif key == "runAutomaticFileSubstitution":
            suggest = "run_automatic_file_substitution"
        elif key == "targetFiles":
            suggest = "target_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_variable_files: Optional[str] = None,
                 directory: Optional[str] = None,
                 run_automatic_file_substitution: Optional[bool] = None,
                 target_files: Optional[str] = None):
        if additional_variable_files is not None:
            pulumi.set(__self__, "additional_variable_files", additional_variable_files)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if run_automatic_file_substitution is not None:
            pulumi.set(__self__, "run_automatic_file_substitution", run_automatic_file_substitution)
        if target_files is not None:
            pulumi.set(__self__, "target_files", target_files)

    @property
    @pulumi.getter(name="additionalVariableFiles")
    def additional_variable_files(self) -> Optional[str]:
        return pulumi.get(self, "additional_variable_files")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter(name="runAutomaticFileSubstitution")
    def run_automatic_file_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "run_automatic_file_substitution")

    @property
    @pulumi.getter(name="targetFiles")
    def target_files(self) -> Optional[str]:
        return pulumi.get(self, "target_files")


@pulumi.output_type
class DeploymentProcessStepDeployKubernetesSecretAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"
        elif key == "secretValues":
            suggest = "secret_values"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployKubernetesSecretAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployKubernetesSecretAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployKubernetesSecretAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 secret_name: str,
                 secret_values: Mapping[str, str],
                 action_template: Optional['outputs.DeploymentProcessStepDeployKubernetesSecretActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_values", secret_values)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretValues")
    def secret_values(self) -> Mapping[str, str]:
        return pulumi.get(self, "secret_values")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepDeployKubernetesSecretActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class DeploymentProcessStepDeployKubernetesSecretActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployKubernetesSecretActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepDeployKubernetesSecretActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployKubernetesSecretActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepDeployKubernetesSecretActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployKubernetesSecretActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepDeployPackageAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryPackage":
            suggest = "primary_package"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "windowsService":
            suggest = "windows_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 primary_package: 'outputs.DeploymentProcessStepDeployPackageActionPrimaryPackage',
                 action_template: Optional['outputs.DeploymentProcessStepDeployPackageActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepDeployPackageActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepDeployPackageActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 windows_service: Optional['outputs.DeploymentProcessStepDeployPackageActionWindowsService'] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if windows_service is not None:
            pulumi.set(__self__, "windows_service", windows_service)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> 'outputs.DeploymentProcessStepDeployPackageActionPrimaryPackage':
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepDeployPackageActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployPackageActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployPackageActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="windowsService")
    def windows_service(self) -> Optional['outputs.DeploymentProcessStepDeployPackageActionWindowsService']:
        return pulumi.get(self, "windows_service")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionWindowsService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executablePath":
            suggest = "executable_path"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "createOrUpdateService":
            suggest = "create_or_update_service"
        elif key == "customAccountName":
            suggest = "custom_account_name"
        elif key == "customAccountPassword":
            suggest = "custom_account_password"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "startMode":
            suggest = "start_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionWindowsService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionWindowsService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionWindowsService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 executable_path: str,
                 service_name: str,
                 arguments: Optional[str] = None,
                 create_or_update_service: Optional[bool] = None,
                 custom_account_name: Optional[str] = None,
                 custom_account_password: Optional[str] = None,
                 dependencies: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 service_account: Optional[str] = None,
                 start_mode: Optional[str] = None):
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "service_name", service_name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> str:
        return pulumi.get(self, "executable_path")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_or_update_service")

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_account_name")

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[str]:
        return pulumi.get(self, "custom_account_password")

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[str]:
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[str]:
        return pulumi.get(self, "start_mode")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executablePath":
            suggest = "executable_path"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "createOrUpdateService":
            suggest = "create_or_update_service"
        elif key == "customAccountName":
            suggest = "custom_account_name"
        elif key == "customAccountPassword":
            suggest = "custom_account_password"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "startMode":
            suggest = "start_mode"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 executable_path: str,
                 name: str,
                 primary_package: 'outputs.DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage',
                 service_name: str,
                 action_template: Optional['outputs.DeploymentProcessStepDeployWindowsServiceActionActionTemplate'] = None,
                 arguments: Optional[str] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceActionContainer']] = None,
                 create_or_update_service: Optional[bool] = None,
                 custom_account_name: Optional[str] = None,
                 custom_account_password: Optional[str] = None,
                 dependencies: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 service_account: Optional[str] = None,
                 start_mode: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        pulumi.set(__self__, "service_name", service_name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> str:
        return pulumi.get(self, "executable_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> 'outputs.DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage':
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepDeployWindowsServiceActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_or_update_service")

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_account_name")

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[str]:
        return pulumi.get(self, "custom_account_password")

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[str]:
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[str]:
        return pulumi.get(self, "start_mode")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepManualInterventionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "responsibleTeams":
            suggest = "responsible_teams"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepManualInterventionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepManualInterventionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepManualInterventionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instructions: str,
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepManualInterventionActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepManualInterventionActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepManualInterventionActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 responsible_teams: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "instructions", instructions)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if responsible_teams is not None:
            pulumi.set(__self__, "responsible_teams", responsible_teams)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def instructions(self) -> str:
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepManualInterventionActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepManualInterventionActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepManualInterventionActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="responsibleTeams")
    def responsible_teams(self) -> Optional[str]:
        return pulumi.get(self, "responsible_teams")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class DeploymentProcessStepManualInterventionActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepManualInterventionActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepManualInterventionActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepManualInterventionActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepManualInterventionActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepManualInterventionActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepManualInterventionActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepManualInterventionActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepManualInterventionActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepManualInterventionActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepManualInterventionActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepManualInterventionActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "scriptFileName":
            suggest = "script_file_name"
        elif key == "scriptParameters":
            suggest = "script_parameters"
        elif key == "scriptSource":
            suggest = "script_source"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepRunKubectlScriptActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptActionPackage']] = None,
                 primary_package: Optional['outputs.DeploymentProcessStepRunKubectlScriptActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 script_file_name: Optional[str] = None,
                 script_parameters: Optional[str] = None,
                 script_source: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepRunKubectlScriptActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.DeploymentProcessStepRunKubectlScriptActionPrimaryPackage']:
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        return pulumi.get(self, "script_file_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[str]:
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[str]:
        return pulumi.get(self, "script_source")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepRunScriptAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "scriptBody":
            suggest = "script_body"
        elif key == "scriptFileName":
            suggest = "script_file_name"
        elif key == "scriptParameters":
            suggest = "script_parameters"
        elif key == "scriptSource":
            suggest = "script_source"
        elif key == "scriptSyntax":
            suggest = "script_syntax"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "variableSubstitutionInFiles":
            suggest = "variable_substitution_in_files"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepRunScriptActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepRunScriptActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepRunScriptActionPackage']] = None,
                 primary_package: Optional['outputs.DeploymentProcessStepRunScriptActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 script_body: Optional[str] = None,
                 script_file_name: Optional[str] = None,
                 script_parameters: Optional[str] = None,
                 script_source: Optional[str] = None,
                 script_syntax: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 variable_substitution_in_files: Optional[str] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepRunScriptActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunScriptActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunScriptActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.DeploymentProcessStepRunScriptActionPrimaryPackage']:
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        return pulumi.get(self, "script_file_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[str]:
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[str]:
        return pulumi.get(self, "script_source")

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[str]:
        return pulumi.get(self, "script_syntax")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[str]:
        return pulumi.get(self, "variable_substitution_in_files")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class DeploymentProcessStepRunScriptActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepRunScriptActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepRunScriptActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepRunScriptActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class EnvironmentJiraExtensionSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentType":
            suggest = "environment_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentJiraExtensionSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentJiraExtensionSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentJiraExtensionSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_type: str):
        """
        :param str environment_type: The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, or `"unmapped"`.
        """
        pulumi.set(__self__, "environment_type", environment_type)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> str:
        """
        The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, or `"unmapped"`.
        """
        return pulumi.get(self, "environment_type")


@pulumi.output_type
class EnvironmentJiraServiceManagementExtensionSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentJiraServiceManagementExtensionSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentJiraServiceManagementExtensionSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentJiraServiceManagementExtensionSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: Specifies whether or not this extension is enabled for this project.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class EnvironmentServicenowExtensionSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentServicenowExtensionSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentServicenowExtensionSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentServicenowExtensionSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool):
        """
        :param bool is_enabled: Specifies whether or not this extension is enabled for this project.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class KubernetesClusterDeploymentTargetAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")


@pulumi.output_type
class KubernetesClusterDeploymentTargetAwsAccountAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetAwsAccountAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetAwsAccountAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetAwsAccountAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 use_instance_role: Optional[bool] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")


@pulumi.output_type
class KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 cluster_resource_group: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> str:
        return pulumi.get(self, "cluster_resource_group")


@pulumi.output_type
class KubernetesClusterDeploymentTargetCertificateAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificate":
            suggest = "client_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetCertificateAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetCertificateAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetCertificateAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate: Optional[str] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")


@pulumi.output_type
class KubernetesClusterDeploymentTargetContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.KubernetesClusterDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 containers: Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.KubernetesClusterDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class KubernetesClusterDeploymentTargetGcpAccountAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetGcpAccountAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetGcpAccountAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetGcpAccountAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 project: str,
                 impersonate_service_account: Optional[bool] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "project", project)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class LibraryVariableSetTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"
        elif key == "displaySettings":
            suggest = "display_settings"
        elif key == "helpText":
            suggest = "help_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LibraryVariableSetTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LibraryVariableSetTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LibraryVariableSetTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 default_value: Optional[str] = None,
                 display_settings: Optional[Mapping[str, Any]] = None,
                 help_text: Optional[str] = None,
                 id: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param str name: The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
        :param str default_value: A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        :param Mapping[str, Any] display_settings: The display settings for the parameter.
        :param str help_text: The help presented alongside the parameter input.
        :param str id: The unique ID for this resource.
        :param str label: The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        """
        A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[Mapping[str, Any]]:
        """
        The display settings for the parameter.
        """
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[str]:
        """
        The help presented alongside the parameter input.
        """
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class LifecyclePhase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automaticDeploymentTargets":
            suggest = "automatic_deployment_targets"
        elif key == "isOptionalPhase":
            suggest = "is_optional_phase"
        elif key == "minimumEnvironmentsBeforePromotion":
            suggest = "minimum_environments_before_promotion"
        elif key == "optionalDeploymentTargets":
            suggest = "optional_deployment_targets"
        elif key == "releaseRetentionPolicy":
            suggest = "release_retention_policy"
        elif key == "tentacleRetentionPolicy":
            suggest = "tentacle_retention_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecyclePhase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecyclePhase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecyclePhase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 automatic_deployment_targets: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_optional_phase: Optional[bool] = None,
                 minimum_environments_before_promotion: Optional[int] = None,
                 optional_deployment_targets: Optional[Sequence[str]] = None,
                 release_retention_policy: Optional['outputs.LifecyclePhaseReleaseRetentionPolicy'] = None,
                 tentacle_retention_policy: Optional['outputs.LifecyclePhaseTentacleRetentionPolicy'] = None):
        """
        :param str name: The name of this resource.
        :param Sequence[str] automatic_deployment_targets: Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
        :param str id: The unique ID for this resource.
        :param bool is_optional_phase: If false a release must be deployed to this phase before it can be deployed to the next phase.
        :param int minimum_environments_before_promotion: The number of units required before a release can enter the next phase. If 0, all environments are required.
        :param Sequence[str] optional_deployment_targets: Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
        """
        pulumi.set(__self__, "name", name)
        if automatic_deployment_targets is not None:
            pulumi.set(__self__, "automatic_deployment_targets", automatic_deployment_targets)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_optional_phase is not None:
            pulumi.set(__self__, "is_optional_phase", is_optional_phase)
        if minimum_environments_before_promotion is not None:
            pulumi.set(__self__, "minimum_environments_before_promotion", minimum_environments_before_promotion)
        if optional_deployment_targets is not None:
            pulumi.set(__self__, "optional_deployment_targets", optional_deployment_targets)
        if release_retention_policy is not None:
            pulumi.set(__self__, "release_retention_policy", release_retention_policy)
        if tentacle_retention_policy is not None:
            pulumi.set(__self__, "tentacle_retention_policy", tentacle_retention_policy)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="automaticDeploymentTargets")
    def automatic_deployment_targets(self) -> Optional[Sequence[str]]:
        """
        Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
        """
        return pulumi.get(self, "automatic_deployment_targets")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOptionalPhase")
    def is_optional_phase(self) -> Optional[bool]:
        """
        If false a release must be deployed to this phase before it can be deployed to the next phase.
        """
        return pulumi.get(self, "is_optional_phase")

    @property
    @pulumi.getter(name="minimumEnvironmentsBeforePromotion")
    def minimum_environments_before_promotion(self) -> Optional[int]:
        """
        The number of units required before a release can enter the next phase. If 0, all environments are required.
        """
        return pulumi.get(self, "minimum_environments_before_promotion")

    @property
    @pulumi.getter(name="optionalDeploymentTargets")
    def optional_deployment_targets(self) -> Optional[Sequence[str]]:
        """
        Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
        """
        return pulumi.get(self, "optional_deployment_targets")

    @property
    @pulumi.getter(name="releaseRetentionPolicy")
    def release_retention_policy(self) -> Optional['outputs.LifecyclePhaseReleaseRetentionPolicy']:
        return pulumi.get(self, "release_retention_policy")

    @property
    @pulumi.getter(name="tentacleRetentionPolicy")
    def tentacle_retention_policy(self) -> Optional['outputs.LifecyclePhaseTentacleRetentionPolicy']:
        return pulumi.get(self, "tentacle_retention_policy")


@pulumi.output_type
class LifecyclePhaseReleaseRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecyclePhaseReleaseRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecyclePhaseReleaseRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecyclePhaseReleaseRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        """
        :param int quantity_to_keep: The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        :param str unit: The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LifecyclePhaseTentacleRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecyclePhaseTentacleRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecyclePhaseTentacleRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecyclePhaseTentacleRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        """
        :param int quantity_to_keep: The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        :param str unit: The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LifecycleReleaseRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleReleaseRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleReleaseRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleReleaseRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        """
        :param int quantity_to_keep: The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        :param str unit: The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LifecycleTentacleRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleTentacleRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleTentacleRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleTentacleRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        """
        :param int quantity_to_keep: The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        :param str unit: The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class ListeningTentacleDeploymentTargetTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListeningTentacleDeploymentTargetTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListeningTentacleDeploymentTargetTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListeningTentacleDeploymentTargetTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class MachinePolicyMachineCleanupPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteMachinesBehavior":
            suggest = "delete_machines_behavior"
        elif key == "deleteMachinesElapsedTimespan":
            suggest = "delete_machines_elapsed_timespan"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineCleanupPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineCleanupPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineCleanupPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_machines_behavior: Optional[str] = None,
                 delete_machines_elapsed_timespan: Optional[int] = None):
        if delete_machines_behavior is not None:
            pulumi.set(__self__, "delete_machines_behavior", delete_machines_behavior)
        if delete_machines_elapsed_timespan is not None:
            pulumi.set(__self__, "delete_machines_elapsed_timespan", delete_machines_elapsed_timespan)

    @property
    @pulumi.getter(name="deleteMachinesBehavior")
    def delete_machines_behavior(self) -> Optional[str]:
        return pulumi.get(self, "delete_machines_behavior")

    @property
    @pulumi.getter(name="deleteMachinesElapsedTimespan")
    def delete_machines_elapsed_timespan(self) -> Optional[int]:
        return pulumi.get(self, "delete_machines_elapsed_timespan")


@pulumi.output_type
class MachinePolicyMachineConnectivityPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "machineConnectivityBehavior":
            suggest = "machine_connectivity_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineConnectivityPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineConnectivityPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineConnectivityPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 machine_connectivity_behavior: Optional[str] = None):
        if machine_connectivity_behavior is not None:
            pulumi.set(__self__, "machine_connectivity_behavior", machine_connectivity_behavior)

    @property
    @pulumi.getter(name="machineConnectivityBehavior")
    def machine_connectivity_behavior(self) -> Optional[str]:
        return pulumi.get(self, "machine_connectivity_behavior")


@pulumi.output_type
class MachinePolicyMachineHealthCheckPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bashHealthCheckPolicy":
            suggest = "bash_health_check_policy"
        elif key == "powershellHealthCheckPolicy":
            suggest = "powershell_health_check_policy"
        elif key == "healthCheckCron":
            suggest = "health_check_cron"
        elif key == "healthCheckCronTimezone":
            suggest = "health_check_cron_timezone"
        elif key == "healthCheckInterval":
            suggest = "health_check_interval"
        elif key == "healthCheckType":
            suggest = "health_check_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineHealthCheckPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineHealthCheckPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineHealthCheckPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bash_health_check_policy: 'outputs.MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy',
                 powershell_health_check_policy: 'outputs.MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy',
                 health_check_cron: Optional[str] = None,
                 health_check_cron_timezone: Optional[str] = None,
                 health_check_interval: Optional[int] = None,
                 health_check_type: Optional[str] = None):
        pulumi.set(__self__, "bash_health_check_policy", bash_health_check_policy)
        pulumi.set(__self__, "powershell_health_check_policy", powershell_health_check_policy)
        if health_check_cron is not None:
            pulumi.set(__self__, "health_check_cron", health_check_cron)
        if health_check_cron_timezone is not None:
            pulumi.set(__self__, "health_check_cron_timezone", health_check_cron_timezone)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)

    @property
    @pulumi.getter(name="bashHealthCheckPolicy")
    def bash_health_check_policy(self) -> 'outputs.MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy':
        return pulumi.get(self, "bash_health_check_policy")

    @property
    @pulumi.getter(name="powershellHealthCheckPolicy")
    def powershell_health_check_policy(self) -> 'outputs.MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy':
        return pulumi.get(self, "powershell_health_check_policy")

    @property
    @pulumi.getter(name="healthCheckCron")
    def health_check_cron(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron")

    @property
    @pulumi.getter(name="healthCheckCronTimezone")
    def health_check_cron_timezone(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron_timezone")

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[int]:
        return pulumi.get(self, "health_check_interval")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[str]:
        return pulumi.get(self, "health_check_type")


@pulumi.output_type
class MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runType":
            suggest = "run_type"
        elif key == "scriptBody":
            suggest = "script_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")


@pulumi.output_type
class MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runType":
            suggest = "run_type"
        elif key == "scriptBody":
            suggest = "script_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")


@pulumi.output_type
class MachinePolicyMachineUpdatePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calamariUpdateBehavior":
            suggest = "calamari_update_behavior"
        elif key == "tentacleUpdateAccountId":
            suggest = "tentacle_update_account_id"
        elif key == "tentacleUpdateBehavior":
            suggest = "tentacle_update_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineUpdatePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineUpdatePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineUpdatePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calamari_update_behavior: Optional[str] = None,
                 tentacle_update_account_id: Optional[str] = None,
                 tentacle_update_behavior: Optional[str] = None):
        if calamari_update_behavior is not None:
            pulumi.set(__self__, "calamari_update_behavior", calamari_update_behavior)
        if tentacle_update_account_id is not None:
            pulumi.set(__self__, "tentacle_update_account_id", tentacle_update_account_id)
        if tentacle_update_behavior is not None:
            pulumi.set(__self__, "tentacle_update_behavior", tentacle_update_behavior)

    @property
    @pulumi.getter(name="calamariUpdateBehavior")
    def calamari_update_behavior(self) -> Optional[str]:
        return pulumi.get(self, "calamari_update_behavior")

    @property
    @pulumi.getter(name="tentacleUpdateAccountId")
    def tentacle_update_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tentacle_update_account_id")

    @property
    @pulumi.getter(name="tentacleUpdateBehavior")
    def tentacle_update_behavior(self) -> Optional[str]:
        return pulumi.get(self, "tentacle_update_behavior")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.OfflinePackageDropDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 containers: Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.OfflinePackageDropDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.PollingTentacleDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 containers: Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.PollingTentacleDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class PollingTentacleDeploymentTargetTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ProjectConnectivityPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowDeploymentsToNoTargets":
            suggest = "allow_deployments_to_no_targets"
        elif key == "excludeUnhealthyTargets":
            suggest = "exclude_unhealthy_targets"
        elif key == "skipMachineBehavior":
            suggest = "skip_machine_behavior"
        elif key == "targetRoles":
            suggest = "target_roles"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectConnectivityPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectConnectivityPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectConnectivityPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_deployments_to_no_targets: Optional[bool] = None,
                 exclude_unhealthy_targets: Optional[bool] = None,
                 skip_machine_behavior: Optional[str] = None,
                 target_roles: Optional[Sequence[str]] = None):
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if exclude_unhealthy_targets is not None:
            pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[bool]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[str]:
        return pulumi.get(self, "skip_machine_behavior")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_roles")


@pulumi.output_type
class ProjectGitAnonymousPersistenceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basePath":
            suggest = "base_path"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "protectedBranches":
            suggest = "protected_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectGitAnonymousPersistenceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectGitAnonymousPersistenceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectGitAnonymousPersistenceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        """
        :param str url: The URL associated with these version control settings.
        :param str base_path: The base path associated with these version control settings.
        :param str default_branch: The default branch associated with these version control settings.
        :param Sequence[str] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")


@pulumi.output_type
class ProjectGitLibraryPersistenceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitCredentialId":
            suggest = "git_credential_id"
        elif key == "basePath":
            suggest = "base_path"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "protectedBranches":
            suggest = "protected_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectGitLibraryPersistenceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectGitLibraryPersistenceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectGitLibraryPersistenceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 git_credential_id: str,
                 url: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        """
        :param str url: The URL associated with these version control settings.
        :param str base_path: The base path associated with these version control settings.
        :param str default_branch: The default branch associated with these version control settings.
        :param Sequence[str] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "git_credential_id", git_credential_id)
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> str:
        return pulumi.get(self, "git_credential_id")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")


@pulumi.output_type
class ProjectGitUsernamePasswordPersistenceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basePath":
            suggest = "base_path"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "protectedBranches":
            suggest = "protected_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectGitUsernamePasswordPersistenceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectGitUsernamePasswordPersistenceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectGitUsernamePasswordPersistenceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 url: str,
                 username: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        """
        :param str password: The password for the Git credential.
        :param str url: The URL associated with these version control settings.
        :param str username: The username for the Git credential.
        :param str base_path: The base path associated with these version control settings.
        :param str default_branch: The default branch associated with these version control settings.
        :param Sequence[str] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password for the Git credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the Git credential.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")


@pulumi.output_type
class ProjectJiraServiceManagementExtensionSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "serviceDeskProjectName":
            suggest = "service_desk_project_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectJiraServiceManagementExtensionSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectJiraServiceManagementExtensionSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectJiraServiceManagementExtensionSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 service_desk_project_name: str):
        """
        :param str connection_id: The connection identifier associated with the extension settings.
        :param bool is_enabled: Specifies whether or not this extension is enabled for this project.
        :param str service_desk_project_name: The project name associated with this extension.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "service_desk_project_name", service_desk_project_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The connection identifier associated with the extension settings.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="serviceDeskProjectName")
    def service_desk_project_name(self) -> str:
        """
        The project name associated with this extension.
        """
        return pulumi.get(self, "service_desk_project_name")


@pulumi.output_type
class ProjectReleaseCreationStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelId":
            suggest = "channel_id"
        elif key == "releaseCreationPackage":
            suggest = "release_creation_package"
        elif key == "releaseCreationPackageStepId":
            suggest = "release_creation_package_step_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectReleaseCreationStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectReleaseCreationStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectReleaseCreationStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_id: Optional[str] = None,
                 release_creation_package: Optional['outputs.ProjectReleaseCreationStrategyReleaseCreationPackage'] = None,
                 release_creation_package_step_id: Optional[str] = None):
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if release_creation_package is not None:
            pulumi.set(__self__, "release_creation_package", release_creation_package)
        if release_creation_package_step_id is not None:
            pulumi.set(__self__, "release_creation_package_step_id", release_creation_package_step_id)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[str]:
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter(name="releaseCreationPackage")
    def release_creation_package(self) -> Optional['outputs.ProjectReleaseCreationStrategyReleaseCreationPackage']:
        return pulumi.get(self, "release_creation_package")

    @property
    @pulumi.getter(name="releaseCreationPackageStepId")
    def release_creation_package_step_id(self) -> Optional[str]:
        return pulumi.get(self, "release_creation_package_step_id")


@pulumi.output_type
class ProjectReleaseCreationStrategyReleaseCreationPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentAction":
            suggest = "deployment_action"
        elif key == "packageReference":
            suggest = "package_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectReleaseCreationStrategyReleaseCreationPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectReleaseCreationStrategyReleaseCreationPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectReleaseCreationStrategyReleaseCreationPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class ProjectServicenowExtensionSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isStateAutomaticallyTransitioned":
            suggest = "is_state_automatically_transitioned"
        elif key == "standardChangeTemplateName":
            suggest = "standard_change_template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectServicenowExtensionSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectServicenowExtensionSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectServicenowExtensionSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 is_state_automatically_transitioned: bool,
                 standard_change_template_name: str):
        """
        :param str connection_id: The connection identifier associated with the extension settings.
        :param bool is_enabled: Specifies whether or not this extension is enabled for this project.
        :param bool is_state_automatically_transitioned: Specifies whether or not this extension will automatically transition the state of a deployment for this project.
        :param str standard_change_template_name: The name of the standard change template associated with this extension.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_state_automatically_transitioned", is_state_automatically_transitioned)
        pulumi.set(__self__, "standard_change_template_name", standard_change_template_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The connection identifier associated with the extension settings.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isStateAutomaticallyTransitioned")
    def is_state_automatically_transitioned(self) -> bool:
        """
        Specifies whether or not this extension will automatically transition the state of a deployment for this project.
        """
        return pulumi.get(self, "is_state_automatically_transitioned")

    @property
    @pulumi.getter(name="standardChangeTemplateName")
    def standard_change_template_name(self) -> str:
        """
        The name of the standard change template associated with this extension.
        """
        return pulumi.get(self, "standard_change_template_name")


@pulumi.output_type
class ProjectTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"
        elif key == "displaySettings":
            suggest = "display_settings"
        elif key == "helpText":
            suggest = "help_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 default_value: Optional[str] = None,
                 display_settings: Optional[Mapping[str, Any]] = None,
                 help_text: Optional[str] = None,
                 id: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param str name: The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
        :param str default_value: A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        :param Mapping[str, Any] display_settings: The display settings for the parameter.
        :param str help_text: The help presented alongside the parameter input.
        :param str id: The unique ID for this resource.
        :param str label: The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        """
        A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[Mapping[str, Any]]:
        """
        The display settings for the parameter.
        """
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[str]:
        """
        The help presented alongside the parameter input.
        """
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class ProjectVersioningStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "donorPackage":
            suggest = "donor_package"
        elif key == "donorPackageStepId":
            suggest = "donor_package_step_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectVersioningStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectVersioningStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectVersioningStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 donor_package: Optional['outputs.ProjectVersioningStrategyDonorPackage'] = None,
                 donor_package_step_id: Optional[str] = None,
                 template: Optional[str] = None):
        if donor_package is not None:
            pulumi.set(__self__, "donor_package", donor_package)
        if donor_package_step_id is not None:
            pulumi.set(__self__, "donor_package_step_id", donor_package_step_id)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="donorPackage")
    def donor_package(self) -> Optional['outputs.ProjectVersioningStrategyDonorPackage']:
        return pulumi.get(self, "donor_package")

    @property
    @pulumi.getter(name="donorPackageStepId")
    def donor_package_step_id(self) -> Optional[str]:
        return pulumi.get(self, "donor_package_step_id")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")


@pulumi.output_type
class ProjectVersioningStrategyDonorPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentAction":
            suggest = "deployment_action"
        elif key == "packageReference":
            suggest = "package_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectVersioningStrategyDonorPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectVersioningStrategyDonorPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectVersioningStrategyDonorPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class RunbookConnectivityPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowDeploymentsToNoTargets":
            suggest = "allow_deployments_to_no_targets"
        elif key == "excludeUnhealthyTargets":
            suggest = "exclude_unhealthy_targets"
        elif key == "skipMachineBehavior":
            suggest = "skip_machine_behavior"
        elif key == "targetRoles":
            suggest = "target_roles"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookConnectivityPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookConnectivityPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookConnectivityPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_deployments_to_no_targets: Optional[bool] = None,
                 exclude_unhealthy_targets: Optional[bool] = None,
                 skip_machine_behavior: Optional[str] = None,
                 target_roles: Optional[Sequence[str]] = None):
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if exclude_unhealthy_targets is not None:
            pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[bool]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[str]:
        return pulumi.get(self, "skip_machine_behavior")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_roles")


@pulumi.output_type
class RunbookProcessStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyTerraformTemplateActions":
            suggest = "apply_terraform_template_actions"
        elif key == "conditionExpression":
            suggest = "condition_expression"
        elif key == "deployKubernetesSecretActions":
            suggest = "deploy_kubernetes_secret_actions"
        elif key == "deployPackageActions":
            suggest = "deploy_package_actions"
        elif key == "deployWindowsServiceActions":
            suggest = "deploy_windows_service_actions"
        elif key == "manualInterventionActions":
            suggest = "manual_intervention_actions"
        elif key == "packageRequirement":
            suggest = "package_requirement"
        elif key == "runKubectlScriptActions":
            suggest = "run_kubectl_script_actions"
        elif key == "runScriptActions":
            suggest = "run_script_actions"
        elif key == "startTrigger":
            suggest = "start_trigger"
        elif key == "targetRoles":
            suggest = "target_roles"
        elif key == "windowSize":
            suggest = "window_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 actions: Optional[Sequence['outputs.RunbookProcessStepAction']] = None,
                 apply_terraform_template_actions: Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateAction']] = None,
                 condition: Optional[str] = None,
                 condition_expression: Optional[str] = None,
                 deploy_kubernetes_secret_actions: Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretAction']] = None,
                 deploy_package_actions: Optional[Sequence['outputs.RunbookProcessStepDeployPackageAction']] = None,
                 deploy_windows_service_actions: Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceAction']] = None,
                 id: Optional[str] = None,
                 manual_intervention_actions: Optional[Sequence['outputs.RunbookProcessStepManualInterventionAction']] = None,
                 package_requirement: Optional[str] = None,
                 properties: Optional[Mapping[str, Any]] = None,
                 run_kubectl_script_actions: Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptAction']] = None,
                 run_script_actions: Optional[Sequence['outputs.RunbookProcessStepRunScriptAction']] = None,
                 start_trigger: Optional[str] = None,
                 target_roles: Optional[Sequence[str]] = None,
                 window_size: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param str condition: When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        :param str condition_expression: The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        :param str id: The unique ID for this resource.
        :param str package_requirement: Whether to run this step before or after package acquisition (if possible)
        :param str start_trigger: Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        :param Sequence[str] target_roles: The roles that this step run against, or runs on behalf of
        :param str window_size: The maximum number of targets to deploy to simultaneously
        """
        pulumi.set(__self__, "name", name)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if apply_terraform_template_actions is not None:
            pulumi.set(__self__, "apply_terraform_template_actions", apply_terraform_template_actions)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if deploy_kubernetes_secret_actions is not None:
            pulumi.set(__self__, "deploy_kubernetes_secret_actions", deploy_kubernetes_secret_actions)
        if deploy_package_actions is not None:
            pulumi.set(__self__, "deploy_package_actions", deploy_package_actions)
        if deploy_windows_service_actions is not None:
            pulumi.set(__self__, "deploy_windows_service_actions", deploy_windows_service_actions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manual_intervention_actions is not None:
            pulumi.set(__self__, "manual_intervention_actions", manual_intervention_actions)
        if package_requirement is not None:
            pulumi.set(__self__, "package_requirement", package_requirement)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_kubectl_script_actions is not None:
            pulumi.set(__self__, "run_kubectl_script_actions", run_kubectl_script_actions)
        if run_script_actions is not None:
            pulumi.set(__self__, "run_script_actions", run_script_actions)
        if start_trigger is not None:
            pulumi.set(__self__, "start_trigger", start_trigger)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.RunbookProcessStepAction']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="applyTerraformTemplateActions")
    def apply_terraform_template_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateAction']]:
        return pulumi.get(self, "apply_terraform_template_actions")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[str]:
        """
        The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        """
        return pulumi.get(self, "condition_expression")

    @property
    @pulumi.getter(name="deployKubernetesSecretActions")
    def deploy_kubernetes_secret_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretAction']]:
        return pulumi.get(self, "deploy_kubernetes_secret_actions")

    @property
    @pulumi.getter(name="deployPackageActions")
    def deploy_package_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployPackageAction']]:
        return pulumi.get(self, "deploy_package_actions")

    @property
    @pulumi.getter(name="deployWindowsServiceActions")
    def deploy_windows_service_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceAction']]:
        return pulumi.get(self, "deploy_windows_service_actions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="manualInterventionActions")
    def manual_intervention_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepManualInterventionAction']]:
        return pulumi.get(self, "manual_intervention_actions")

    @property
    @pulumi.getter(name="packageRequirement")
    def package_requirement(self) -> Optional[str]:
        """
        Whether to run this step before or after package acquisition (if possible)
        """
        return pulumi.get(self, "package_requirement")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runKubectlScriptActions")
    def run_kubectl_script_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptAction']]:
        return pulumi.get(self, "run_kubectl_script_actions")

    @property
    @pulumi.getter(name="runScriptActions")
    def run_script_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepRunScriptAction']]:
        return pulumi.get(self, "run_script_actions")

    @property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> Optional[str]:
        """
        Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        """
        return pulumi.get(self, "start_trigger")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[Sequence[str]]:
        """
        The roles that this step run against, or runs on behalf of
        """
        return pulumi.get(self, "target_roles")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[str]:
        """
        The maximum number of targets to deploy to simultaneously
        """
        return pulumi.get(self, "window_size")


@pulumi.output_type
class RunbookProcessStepAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: str,
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepActionPackage']] = None,
                 primary_package: Optional['outputs.RunbookProcessStepActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.RunbookProcessStepActionPrimaryPackage']:
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class RunbookProcessStepActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advancedOptions":
            suggest = "advanced_options"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "awsAccount":
            suggest = "aws_account"
        elif key == "azureAccount":
            suggest = "azure_account"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "googleCloudAccount":
            suggest = "google_cloud_account"
        elif key == "inlineTemplate":
            suggest = "inline_template"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "templateParameters":
            suggest = "template_parameters"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advanced_options: 'outputs.RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions',
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionActionTemplate'] = None,
                 aws_account: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccount'] = None,
                 azure_account: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAzureAccount'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 google_cloud_account: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount'] = None,
                 id: Optional[str] = None,
                 inline_template: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateActionPackage']] = None,
                 primary_package: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 template: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionTemplate'] = None,
                 template_parameters: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if aws_account is not None:
            pulumi.set(__self__, "aws_account", aws_account)
        if azure_account is not None:
            pulumi.set(__self__, "azure_account", azure_account)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if google_cloud_account is not None:
            pulumi.set(__self__, "google_cloud_account", google_cloud_account)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inline_template is not None:
            pulumi.set(__self__, "inline_template", inline_template)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> 'outputs.RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions':
        return pulumi.get(self, "advanced_options")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="awsAccount")
    def aws_account(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccount']:
        return pulumi.get(self, "aws_account")

    @property
    @pulumi.getter(name="azureAccount")
    def azure_account(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAzureAccount']:
        return pulumi.get(self, "azure_account")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="googleCloudAccount")
    def google_cloud_account(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount']:
        return pulumi.get(self, "google_cloud_account")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inlineTemplate")
    def inline_template(self) -> Optional[str]:
        return pulumi.get(self, "inline_template")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage']:
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionTemplate']:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[str]:
        return pulumi.get(self, "template_parameters")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAdditionalPluginDownloads":
            suggest = "allow_additional_plugin_downloads"
        elif key == "applyParameters":
            suggest = "apply_parameters"
        elif key == "initParameters":
            suggest = "init_parameters"
        elif key == "pluginCacheDirectory":
            suggest = "plugin_cache_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_additional_plugin_downloads: Optional[bool] = None,
                 apply_parameters: Optional[str] = None,
                 init_parameters: Optional[str] = None,
                 plugin_cache_directory: Optional[str] = None,
                 workspace: Optional[str] = None):
        if allow_additional_plugin_downloads is not None:
            pulumi.set(__self__, "allow_additional_plugin_downloads", allow_additional_plugin_downloads)
        if apply_parameters is not None:
            pulumi.set(__self__, "apply_parameters", apply_parameters)
        if init_parameters is not None:
            pulumi.set(__self__, "init_parameters", init_parameters)
        if plugin_cache_directory is not None:
            pulumi.set(__self__, "plugin_cache_directory", plugin_cache_directory)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="allowAdditionalPluginDownloads")
    def allow_additional_plugin_downloads(self) -> Optional[bool]:
        return pulumi.get(self, "allow_additional_plugin_downloads")

    @property
    @pulumi.getter(name="applyParameters")
    def apply_parameters(self) -> Optional[str]:
        return pulumi.get(self, "apply_parameters")

    @property
    @pulumi.getter(name="initParameters")
    def init_parameters(self) -> Optional[str]:
        return pulumi.get(self, "init_parameters")

    @property
    @pulumi.getter(name="pluginCacheDirectory")
    def plugin_cache_directory(self) -> Optional[str]:
        return pulumi.get(self, "plugin_cache_directory")

    @property
    @pulumi.getter
    def workspace(self) -> Optional[str]:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionAwsAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useInstanceRole":
            suggest = "use_instance_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionAwsAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAwsAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAwsAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: Optional[str] = None,
                 role: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole'] = None,
                 use_instance_role: Optional[bool] = None,
                 variable: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole']:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"
        elif key == "roleSessionName":
            suggest = "role_session_name"
        elif key == "sessionDuration":
            suggest = "session_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 external_id: Optional[str] = None,
                 role_session_name: Optional[str] = None,
                 session_duration: Optional[int] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_session_name is not None:
            pulumi.set(__self__, "role_session_name", role_session_name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="roleSessionName")
    def role_session_name(self) -> Optional[str]:
        return pulumi.get(self, "role_session_name")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionAzureAccount(dict):
    def __init__(__self__, *,
                 variable: Optional[str] = None):
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_vm_service_account: Optional[bool] = None,
                 variable: Optional[str] = None,
                 zone: Optional[str] = None):
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVariableFiles":
            suggest = "additional_variable_files"
        elif key == "runAutomaticFileSubstitution":
            suggest = "run_automatic_file_substitution"
        elif key == "targetFiles":
            suggest = "target_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_variable_files: Optional[str] = None,
                 directory: Optional[str] = None,
                 run_automatic_file_substitution: Optional[bool] = None,
                 target_files: Optional[str] = None):
        if additional_variable_files is not None:
            pulumi.set(__self__, "additional_variable_files", additional_variable_files)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if run_automatic_file_substitution is not None:
            pulumi.set(__self__, "run_automatic_file_substitution", run_automatic_file_substitution)
        if target_files is not None:
            pulumi.set(__self__, "target_files", target_files)

    @property
    @pulumi.getter(name="additionalVariableFiles")
    def additional_variable_files(self) -> Optional[str]:
        return pulumi.get(self, "additional_variable_files")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter(name="runAutomaticFileSubstitution")
    def run_automatic_file_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "run_automatic_file_substitution")

    @property
    @pulumi.getter(name="targetFiles")
    def target_files(self) -> Optional[str]:
        return pulumi.get(self, "target_files")


@pulumi.output_type
class RunbookProcessStepDeployKubernetesSecretAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"
        elif key == "secretValues":
            suggest = "secret_values"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployKubernetesSecretAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployKubernetesSecretAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployKubernetesSecretAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 secret_name: str,
                 secret_values: Mapping[str, str],
                 action_template: Optional['outputs.RunbookProcessStepDeployKubernetesSecretActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_values", secret_values)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretValues")
    def secret_values(self) -> Mapping[str, str]:
        return pulumi.get(self, "secret_values")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepDeployKubernetesSecretActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class RunbookProcessStepDeployKubernetesSecretActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployKubernetesSecretActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepDeployKubernetesSecretActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployKubernetesSecretActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepDeployKubernetesSecretActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployKubernetesSecretActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepDeployPackageAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryPackage":
            suggest = "primary_package"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "windowsService":
            suggest = "windows_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 primary_package: 'outputs.RunbookProcessStepDeployPackageActionPrimaryPackage',
                 action_template: Optional['outputs.RunbookProcessStepDeployPackageActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepDeployPackageActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepDeployPackageActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 windows_service: Optional['outputs.RunbookProcessStepDeployPackageActionWindowsService'] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if windows_service is not None:
            pulumi.set(__self__, "windows_service", windows_service)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> 'outputs.RunbookProcessStepDeployPackageActionPrimaryPackage':
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepDeployPackageActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployPackageActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployPackageActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="windowsService")
    def windows_service(self) -> Optional['outputs.RunbookProcessStepDeployPackageActionWindowsService']:
        return pulumi.get(self, "windows_service")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionWindowsService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executablePath":
            suggest = "executable_path"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "createOrUpdateService":
            suggest = "create_or_update_service"
        elif key == "customAccountName":
            suggest = "custom_account_name"
        elif key == "customAccountPassword":
            suggest = "custom_account_password"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "startMode":
            suggest = "start_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionWindowsService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionWindowsService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionWindowsService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 executable_path: str,
                 service_name: str,
                 arguments: Optional[str] = None,
                 create_or_update_service: Optional[bool] = None,
                 custom_account_name: Optional[str] = None,
                 custom_account_password: Optional[str] = None,
                 dependencies: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 service_account: Optional[str] = None,
                 start_mode: Optional[str] = None):
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "service_name", service_name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> str:
        return pulumi.get(self, "executable_path")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_or_update_service")

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_account_name")

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[str]:
        return pulumi.get(self, "custom_account_password")

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[str]:
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[str]:
        return pulumi.get(self, "start_mode")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executablePath":
            suggest = "executable_path"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "createOrUpdateService":
            suggest = "create_or_update_service"
        elif key == "customAccountName":
            suggest = "custom_account_name"
        elif key == "customAccountPassword":
            suggest = "custom_account_password"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "startMode":
            suggest = "start_mode"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 executable_path: str,
                 name: str,
                 primary_package: 'outputs.RunbookProcessStepDeployWindowsServiceActionPrimaryPackage',
                 service_name: str,
                 action_template: Optional['outputs.RunbookProcessStepDeployWindowsServiceActionActionTemplate'] = None,
                 arguments: Optional[str] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceActionContainer']] = None,
                 create_or_update_service: Optional[bool] = None,
                 custom_account_name: Optional[str] = None,
                 custom_account_password: Optional[str] = None,
                 dependencies: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 service_account: Optional[str] = None,
                 start_mode: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        pulumi.set(__self__, "service_name", service_name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> str:
        return pulumi.get(self, "executable_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> 'outputs.RunbookProcessStepDeployWindowsServiceActionPrimaryPackage':
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepDeployWindowsServiceActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_or_update_service")

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_account_name")

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[str]:
        return pulumi.get(self, "custom_account_password")

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[str]:
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[str]:
        return pulumi.get(self, "start_mode")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepManualInterventionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "responsibleTeams":
            suggest = "responsible_teams"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepManualInterventionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepManualInterventionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepManualInterventionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instructions: str,
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepManualInterventionActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepManualInterventionActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepManualInterventionActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 responsible_teams: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "instructions", instructions)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if responsible_teams is not None:
            pulumi.set(__self__, "responsible_teams", responsible_teams)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def instructions(self) -> str:
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepManualInterventionActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepManualInterventionActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepManualInterventionActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="responsibleTeams")
    def responsible_teams(self) -> Optional[str]:
        return pulumi.get(self, "responsible_teams")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class RunbookProcessStepManualInterventionActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepManualInterventionActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepManualInterventionActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepManualInterventionActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepManualInterventionActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepManualInterventionActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepManualInterventionActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepManualInterventionActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepManualInterventionActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepManualInterventionActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepManualInterventionActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepManualInterventionActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "scriptFileName":
            suggest = "script_file_name"
        elif key == "scriptParameters":
            suggest = "script_parameters"
        elif key == "scriptSource":
            suggest = "script_source"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepRunKubectlScriptActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptActionPackage']] = None,
                 primary_package: Optional['outputs.RunbookProcessStepRunKubectlScriptActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 script_file_name: Optional[str] = None,
                 script_parameters: Optional[str] = None,
                 script_source: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepRunKubectlScriptActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.RunbookProcessStepRunKubectlScriptActionPrimaryPackage']:
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        return pulumi.get(self, "script_file_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[str]:
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[str]:
        return pulumi.get(self, "script_source")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepRunScriptAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "scriptBody":
            suggest = "script_body"
        elif key == "scriptFileName":
            suggest = "script_file_name"
        elif key == "scriptParameters":
            suggest = "script_parameters"
        elif key == "scriptSource":
            suggest = "script_source"
        elif key == "scriptSyntax":
            suggest = "script_syntax"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "variableSubstitutionInFiles":
            suggest = "variable_substitution_in_files"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepRunScriptActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepRunScriptActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepRunScriptActionPackage']] = None,
                 primary_package: Optional['outputs.RunbookProcessStepRunScriptActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 script_body: Optional[str] = None,
                 script_file_name: Optional[str] = None,
                 script_parameters: Optional[str] = None,
                 script_source: Optional[str] = None,
                 script_syntax: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 variable_substitution_in_files: Optional[str] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepRunScriptActionActionTemplate']:
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepRunScriptActionContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepRunScriptActionPackage']]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.RunbookProcessStepRunScriptActionPrimaryPackage']:
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        return pulumi.get(self, "script_file_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[str]:
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[str]:
        return pulumi.get(self, "script_source")

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[str]:
        return pulumi.get(self, "script_syntax")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[str]:
        return pulumi.get(self, "variable_substitution_in_files")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class RunbookProcessStepRunScriptActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The unique ID for this resource.
        :param int version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepRunScriptActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepRunScriptActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepRunScriptActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None):
        """
        :param int quantity_to_keep: How many runs to keep per environment.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        How many runs to keep per environment.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")


@pulumi.output_type
class ScriptModuleScript(dict):
    def __init__(__self__, *,
                 body: str,
                 syntax: str):
        """
        :param str body: The body of this script module.
        :param str syntax: The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "syntax", syntax)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The body of this script module.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def syntax(self) -> str:
        """
        The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        return pulumi.get(self, "syntax")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.SshConnectionDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 containers: Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.SshConnectionDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class TeamExternalSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayIdAndName":
            suggest = "display_id_and_name"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamExternalSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamExternalSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamExternalSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_id_and_name: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        if display_id_and_name is not None:
            pulumi.set(__self__, "display_id_and_name", display_id_and_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayIdAndName")
    def display_id_and_name(self) -> Optional[bool]:
        return pulumi.get(self, "display_id_and_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class TeamUserRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spaceId":
            suggest = "space_id"
        elif key == "userRoleId":
            suggest = "user_role_id"
        elif key == "environmentIds":
            suggest = "environment_ids"
        elif key == "projectGroupIds":
            suggest = "project_group_ids"
        elif key == "projectIds":
            suggest = "project_ids"
        elif key == "teamId":
            suggest = "team_id"
        elif key == "tenantIds":
            suggest = "tenant_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamUserRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamUserRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamUserRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 space_id: str,
                 user_role_id: str,
                 environment_ids: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 project_group_ids: Optional[Sequence[str]] = None,
                 project_ids: Optional[Sequence[str]] = None,
                 team_id: Optional[str] = None,
                 tenant_ids: Optional[Sequence[str]] = None):
        """
        :param str space_id: The space associated with this team.
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "user_role_id", user_role_id)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if project_group_ids is not None:
            pulumi.set(__self__, "project_group_ids", project_group_ids)
        if project_ids is not None:
            pulumi.set(__self__, "project_ids", project_ids)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space associated with this team.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="userRoleId")
    def user_role_id(self) -> str:
        return pulumi.get(self, "user_role_id")

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectGroupIds")
    def project_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "project_group_ids")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[str]:
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_ids")


@pulumi.output_type
class TenantProjectEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TenantProjectEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TenantProjectEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TenantProjectEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environments: Sequence[str],
                 project_id: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this tenant through a project.
        :param str project_id: The project ID associated with this tenant.
        """
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this tenant through a project.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The project ID associated with this tenant.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class UserIdentity(dict):
    def __init__(__self__, *,
                 claims: Optional[Sequence['outputs.UserIdentityClaim']] = None,
                 provider: Optional[str] = None):
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def claims(self) -> Optional[Sequence['outputs.UserIdentityClaim']]:
        return pulumi.get(self, "claims")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")


@pulumi.output_type
class UserIdentityClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isIdentifyingClaim":
            suggest = "is_identifying_claim"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_identifying_claim: bool,
                 name: str,
                 value: str):
        pulumi.set(__self__, "is_identifying_claim", is_identifying_claim)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isIdentifyingClaim")
    def is_identifying_claim(self) -> bool:
        return pulumi.get(self, "is_identifying_claim")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class VariablePrompt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displaySettings":
            suggest = "display_settings"
        elif key == "isRequired":
            suggest = "is_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariablePrompt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariablePrompt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariablePrompt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_settings: Optional['outputs.VariablePromptDisplaySettings'] = None,
                 is_required: Optional[bool] = None,
                 label: Optional[str] = None):
        """
        :param str description: The description of this variable prompt option.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of this variable prompt option.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional['outputs.VariablePromptDisplaySettings']:
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class VariablePromptDisplaySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlType":
            suggest = "control_type"
        elif key == "selectOptions":
            suggest = "select_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariablePromptDisplaySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariablePromptDisplaySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariablePromptDisplaySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_type: str,
                 select_options: Optional[Sequence['outputs.VariablePromptDisplaySettingsSelectOption']] = None):
        pulumi.set(__self__, "control_type", control_type)
        if select_options is not None:
            pulumi.set(__self__, "select_options", select_options)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> str:
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter(name="selectOptions")
    def select_options(self) -> Optional[Sequence['outputs.VariablePromptDisplaySettingsSelectOption']]:
        return pulumi.get(self, "select_options")


@pulumi.output_type
class VariablePromptDisplaySettingsSelectOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariablePromptDisplaySettingsSelectOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariablePromptDisplaySettingsSelectOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariablePromptDisplaySettingsSelectOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 value: str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class VariableScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariableScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariableScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariableScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 channels: Optional[Sequence[str]] = None,
                 environments: Optional[Sequence[str]] = None,
                 machines: Optional[Sequence[str]] = None,
                 roles: Optional[Sequence[str]] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] actions: A list of actions that are scoped to this variable value.
        :param Sequence[str] channels: A list of channels that are scoped to this variable value.
        :param Sequence[str] environments: A list of environments that are scoped to this variable value.
        :param Sequence[str] machines: A list of machines that are scoped to this variable value.
        :param Sequence[str] roles: A list of roles that are scoped to this variable value.
        :param Sequence[str] tenant_tags: A list of tenant tags that are scoped to this variable value.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        A list of actions that are scoped to this variable value.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        A list of channels that are scoped to this variable value.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        A list of environments that are scoped to this variable value.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def machines(self) -> Optional[Sequence[str]]:
        """
        A list of machines that are scoped to this variable value.
        """
        return pulumi.get(self, "machines")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        A list of roles that are scoped to this variable value.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags that are scoped to this variable value.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 account_type: str,
                 active_directory_endpoint_base_uri: str,
                 application_id: str,
                 authentication_endpoint: str,
                 azure_environment: str,
                 certificate_data: str,
                 certificate_thumbprint: str,
                 client_secret: str,
                 description: str,
                 environments: Sequence[str],
                 id: str,
                 name: str,
                 password: str,
                 private_key_file: str,
                 private_key_passphrase: str,
                 resource_manager_endpoint: str,
                 secret_key: str,
                 service_management_endpoint_base_uri: str,
                 service_management_endpoint_suffix: str,
                 space_id: str,
                 subscription_id: str,
                 tenant_id: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 token: str,
                 username: str):
        """
        :param str account_type: A filter to search by a list of account types.  Valid account types are `AmazonWebServicesAccount`, `AmazonWebServicesRoleAccount`, `AzureServicePrincipal`, `AzureSubscription`, `None`, `SshKeyPair`, `Token`, or `UsernamePassword`.
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "active_directory_endpoint_base_uri", active_directory_endpoint_base_uri)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "authentication_endpoint", authentication_endpoint)
        pulumi.set(__self__, "azure_environment", azure_environment)
        pulumi.set(__self__, "certificate_data", certificate_data)
        pulumi.set(__self__, "certificate_thumbprint", certificate_thumbprint)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "private_key_file", private_key_file)
        pulumi.set(__self__, "private_key_passphrase", private_key_passphrase)
        pulumi.set(__self__, "resource_manager_endpoint", resource_manager_endpoint)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "service_management_endpoint_base_uri", service_management_endpoint_base_uri)
        pulumi.set(__self__, "service_management_endpoint_suffix", service_management_endpoint_suffix)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> str:
        """
        A filter to search by a list of account types.  Valid account types are `AmazonWebServicesAccount`, `AmazonWebServicesRoleAccount`, `AzureServicePrincipal`, `AzureSubscription`, `None`, `SshKeyPair`, `Token`, or `UsernamePassword`.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="activeDirectoryEndpointBaseUri")
    def active_directory_endpoint_base_uri(self) -> str:
        return pulumi.get(self, "active_directory_endpoint_base_uri")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="authenticationEndpoint")
    def authentication_endpoint(self) -> str:
        return pulumi.get(self, "authentication_endpoint")

    @property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> str:
        return pulumi.get(self, "azure_environment")

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> str:
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="certificateThumbprint")
    def certificate_thumbprint(self) -> str:
        return pulumi.get(self, "certificate_thumbprint")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKeyFile")
    def private_key_file(self) -> str:
        return pulumi.get(self, "private_key_file")

    @property
    @pulumi.getter(name="privateKeyPassphrase")
    def private_key_passphrase(self) -> str:
        return pulumi.get(self, "private_key_passphrase")

    @property
    @pulumi.getter(name="resourceManagerEndpoint")
    def resource_manager_endpoint(self) -> str:
        return pulumi.get(self, "resource_manager_endpoint")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="serviceManagementEndpointBaseUri")
    def service_management_endpoint_base_uri(self) -> str:
        return pulumi.get(self, "service_management_endpoint_base_uri")

    @property
    @pulumi.getter(name="serviceManagementEndpointSuffix")
    def service_management_endpoint_suffix(self) -> str:
        return pulumi.get(self, "service_management_endpoint_suffix")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 cloud_service_name: str,
                 default_worker_pool_id: str,
                 endpoints: Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 slot: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 storage_account_name: str,
                 swap_if_possible: bool,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str,
                 use_current_instance_count: bool):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "slot", slot)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> str:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> str:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter
    def slot(self) -> str:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> str:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> bool:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> bool:
        return pulumi.get(self, "use_current_instance_count")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 aad_client_credential_secret: str,
                 aad_credential_type: str,
                 aad_user_credential_password: str,
                 aad_user_credential_username: str,
                 certificate_store_location: str,
                 certificate_store_name: str,
                 client_certificate_variable: str,
                 connection_endpoint: str,
                 endpoints: Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 security_mode: str,
                 server_certificate_thumbprint: str,
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        pulumi.set(__self__, "aad_user_credential_password", aad_user_credential_password)
        pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "security_mode", security_mode)
        pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> str:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> str:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialPassword")
    def aad_user_credential_password(self) -> str:
        return pulumi.get(self, "aad_user_credential_password")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> str:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> str:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> str:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> str:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> str:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> str:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> str:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 endpoints: Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 resource_group_name: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str,
                 web_app_name: str,
                 web_app_slot_name: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "web_app_name", web_app_name)
        pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> str:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> str:
        return pulumi.get(self, "web_app_slot_name")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 archived: str,
                 certificate_data: str,
                 certificate_data_format: str,
                 environments: Sequence[str],
                 has_private_key: bool,
                 id: str,
                 is_expired: bool,
                 issuer_common_name: str,
                 issuer_distinguished_name: str,
                 issuer_organization: str,
                 name: str,
                 not_after: str,
                 not_before: str,
                 notes: str,
                 password: str,
                 replaced_by: str,
                 self_signed: bool,
                 serial_number: str,
                 signature_algorithm_name: str,
                 subject_alternative_names: Sequence[str],
                 subject_common_name: str,
                 subject_distinguished_name: str,
                 subject_organization: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 version: int):
        """
        :param str archived: A filter to search for resources that have been archived.
        :param str certificate_data: The encoded data of the certificate.
        :param str certificate_data_format: Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param bool has_private_key: Indicates if the certificate has a private key.
        :param str id: The unique ID for this resource.
        :param bool is_expired: Indicates if the certificate has expired.
        :param str name: The name of this resource.
        :param str password: The password associated with this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "archived", archived)
        pulumi.set(__self__, "certificate_data", certificate_data)
        pulumi.set(__self__, "certificate_data_format", certificate_data_format)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_private_key", has_private_key)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_expired", is_expired)
        pulumi.set(__self__, "issuer_common_name", issuer_common_name)
        pulumi.set(__self__, "issuer_distinguished_name", issuer_distinguished_name)
        pulumi.set(__self__, "issuer_organization", issuer_organization)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "not_after", not_after)
        pulumi.set(__self__, "not_before", not_before)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "replaced_by", replaced_by)
        pulumi.set(__self__, "self_signed", self_signed)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "signature_algorithm_name", signature_algorithm_name)
        pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        pulumi.set(__self__, "subject_common_name", subject_common_name)
        pulumi.set(__self__, "subject_distinguished_name", subject_distinguished_name)
        pulumi.set(__self__, "subject_organization", subject_organization)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def archived(self) -> str:
        """
        A filter to search for resources that have been archived.
        """
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> str:
        """
        The encoded data of the certificate.
        """
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="certificateDataFormat")
    def certificate_data_format(self) -> str:
        """
        Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        """
        return pulumi.get(self, "certificate_data_format")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasPrivateKey")
    def has_private_key(self) -> bool:
        """
        Indicates if the certificate has a private key.
        """
        return pulumi.get(self, "has_private_key")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExpired")
    def is_expired(self) -> bool:
        """
        Indicates if the certificate has expired.
        """
        return pulumi.get(self, "is_expired")

    @property
    @pulumi.getter(name="issuerCommonName")
    def issuer_common_name(self) -> str:
        return pulumi.get(self, "issuer_common_name")

    @property
    @pulumi.getter(name="issuerDistinguishedName")
    def issuer_distinguished_name(self) -> str:
        return pulumi.get(self, "issuer_distinguished_name")

    @property
    @pulumi.getter(name="issuerOrganization")
    def issuer_organization(self) -> str:
        return pulumi.get(self, "issuer_organization")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> str:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> str:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter
    def notes(self) -> str:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="replacedBy")
    def replaced_by(self) -> str:
        return pulumi.get(self, "replaced_by")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> bool:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="signatureAlgorithmName")
    def signature_algorithm_name(self) -> str:
        return pulumi.get(self, "signature_algorithm_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Sequence[str]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCommonName")
    def subject_common_name(self) -> str:
        return pulumi.get(self, "subject_common_name")

    @property
    @pulumi.getter(name="subjectDistinguishedName")
    def subject_distinguished_name(self) -> str:
        return pulumi.get(self, "subject_distinguished_name")

    @property
    @pulumi.getter(name="subjectOrganization")
    def subject_organization(self) -> str:
        return pulumi.get(self, "subject_organization")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetChannelsChannelResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 is_default: bool,
                 lifecycle_id: str,
                 name: str,
                 project_id: str,
                 rules: Sequence['outputs.GetChannelsChannelRuleResult'],
                 space_id: str,
                 tenant_tags: Sequence[str]):
        """
        :param str description: The description of this channel.
        :param str id: The unique ID for this resource.
        :param bool is_default: Indicates if this is the default channel for the associated project.
        :param str lifecycle_id: The lifecycle ID associated with this channel.
        :param str name: The name of this resource.
        :param str project_id: The project ID associated with this channel.
        :param Sequence['GetChannelsChannelRuleArgs'] rules: A list of rules associated with this channel.
        :param str space_id: The space ID associated with this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "lifecycle_id", lifecycle_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this channel.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates if this is the default channel for the associated project.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> str:
        """
        The lifecycle ID associated with this channel.
        """
        return pulumi.get(self, "lifecycle_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The project ID associated with this channel.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetChannelsChannelRuleResult']:
        """
        A list of rules associated with this channel.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class GetChannelsChannelRuleResult(dict):
    def __init__(__self__, *,
                 action_packages: Sequence['outputs.GetChannelsChannelRuleActionPackageResult'],
                 id: str,
                 tag: Optional[str] = None,
                 version_range: Optional[str] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "action_packages", action_packages)
        pulumi.set(__self__, "id", id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter(name="actionPackages")
    def action_packages(self) -> Sequence['outputs.GetChannelsChannelRuleActionPackageResult']:
        return pulumi.get(self, "action_packages")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetChannelsChannelRuleActionPackageResult(dict):
    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 default_worker_pool_id: str,
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> str:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 endpoints: Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetDeploymentTargetsDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The ID of this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetDeploymentTargetsDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetEnvironmentsEnvironmentResult(dict):
    def __init__(__self__, *,
                 allow_dynamic_infrastructure: bool,
                 description: str,
                 id: str,
                 jira_extension_settings: Sequence['outputs.GetEnvironmentsEnvironmentJiraExtensionSettingResult'],
                 jira_service_management_extension_settings: Sequence['outputs.GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingResult'],
                 name: str,
                 servicenow_extension_settings: Sequence['outputs.GetEnvironmentsEnvironmentServicenowExtensionSettingResult'],
                 slug: str,
                 sort_order: int,
                 space_id: str,
                 use_guided_failure: bool):
        """
        :param str description: The description of this environment.
        :param str id: The unique ID for this resource.
        :param Sequence['GetEnvironmentsEnvironmentJiraExtensionSettingArgs'] jira_extension_settings: Provides extension settings for the Jira integration for this environment.
        :param Sequence['GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs'] jira_service_management_extension_settings: Provides extension settings for the Jira Service Management (JSM) integration for this environment.
        :param str name: The name of this resource.
        :param Sequence['GetEnvironmentsEnvironmentServicenowExtensionSettingArgs'] servicenow_extension_settings: Provides extension settings for the ServiceNow integration for this environment.
        :param int sort_order: The order number to sort an environment.
        :param str space_id: The space ID associated with this environment.
        """
        pulumi.set(__self__, "allow_dynamic_infrastructure", allow_dynamic_infrastructure)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "jira_extension_settings", jira_extension_settings)
        pulumi.set(__self__, "jira_service_management_extension_settings", jira_service_management_extension_settings)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "servicenow_extension_settings", servicenow_extension_settings)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "use_guided_failure", use_guided_failure)

    @property
    @pulumi.getter(name="allowDynamicInfrastructure")
    def allow_dynamic_infrastructure(self) -> bool:
        return pulumi.get(self, "allow_dynamic_infrastructure")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this environment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jiraExtensionSettings")
    def jira_extension_settings(self) -> Sequence['outputs.GetEnvironmentsEnvironmentJiraExtensionSettingResult']:
        """
        Provides extension settings for the Jira integration for this environment.
        """
        return pulumi.get(self, "jira_extension_settings")

    @property
    @pulumi.getter(name="jiraServiceManagementExtensionSettings")
    def jira_service_management_extension_settings(self) -> Sequence['outputs.GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingResult']:
        """
        Provides extension settings for the Jira Service Management (JSM) integration for this environment.
        """
        return pulumi.get(self, "jira_service_management_extension_settings")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="servicenowExtensionSettings")
    def servicenow_extension_settings(self) -> Sequence['outputs.GetEnvironmentsEnvironmentServicenowExtensionSettingResult']:
        """
        Provides extension settings for the ServiceNow integration for this environment.
        """
        return pulumi.get(self, "servicenow_extension_settings")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> int:
        """
        The order number to sort an environment.
        """
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this environment.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="useGuidedFailure")
    def use_guided_failure(self) -> bool:
        return pulumi.get(self, "use_guided_failure")


@pulumi.output_type
class GetEnvironmentsEnvironmentJiraExtensionSettingResult(dict):
    def __init__(__self__, *,
                 environment_type: str):
        pulumi.set(__self__, "environment_type", environment_type)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> str:
        return pulumi.get(self, "environment_type")


@pulumi.output_type
class GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetEnvironmentsEnvironmentServicenowExtensionSettingResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFeedsFeedResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 api_version: str,
                 delete_unreleased_packages_after_days: int,
                 download_attempts: int,
                 download_retry_backoff_seconds: int,
                 feed_type: str,
                 feed_uri: str,
                 id: str,
                 is_enhanced_mode: bool,
                 name: str,
                 package_acquisition_location_options: Sequence[str],
                 password: str,
                 region: str,
                 registry_path: str,
                 secret_key: str,
                 space_id: str,
                 username: str):
        """
        :param int download_attempts: The number of times a deployment should attempt to download a package from this feed before failing.
        :param int download_retry_backoff_seconds: The number of seconds to apply as a linear back off between download attempts.
        :param str feed_type: A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
        :param str id: The unique ID for this resource.
        :param str name: A short, memorable, unique name for this feed. Example: ACME Builds.
        :param str password: The password associated with this resource.
        :param str space_id: The space ID associated with this resource.
        :param str username: The username associated with this resource.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "delete_unreleased_packages_after_days", delete_unreleased_packages_after_days)
        pulumi.set(__self__, "download_attempts", download_attempts)
        pulumi.set(__self__, "download_retry_backoff_seconds", download_retry_backoff_seconds)
        pulumi.set(__self__, "feed_type", feed_type)
        pulumi.set(__self__, "feed_uri", feed_uri)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enhanced_mode", is_enhanced_mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_acquisition_location_options", package_acquisition_location_options)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "registry_path", registry_path)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="deleteUnreleasedPackagesAfterDays")
    def delete_unreleased_packages_after_days(self) -> int:
        return pulumi.get(self, "delete_unreleased_packages_after_days")

    @property
    @pulumi.getter(name="downloadAttempts")
    def download_attempts(self) -> int:
        """
        The number of times a deployment should attempt to download a package from this feed before failing.
        """
        return pulumi.get(self, "download_attempts")

    @property
    @pulumi.getter(name="downloadRetryBackoffSeconds")
    def download_retry_backoff_seconds(self) -> int:
        """
        The number of seconds to apply as a linear back off between download attempts.
        """
        return pulumi.get(self, "download_retry_backoff_seconds")

    @property
    @pulumi.getter(name="feedType")
    def feed_type(self) -> str:
        """
        A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
        """
        return pulumi.get(self, "feed_type")

    @property
    @pulumi.getter(name="feedUri")
    def feed_uri(self) -> str:
        return pulumi.get(self, "feed_uri")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnhancedMode")
    def is_enhanced_mode(self) -> bool:
        return pulumi.get(self, "is_enhanced_mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A short, memorable, unique name for this feed. Example: ACME Builds.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageAcquisitionLocationOptions")
    def package_acquisition_location_options(self) -> Sequence[str]:
        return pulumi.get(self, "package_acquisition_location_options")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="registryPath")
    def registry_path(self) -> str:
        return pulumi.get(self, "registry_path")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetGitCredentialsGitCredentialResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 password: str,
                 space_id: str,
                 type: str,
                 username: str):
        """
        :param str description: The description of this Git credential.
        :param str id: The unique ID for this resource.
        :param str name: The name of the Git credential. This name must be unique.
        :param str password: The password for the Git credential.
        :param str space_id: The space ID associated with this resource.
        :param str type: The Git credential authentication type.
        :param str username: The username for the Git credential.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this Git credential.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Git credential. This name must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password for the Git credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the Git credential.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationResult'],
                 aws_account_authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationResult'],
                 azure_service_principal_authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationResult'],
                 certificate_authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationResult'],
                 cluster_certificate: str,
                 cluster_url: str,
                 containers: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerResult'],
                 default_worker_pool_id: str,
                 endpoints: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 gcp_account_authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationResult'],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 namespace: str,
                 operating_system: str,
                 proxy_id: str,
                 roles: Sequence[str],
                 running_in_container: bool,
                 shell_name: str,
                 shell_version: str,
                 skip_tls_verification: bool,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "aws_account_authentications", aws_account_authentications)
        pulumi.set(__self__, "azure_service_principal_authentications", azure_service_principal_authentications)
        pulumi.set(__self__, "certificate_authentications", certificate_authentications)
        pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "gcp_account_authentications", gcp_account_authentications)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "running_in_container", running_in_container)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter(name="awsAccountAuthentications")
    def aws_account_authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationResult']:
        return pulumi.get(self, "aws_account_authentications")

    @property
    @pulumi.getter(name="azureServicePrincipalAuthentications")
    def azure_service_principal_authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationResult']:
        return pulumi.get(self, "azure_service_principal_authentications")

    @property
    @pulumi.getter(name="certificateAuthentications")
    def certificate_authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationResult']:
        return pulumi.get(self, "certificate_authentications")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> str:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> str:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="gcpAccountAuthentications")
    def gcp_account_authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationResult']:
        return pulumi.get(self, "gcp_account_authentications")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> bool:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> bool:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 use_instance_role: Optional[bool] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 cluster_resource_group: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> str:
        return pulumi.get(self, "cluster_resource_group")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationResult(dict):
    def __init__(__self__, *,
                 client_certificate: Optional[str] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 project: str,
                 impersonate_service_account: Optional[bool] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "project", project)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetLibraryVariableSetsLibraryVariableSetResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 space_id: str,
                 templates: Sequence['outputs.GetLibraryVariableSetsLibraryVariableSetTemplateResult'],
                 variable_set_id: str):
        """
        :param str description: The description of this library variable set.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "templates", templates)
        pulumi.set(__self__, "variable_set_id", variable_set_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this library variable set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetLibraryVariableSetsLibraryVariableSetTemplateResult']:
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> str:
        return pulumi.get(self, "variable_set_id")


@pulumi.output_type
class GetLibraryVariableSetsLibraryVariableSetTemplateResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 default_value: Optional[str] = None,
                 display_settings: Optional[Mapping[str, Any]] = None,
                 help_text: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[str]:
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class GetLifecyclesLifecycleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 phases: Sequence['outputs.GetLifecyclesLifecyclePhaseResult'],
                 release_retention_policies: Sequence['outputs.GetLifecyclesLifecycleReleaseRetentionPolicyResult'],
                 space_id: str,
                 tentacle_retention_policies: Sequence['outputs.GetLifecyclesLifecycleTentacleRetentionPolicyResult']):
        """
        :param str description: The description of this lifecycle.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phases", phases)
        pulumi.set(__self__, "release_retention_policies", release_retention_policies)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tentacle_retention_policies", tentacle_retention_policies)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this lifecycle.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phases(self) -> Sequence['outputs.GetLifecyclesLifecyclePhaseResult']:
        return pulumi.get(self, "phases")

    @property
    @pulumi.getter(name="releaseRetentionPolicies")
    def release_retention_policies(self) -> Sequence['outputs.GetLifecyclesLifecycleReleaseRetentionPolicyResult']:
        return pulumi.get(self, "release_retention_policies")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tentacleRetentionPolicies")
    def tentacle_retention_policies(self) -> Sequence['outputs.GetLifecyclesLifecycleTentacleRetentionPolicyResult']:
        return pulumi.get(self, "tentacle_retention_policies")


@pulumi.output_type
class GetLifecyclesLifecyclePhaseResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 automatic_deployment_targets: Optional[Sequence[str]] = None,
                 is_optional_phase: Optional[bool] = None,
                 minimum_environments_before_promotion: Optional[int] = None,
                 optional_deployment_targets: Optional[Sequence[str]] = None,
                 release_retention_policy: Optional['outputs.GetLifecyclesLifecyclePhaseReleaseRetentionPolicyResult'] = None,
                 tentacle_retention_policy: Optional['outputs.GetLifecyclesLifecyclePhaseTentacleRetentionPolicyResult'] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if automatic_deployment_targets is not None:
            pulumi.set(__self__, "automatic_deployment_targets", automatic_deployment_targets)
        if is_optional_phase is not None:
            pulumi.set(__self__, "is_optional_phase", is_optional_phase)
        if minimum_environments_before_promotion is not None:
            pulumi.set(__self__, "minimum_environments_before_promotion", minimum_environments_before_promotion)
        if optional_deployment_targets is not None:
            pulumi.set(__self__, "optional_deployment_targets", optional_deployment_targets)
        if release_retention_policy is not None:
            pulumi.set(__self__, "release_retention_policy", release_retention_policy)
        if tentacle_retention_policy is not None:
            pulumi.set(__self__, "tentacle_retention_policy", tentacle_retention_policy)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="automaticDeploymentTargets")
    def automatic_deployment_targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "automatic_deployment_targets")

    @property
    @pulumi.getter(name="isOptionalPhase")
    def is_optional_phase(self) -> Optional[bool]:
        return pulumi.get(self, "is_optional_phase")

    @property
    @pulumi.getter(name="minimumEnvironmentsBeforePromotion")
    def minimum_environments_before_promotion(self) -> Optional[int]:
        return pulumi.get(self, "minimum_environments_before_promotion")

    @property
    @pulumi.getter(name="optionalDeploymentTargets")
    def optional_deployment_targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "optional_deployment_targets")

    @property
    @pulumi.getter(name="releaseRetentionPolicy")
    def release_retention_policy(self) -> Optional['outputs.GetLifecyclesLifecyclePhaseReleaseRetentionPolicyResult']:
        return pulumi.get(self, "release_retention_policy")

    @property
    @pulumi.getter(name="tentacleRetentionPolicy")
    def tentacle_retention_policy(self) -> Optional['outputs.GetLifecyclesLifecyclePhaseTentacleRetentionPolicyResult']:
        return pulumi.get(self, "tentacle_retention_policy")


@pulumi.output_type
class GetLifecyclesLifecyclePhaseReleaseRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetLifecyclesLifecyclePhaseTentacleRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetLifecyclesLifecycleReleaseRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetLifecyclesLifecycleTentacleRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 certificate_signature_algorithm: str,
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 proxy_id: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 tentacle_url: str,
                 tentacle_version_details: Sequence['outputs.GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailResult'],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this listening tentacle.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: Represents the disabled status of this deployment target.
        :param bool is_in_process: Represents the in-process status of this deployment target.
        :param str machine_policy_id: The machine policy ID that is associated with this deployment target.
        :param str name: The name of this resource.
        :param str operating_system: The operating system that is associated with this deployment target.
        :param str proxy_id: The proxy ID that is associated with this deployment target.
        :param Sequence[str] roles: A list of role IDs that are associated with this deployment target.
        :param str shell_name: The shell name associated with this deployment target.
        :param str shell_version: The shell version associated with this deployment target.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str tentacle_url: The tenant URL of this deployment target.
        :param str thumbprint: The thumbprint of this deployment target.
        :param str uri: The URI of this deployment target.
        """
        pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "tentacle_url", tentacle_url)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> str:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this listening tentacle.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        Represents the disabled status of this deployment target.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        """
        Represents the in-process status of this deployment target.
        """
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        """
        The machine policy ID that is associated with this deployment target.
        """
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        """
        The operating system that is associated with this deployment target.
        """
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        """
        The proxy ID that is associated with this deployment target.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A list of role IDs that are associated with this deployment target.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        """
        The shell name associated with this deployment target.
        """
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        """
        The shell version associated with this deployment target.
        """
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter(name="tentacleUrl")
    def tentacle_url(self) -> str:
        """
        The tenant URL of this deployment target.
        """
        return pulumi.get(self, "tentacle_url")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of this deployment target.
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The URI of this deployment target.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyResult(dict):
    def __init__(__self__, *,
                 connection_connect_timeout: int,
                 connection_retry_count_limit: int,
                 connection_retry_sleep_interval: int,
                 connection_retry_time_limit: int,
                 description: str,
                 id: str,
                 is_default: bool,
                 machine_cleanup_policies: Sequence['outputs.GetMachinePoliciesMachinePolicyMachineCleanupPolicyResult'],
                 machine_connectivity_policies: Sequence['outputs.GetMachinePoliciesMachinePolicyMachineConnectivityPolicyResult'],
                 machine_health_check_policies: Sequence['outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyResult'],
                 machine_update_policies: Sequence['outputs.GetMachinePoliciesMachinePolicyMachineUpdatePolicyResult'],
                 name: str,
                 polling_request_maximum_message_processing_timeout: int,
                 polling_request_queue_timeout: int,
                 space_id: str):
        """
        :param str description: The description of this machine policy.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "connection_connect_timeout", connection_connect_timeout)
        pulumi.set(__self__, "connection_retry_count_limit", connection_retry_count_limit)
        pulumi.set(__self__, "connection_retry_sleep_interval", connection_retry_sleep_interval)
        pulumi.set(__self__, "connection_retry_time_limit", connection_retry_time_limit)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "machine_cleanup_policies", machine_cleanup_policies)
        pulumi.set(__self__, "machine_connectivity_policies", machine_connectivity_policies)
        pulumi.set(__self__, "machine_health_check_policies", machine_health_check_policies)
        pulumi.set(__self__, "machine_update_policies", machine_update_policies)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "polling_request_maximum_message_processing_timeout", polling_request_maximum_message_processing_timeout)
        pulumi.set(__self__, "polling_request_queue_timeout", polling_request_queue_timeout)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="connectionConnectTimeout")
    def connection_connect_timeout(self) -> int:
        return pulumi.get(self, "connection_connect_timeout")

    @property
    @pulumi.getter(name="connectionRetryCountLimit")
    def connection_retry_count_limit(self) -> int:
        return pulumi.get(self, "connection_retry_count_limit")

    @property
    @pulumi.getter(name="connectionRetrySleepInterval")
    def connection_retry_sleep_interval(self) -> int:
        return pulumi.get(self, "connection_retry_sleep_interval")

    @property
    @pulumi.getter(name="connectionRetryTimeLimit")
    def connection_retry_time_limit(self) -> int:
        return pulumi.get(self, "connection_retry_time_limit")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this machine policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="machineCleanupPolicies")
    def machine_cleanup_policies(self) -> Sequence['outputs.GetMachinePoliciesMachinePolicyMachineCleanupPolicyResult']:
        return pulumi.get(self, "machine_cleanup_policies")

    @property
    @pulumi.getter(name="machineConnectivityPolicies")
    def machine_connectivity_policies(self) -> Sequence['outputs.GetMachinePoliciesMachinePolicyMachineConnectivityPolicyResult']:
        return pulumi.get(self, "machine_connectivity_policies")

    @property
    @pulumi.getter(name="machineHealthCheckPolicies")
    def machine_health_check_policies(self) -> Sequence['outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyResult']:
        return pulumi.get(self, "machine_health_check_policies")

    @property
    @pulumi.getter(name="machineUpdatePolicies")
    def machine_update_policies(self) -> Sequence['outputs.GetMachinePoliciesMachinePolicyMachineUpdatePolicyResult']:
        return pulumi.get(self, "machine_update_policies")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pollingRequestMaximumMessageProcessingTimeout")
    def polling_request_maximum_message_processing_timeout(self) -> int:
        return pulumi.get(self, "polling_request_maximum_message_processing_timeout")

    @property
    @pulumi.getter(name="pollingRequestQueueTimeout")
    def polling_request_queue_timeout(self) -> int:
        return pulumi.get(self, "polling_request_queue_timeout")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineCleanupPolicyResult(dict):
    def __init__(__self__, *,
                 delete_machines_elapsed_timespan: int,
                 delete_machines_behavior: Optional[str] = None):
        pulumi.set(__self__, "delete_machines_elapsed_timespan", delete_machines_elapsed_timespan)
        if delete_machines_behavior is not None:
            pulumi.set(__self__, "delete_machines_behavior", delete_machines_behavior)

    @property
    @pulumi.getter(name="deleteMachinesElapsedTimespan")
    def delete_machines_elapsed_timespan(self) -> int:
        return pulumi.get(self, "delete_machines_elapsed_timespan")

    @property
    @pulumi.getter(name="deleteMachinesBehavior")
    def delete_machines_behavior(self) -> Optional[str]:
        return pulumi.get(self, "delete_machines_behavior")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineConnectivityPolicyResult(dict):
    def __init__(__self__, *,
                 machine_connectivity_behavior: Optional[str] = None):
        if machine_connectivity_behavior is not None:
            pulumi.set(__self__, "machine_connectivity_behavior", machine_connectivity_behavior)

    @property
    @pulumi.getter(name="machineConnectivityBehavior")
    def machine_connectivity_behavior(self) -> Optional[str]:
        return pulumi.get(self, "machine_connectivity_behavior")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyResult(dict):
    def __init__(__self__, *,
                 bash_health_check_policy: 'outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyResult',
                 powershell_health_check_policy: 'outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyResult',
                 health_check_cron: Optional[str] = None,
                 health_check_cron_timezone: Optional[str] = None,
                 health_check_interval: Optional[int] = None,
                 health_check_type: Optional[str] = None):
        pulumi.set(__self__, "bash_health_check_policy", bash_health_check_policy)
        pulumi.set(__self__, "powershell_health_check_policy", powershell_health_check_policy)
        if health_check_cron is not None:
            pulumi.set(__self__, "health_check_cron", health_check_cron)
        if health_check_cron_timezone is not None:
            pulumi.set(__self__, "health_check_cron_timezone", health_check_cron_timezone)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)

    @property
    @pulumi.getter(name="bashHealthCheckPolicy")
    def bash_health_check_policy(self) -> 'outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyResult':
        return pulumi.get(self, "bash_health_check_policy")

    @property
    @pulumi.getter(name="powershellHealthCheckPolicy")
    def powershell_health_check_policy(self) -> 'outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyResult':
        return pulumi.get(self, "powershell_health_check_policy")

    @property
    @pulumi.getter(name="healthCheckCron")
    def health_check_cron(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron")

    @property
    @pulumi.getter(name="healthCheckCronTimezone")
    def health_check_cron_timezone(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron_timezone")

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[int]:
        return pulumi.get(self, "health_check_interval")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[str]:
        return pulumi.get(self, "health_check_type")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyResult(dict):
    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyResult(dict):
    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineUpdatePolicyResult(dict):
    def __init__(__self__, *,
                 calamari_update_behavior: Optional[str] = None,
                 tentacle_update_account_id: Optional[str] = None,
                 tentacle_update_behavior: Optional[str] = None):
        if calamari_update_behavior is not None:
            pulumi.set(__self__, "calamari_update_behavior", calamari_update_behavior)
        if tentacle_update_account_id is not None:
            pulumi.set(__self__, "tentacle_update_account_id", tentacle_update_account_id)
        if tentacle_update_behavior is not None:
            pulumi.set(__self__, "tentacle_update_behavior", tentacle_update_behavior)

    @property
    @pulumi.getter(name="calamariUpdateBehavior")
    def calamari_update_behavior(self) -> Optional[str]:
        return pulumi.get(self, "calamari_update_behavior")

    @property
    @pulumi.getter(name="tentacleUpdateAccountId")
    def tentacle_update_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tentacle_update_account_id")

    @property
    @pulumi.getter(name="tentacleUpdateBehavior")
    def tentacle_update_behavior(self) -> Optional[str]:
        return pulumi.get(self, "tentacle_update_behavior")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 applications_directory: str,
                 destinations: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationResult'],
                 endpoints: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str,
                 working_directory: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "applications_directory", applications_directory)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> str:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> str:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 certificate_signature_algorithm: str,
                 endpoints: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 tentacle_url: str,
                 tentacle_version_details: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailResult'],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "tentacle_url", tentacle_url)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> str:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter(name="tentacleUrl")
    def tentacle_url(self) -> str:
        return pulumi.get(self, "tentacle_url")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProjectGroupsProjectGroupResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 retention_policy_id: str,
                 space_id: str):
        """
        :param str description: The description of this project group.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str retention_policy_id: The ID of the retention policy associated with this project group.
        :param str space_id: The space ID associated with this project group.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "retention_policy_id", retention_policy_id)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this project group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="retentionPolicyId")
    def retention_policy_id(self) -> str:
        """
        The ID of the retention policy associated with this project group.
        """
        return pulumi.get(self, "retention_policy_id")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this project group.
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: bool,
                 auto_create_release: bool,
                 auto_deploy_release_overrides: Sequence[str],
                 cloned_from_project_id: str,
                 connectivity_policies: Sequence['outputs.GetProjectsProjectConnectivityPolicyResult'],
                 default_guided_failure_mode: str,
                 default_to_skip_if_already_installed: bool,
                 deployment_changes_template: str,
                 deployment_process_id: str,
                 description: str,
                 discrete_channel_release: bool,
                 git_anonymous_persistence_settings: Sequence['outputs.GetProjectsProjectGitAnonymousPersistenceSettingResult'],
                 git_library_persistence_settings: Sequence['outputs.GetProjectsProjectGitLibraryPersistenceSettingResult'],
                 git_username_password_persistence_settings: Sequence['outputs.GetProjectsProjectGitUsernamePasswordPersistenceSettingResult'],
                 id: str,
                 included_library_variable_sets: Sequence[str],
                 is_disabled: bool,
                 is_discrete_channel_release: bool,
                 is_version_controlled: bool,
                 jira_service_management_extension_settings: Sequence['outputs.GetProjectsProjectJiraServiceManagementExtensionSettingResult'],
                 lifecycle_id: str,
                 name: str,
                 project_group_id: str,
                 release_creation_strategies: Sequence['outputs.GetProjectsProjectReleaseCreationStrategyResult'],
                 release_notes_template: str,
                 servicenow_extension_settings: Sequence['outputs.GetProjectsProjectServicenowExtensionSettingResult'],
                 slug: str,
                 space_id: str,
                 templates: Sequence['outputs.GetProjectsProjectTemplateResult'],
                 tenanted_deployment_participation: str,
                 variable_set_id: str,
                 versioning_strategies: Sequence['outputs.GetProjectsProjectVersioningStrategyResult']):
        """
        :param str cloned_from_project_id: A filter to search for cloned resources by a project ID.
        :param str description: The description of this project.
        :param bool discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param Sequence['GetProjectsProjectGitAnonymousPersistenceSettingArgs'] git_anonymous_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param Sequence['GetProjectsProjectGitLibraryPersistenceSettingArgs'] git_library_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param Sequence['GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs'] git_username_password_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param str id: The unique ID for this resource.
        :param bool is_discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param Sequence['GetProjectsProjectJiraServiceManagementExtensionSettingArgs'] jira_service_management_extension_settings: Provides extension settings for the Jira Service Management (JSM) integration for this project.
        :param str lifecycle_id: The lifecycle ID associated with this project.
        :param str name: The name of the project in Octopus Deploy. This name must be unique.
        :param str project_group_id: The project group ID associated with this project.
        :param Sequence['GetProjectsProjectServicenowExtensionSettingArgs'] servicenow_extension_settings: Provides extension settings for the ServiceNow integration for this project.
        :param str slug: A human-readable, unique identifier, used to identify a project.
        :param str space_id: The space ID associated with this project.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        pulumi.set(__self__, "auto_create_release", auto_create_release)
        pulumi.set(__self__, "auto_deploy_release_overrides", auto_deploy_release_overrides)
        pulumi.set(__self__, "cloned_from_project_id", cloned_from_project_id)
        pulumi.set(__self__, "connectivity_policies", connectivity_policies)
        pulumi.set(__self__, "default_guided_failure_mode", default_guided_failure_mode)
        pulumi.set(__self__, "default_to_skip_if_already_installed", default_to_skip_if_already_installed)
        pulumi.set(__self__, "deployment_changes_template", deployment_changes_template)
        pulumi.set(__self__, "deployment_process_id", deployment_process_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "discrete_channel_release", discrete_channel_release)
        pulumi.set(__self__, "git_anonymous_persistence_settings", git_anonymous_persistence_settings)
        pulumi.set(__self__, "git_library_persistence_settings", git_library_persistence_settings)
        pulumi.set(__self__, "git_username_password_persistence_settings", git_username_password_persistence_settings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "included_library_variable_sets", included_library_variable_sets)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_discrete_channel_release", is_discrete_channel_release)
        pulumi.set(__self__, "is_version_controlled", is_version_controlled)
        pulumi.set(__self__, "jira_service_management_extension_settings", jira_service_management_extension_settings)
        pulumi.set(__self__, "lifecycle_id", lifecycle_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_group_id", project_group_id)
        pulumi.set(__self__, "release_creation_strategies", release_creation_strategies)
        pulumi.set(__self__, "release_notes_template", release_notes_template)
        pulumi.set(__self__, "servicenow_extension_settings", servicenow_extension_settings)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "templates", templates)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "variable_set_id", variable_set_id)
        pulumi.set(__self__, "versioning_strategies", versioning_strategies)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> bool:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @property
    @pulumi.getter(name="autoCreateRelease")
    def auto_create_release(self) -> bool:
        return pulumi.get(self, "auto_create_release")

    @property
    @pulumi.getter(name="autoDeployReleaseOverrides")
    def auto_deploy_release_overrides(self) -> Sequence[str]:
        return pulumi.get(self, "auto_deploy_release_overrides")

    @property
    @pulumi.getter(name="clonedFromProjectId")
    def cloned_from_project_id(self) -> str:
        """
        A filter to search for cloned resources by a project ID.
        """
        return pulumi.get(self, "cloned_from_project_id")

    @property
    @pulumi.getter(name="connectivityPolicies")
    def connectivity_policies(self) -> Sequence['outputs.GetProjectsProjectConnectivityPolicyResult']:
        return pulumi.get(self, "connectivity_policies")

    @property
    @pulumi.getter(name="defaultGuidedFailureMode")
    def default_guided_failure_mode(self) -> str:
        return pulumi.get(self, "default_guided_failure_mode")

    @property
    @pulumi.getter(name="defaultToSkipIfAlreadyInstalled")
    def default_to_skip_if_already_installed(self) -> bool:
        return pulumi.get(self, "default_to_skip_if_already_installed")

    @property
    @pulumi.getter(name="deploymentChangesTemplate")
    def deployment_changes_template(self) -> str:
        return pulumi.get(self, "deployment_changes_template")

    @property
    @pulumi.getter(name="deploymentProcessId")
    def deployment_process_id(self) -> str:
        return pulumi.get(self, "deployment_process_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discreteChannelRelease")
    def discrete_channel_release(self) -> bool:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "discrete_channel_release")

    @property
    @pulumi.getter(name="gitAnonymousPersistenceSettings")
    def git_anonymous_persistence_settings(self) -> Sequence['outputs.GetProjectsProjectGitAnonymousPersistenceSettingResult']:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_anonymous_persistence_settings")

    @property
    @pulumi.getter(name="gitLibraryPersistenceSettings")
    def git_library_persistence_settings(self) -> Sequence['outputs.GetProjectsProjectGitLibraryPersistenceSettingResult']:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_library_persistence_settings")

    @property
    @pulumi.getter(name="gitUsernamePasswordPersistenceSettings")
    def git_username_password_persistence_settings(self) -> Sequence['outputs.GetProjectsProjectGitUsernamePasswordPersistenceSettingResult']:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_username_password_persistence_settings")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includedLibraryVariableSets")
    def included_library_variable_sets(self) -> Sequence[str]:
        return pulumi.get(self, "included_library_variable_sets")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isDiscreteChannelRelease")
    def is_discrete_channel_release(self) -> bool:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "is_discrete_channel_release")

    @property
    @pulumi.getter(name="isVersionControlled")
    def is_version_controlled(self) -> bool:
        return pulumi.get(self, "is_version_controlled")

    @property
    @pulumi.getter(name="jiraServiceManagementExtensionSettings")
    def jira_service_management_extension_settings(self) -> Sequence['outputs.GetProjectsProjectJiraServiceManagementExtensionSettingResult']:
        """
        Provides extension settings for the Jira Service Management (JSM) integration for this project.
        """
        return pulumi.get(self, "jira_service_management_extension_settings")

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> str:
        """
        The lifecycle ID associated with this project.
        """
        return pulumi.get(self, "lifecycle_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the project in Octopus Deploy. This name must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectGroupId")
    def project_group_id(self) -> str:
        """
        The project group ID associated with this project.
        """
        return pulumi.get(self, "project_group_id")

    @property
    @pulumi.getter(name="releaseCreationStrategies")
    def release_creation_strategies(self) -> Sequence['outputs.GetProjectsProjectReleaseCreationStrategyResult']:
        return pulumi.get(self, "release_creation_strategies")

    @property
    @pulumi.getter(name="releaseNotesTemplate")
    def release_notes_template(self) -> str:
        return pulumi.get(self, "release_notes_template")

    @property
    @pulumi.getter(name="servicenowExtensionSettings")
    def servicenow_extension_settings(self) -> Sequence['outputs.GetProjectsProjectServicenowExtensionSettingResult']:
        """
        Provides extension settings for the ServiceNow integration for this project.
        """
        return pulumi.get(self, "servicenow_extension_settings")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        A human-readable, unique identifier, used to identify a project.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this project.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetProjectsProjectTemplateResult']:
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> str:
        return pulumi.get(self, "variable_set_id")

    @property
    @pulumi.getter(name="versioningStrategies")
    def versioning_strategies(self) -> Sequence['outputs.GetProjectsProjectVersioningStrategyResult']:
        return pulumi.get(self, "versioning_strategies")


@pulumi.output_type
class GetProjectsProjectConnectivityPolicyResult(dict):
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: bool,
                 exclude_unhealthy_targets: bool,
                 target_roles: Sequence[str],
                 skip_machine_behavior: Optional[str] = None):
        pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        pulumi.set(__self__, "target_roles", target_roles)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> bool:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> bool:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Sequence[str]:
        return pulumi.get(self, "target_roles")

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[str]:
        return pulumi.get(self, "skip_machine_behavior")


@pulumi.output_type
class GetProjectsProjectGitAnonymousPersistenceSettingResult(dict):
    def __init__(__self__, *,
                 url: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "protected_branches")


@pulumi.output_type
class GetProjectsProjectGitLibraryPersistenceSettingResult(dict):
    def __init__(__self__, *,
                 git_credential_id: str,
                 url: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "git_credential_id", git_credential_id)
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> str:
        return pulumi.get(self, "git_credential_id")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "protected_branches")


@pulumi.output_type
class GetProjectsProjectGitUsernamePasswordPersistenceSettingResult(dict):
    def __init__(__self__, *,
                 password: str,
                 url: str,
                 username: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "protected_branches")


@pulumi.output_type
class GetProjectsProjectJiraServiceManagementExtensionSettingResult(dict):
    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 service_desk_project_name: str):
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "service_desk_project_name", service_desk_project_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="serviceDeskProjectName")
    def service_desk_project_name(self) -> str:
        return pulumi.get(self, "service_desk_project_name")


@pulumi.output_type
class GetProjectsProjectReleaseCreationStrategyResult(dict):
    def __init__(__self__, *,
                 release_creation_package: 'outputs.GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageResult',
                 channel_id: Optional[str] = None,
                 release_creation_package_step_id: Optional[str] = None):
        pulumi.set(__self__, "release_creation_package", release_creation_package)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if release_creation_package_step_id is not None:
            pulumi.set(__self__, "release_creation_package_step_id", release_creation_package_step_id)

    @property
    @pulumi.getter(name="releaseCreationPackage")
    def release_creation_package(self) -> 'outputs.GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageResult':
        return pulumi.get(self, "release_creation_package")

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[str]:
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter(name="releaseCreationPackageStepId")
    def release_creation_package_step_id(self) -> Optional[str]:
        return pulumi.get(self, "release_creation_package_step_id")


@pulumi.output_type
class GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageResult(dict):
    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class GetProjectsProjectServicenowExtensionSettingResult(dict):
    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 is_state_automatically_transitioned: bool,
                 standard_change_template_name: str):
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_state_automatically_transitioned", is_state_automatically_transitioned)
        pulumi.set(__self__, "standard_change_template_name", standard_change_template_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isStateAutomaticallyTransitioned")
    def is_state_automatically_transitioned(self) -> bool:
        return pulumi.get(self, "is_state_automatically_transitioned")

    @property
    @pulumi.getter(name="standardChangeTemplateName")
    def standard_change_template_name(self) -> str:
        return pulumi.get(self, "standard_change_template_name")


@pulumi.output_type
class GetProjectsProjectTemplateResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 default_value: Optional[str] = None,
                 display_settings: Optional[Mapping[str, Any]] = None,
                 help_text: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str name: A filter to search by name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to search by name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[str]:
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class GetProjectsProjectVersioningStrategyResult(dict):
    def __init__(__self__, *,
                 donor_package: 'outputs.GetProjectsProjectVersioningStrategyDonorPackageResult',
                 donor_package_step_id: str,
                 template: str):
        pulumi.set(__self__, "donor_package", donor_package)
        pulumi.set(__self__, "donor_package_step_id", donor_package_step_id)
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="donorPackage")
    def donor_package(self) -> 'outputs.GetProjectsProjectVersioningStrategyDonorPackageResult':
        return pulumi.get(self, "donor_package")

    @property
    @pulumi.getter(name="donorPackageStepId")
    def donor_package_step_id(self) -> str:
        return pulumi.get(self, "donor_package_step_id")

    @property
    @pulumi.getter
    def template(self) -> str:
        return pulumi.get(self, "template")


@pulumi.output_type
class GetProjectsProjectVersioningStrategyDonorPackageResult(dict):
    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class GetScriptModulesScriptModuleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 scripts: Sequence['outputs.GetScriptModulesScriptModuleScriptResult'],
                 space_id: str,
                 variable_set_id: str):
        """
        :param str description: The description of this script module.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param Sequence['GetScriptModulesScriptModuleScriptArgs'] scripts: The script associated with this script module.
        :param str space_id: The space ID associated with this resource.
        :param str variable_set_id: The variable set ID for this script module.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scripts", scripts)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "variable_set_id", variable_set_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this script module.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scripts(self) -> Sequence['outputs.GetScriptModulesScriptModuleScriptResult']:
        """
        The script associated with this script module.
        """
        return pulumi.get(self, "scripts")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> str:
        """
        The variable set ID for this script module.
        """
        return pulumi.get(self, "variable_set_id")


@pulumi.output_type
class GetScriptModulesScriptModuleScriptResult(dict):
    def __init__(__self__, *,
                 body: str,
                 syntax: str):
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "syntax", syntax)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def syntax(self) -> str:
        return pulumi.get(self, "syntax")


@pulumi.output_type
class GetSpacesSpaceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 is_default: bool,
                 is_task_queue_stopped: bool,
                 name: str,
                 slug: str,
                 space_managers_team_members: Sequence[str],
                 space_managers_teams: Sequence[str]):
        """
        :param str description: The description of this space.
        :param str id: The unique ID for this resource.
        :param bool is_default: Specifies if this space is the default space in Octopus.
        :param bool is_task_queue_stopped: Specifies the status of the task queue for this space.
        :param str name: The name of this resource.
        :param str slug: The unique slug of this space.
        :param Sequence[str] space_managers_team_members: A list of user IDs designated to be managers of this space.
        :param Sequence[str] space_managers_teams: A list of team IDs designated to be managers of this space.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_task_queue_stopped", is_task_queue_stopped)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "space_managers_team_members", space_managers_team_members)
        pulumi.set(__self__, "space_managers_teams", space_managers_teams)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this space.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Specifies if this space is the default space in Octopus.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isTaskQueueStopped")
    def is_task_queue_stopped(self) -> bool:
        """
        Specifies the status of the task queue for this space.
        """
        return pulumi.get(self, "is_task_queue_stopped")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The unique slug of this space.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="spaceManagersTeamMembers")
    def space_managers_team_members(self) -> Sequence[str]:
        """
        A list of user IDs designated to be managers of this space.
        """
        return pulumi.get(self, "space_managers_team_members")

    @property
    @pulumi.getter(name="spaceManagersTeams")
    def space_managers_teams(self) -> Sequence[str]:
        """
        A list of team IDs designated to be managers of this space.
        """
        return pulumi.get(self, "space_managers_teams")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 dot_net_core_platform: str,
                 endpoints: Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 fingerprint: str,
                 has_latest_calamari: bool,
                 health_status: str,
                 host: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 port: int,
                 proxy_id: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> str:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetTagSetsTagSetResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 sort_order: int,
                 space_id: str):
        """
        :param str description: The description of this tag set.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param int sort_order: The sort order associated with this resource.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this tag set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> int:
        """
        The sort order associated with this resource.
        """
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetTeamsTeamResult(dict):
    def __init__(__self__, *,
                 can_be_deleted: bool,
                 can_be_renamed: bool,
                 can_change_members: bool,
                 can_change_roles: bool,
                 description: str,
                 external_security_groups: Sequence['outputs.GetTeamsTeamExternalSecurityGroupResult'],
                 id: str,
                 name: str,
                 space_id: str,
                 users: Sequence[str]):
        """
        :param str description: The user-friendly description of this team.
        :param str id: The unique ID for this resource.
        :param str name: The name of this team.
        :param str space_id: The space associated with this team.
        :param Sequence[str] users: A list of user IDs designated to be members of this team.
        """
        pulumi.set(__self__, "can_be_deleted", can_be_deleted)
        pulumi.set(__self__, "can_be_renamed", can_be_renamed)
        pulumi.set(__self__, "can_change_members", can_change_members)
        pulumi.set(__self__, "can_change_roles", can_change_roles)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_security_groups", external_security_groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="canBeDeleted")
    def can_be_deleted(self) -> bool:
        return pulumi.get(self, "can_be_deleted")

    @property
    @pulumi.getter(name="canBeRenamed")
    def can_be_renamed(self) -> bool:
        return pulumi.get(self, "can_be_renamed")

    @property
    @pulumi.getter(name="canChangeMembers")
    def can_change_members(self) -> bool:
        return pulumi.get(self, "can_change_members")

    @property
    @pulumi.getter(name="canChangeRoles")
    def can_change_roles(self) -> bool:
        return pulumi.get(self, "can_change_roles")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The user-friendly description of this team.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalSecurityGroups")
    def external_security_groups(self) -> Sequence['outputs.GetTeamsTeamExternalSecurityGroupResult']:
        return pulumi.get(self, "external_security_groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this team.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space associated with this team.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def users(self) -> Sequence[str]:
        """
        A list of user IDs designated to be members of this team.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetTeamsTeamExternalSecurityGroupResult(dict):
    def __init__(__self__, *,
                 display_id_and_name: bool,
                 display_name: str,
                 id: str):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        pulumi.set(__self__, "display_id_and_name", display_id_and_name)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayIdAndName")
    def display_id_and_name(self) -> bool:
        return pulumi.get(self, "display_id_and_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetTenantsTenantResult(dict):
    def __init__(__self__, *,
                 cloned_from_tenant_id: str,
                 description: str,
                 id: str,
                 name: str,
                 project_environments: Sequence['outputs.GetTenantsTenantProjectEnvironmentResult'],
                 space_id: str,
                 tenant_tags: Sequence[str]):
        """
        :param str cloned_from_tenant_id: The ID of the tenant from which this tenant was cloned.
        :param str description: The description of this tenant.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "cloned_from_tenant_id", cloned_from_tenant_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_environments", project_environments)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="clonedFromTenantId")
    def cloned_from_tenant_id(self) -> str:
        """
        The ID of the tenant from which this tenant was cloned.
        """
        return pulumi.get(self, "cloned_from_tenant_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this tenant.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectEnvironments")
    def project_environments(self) -> Sequence['outputs.GetTenantsTenantProjectEnvironmentResult']:
        return pulumi.get(self, "project_environments")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class GetTenantsTenantProjectEnvironmentResult(dict):
    def __init__(__self__, *,
                 environments: Sequence[str],
                 project_id: str):
        """
        :param str project_id: A filter to search by a project ID.
        """
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        A filter to search by a project ID.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetUserRolesUserRoleResult(dict):
    def __init__(__self__, *,
                 can_be_deleted: bool,
                 description: str,
                 granted_space_permissions: Sequence[str],
                 granted_system_permissions: Sequence[str],
                 id: str,
                 name: str,
                 space_permission_descriptions: Sequence[str],
                 supported_restrictions: Sequence[str],
                 system_permission_descriptions: Sequence[str]):
        """
        :param str description: The description of this user role.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        """
        pulumi.set(__self__, "can_be_deleted", can_be_deleted)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "granted_space_permissions", granted_space_permissions)
        pulumi.set(__self__, "granted_system_permissions", granted_system_permissions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_permission_descriptions", space_permission_descriptions)
        pulumi.set(__self__, "supported_restrictions", supported_restrictions)
        pulumi.set(__self__, "system_permission_descriptions", system_permission_descriptions)

    @property
    @pulumi.getter(name="canBeDeleted")
    def can_be_deleted(self) -> bool:
        return pulumi.get(self, "can_be_deleted")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this user role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantedSpacePermissions")
    def granted_space_permissions(self) -> Sequence[str]:
        return pulumi.get(self, "granted_space_permissions")

    @property
    @pulumi.getter(name="grantedSystemPermissions")
    def granted_system_permissions(self) -> Sequence[str]:
        return pulumi.get(self, "granted_system_permissions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spacePermissionDescriptions")
    def space_permission_descriptions(self) -> Sequence[str]:
        return pulumi.get(self, "space_permission_descriptions")

    @property
    @pulumi.getter(name="supportedRestrictions")
    def supported_restrictions(self) -> Sequence[str]:
        return pulumi.get(self, "supported_restrictions")

    @property
    @pulumi.getter(name="systemPermissionDescriptions")
    def system_permission_descriptions(self) -> Sequence[str]:
        return pulumi.get(self, "system_permission_descriptions")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 can_password_be_edited: bool,
                 display_name: str,
                 email_address: str,
                 id: str,
                 identities: Sequence['outputs.GetUsersUserIdentityResult'],
                 is_active: bool,
                 is_requestor: bool,
                 is_service: bool,
                 password: str,
                 username: str):
        """
        :param str display_name: The display name of this resource.
        :param str email_address: The email address of this resource.
        :param str id: The unique ID for this resource.
        :param str password: The password associated with this resource.
        :param str username: The username associated with this resource.
        """
        pulumi.set(__self__, "can_password_be_edited", can_password_be_edited)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email_address", email_address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identities", identities)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "is_requestor", is_requestor)
        pulumi.set(__self__, "is_service", is_service)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="canPasswordBeEdited")
    def can_password_be_edited(self) -> bool:
        return pulumi.get(self, "can_password_be_edited")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of this resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of this resource.
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetUsersUserIdentityResult']:
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isRequestor")
    def is_requestor(self) -> bool:
        return pulumi.get(self, "is_requestor")

    @property
    @pulumi.getter(name="isService")
    def is_service(self) -> bool:
        return pulumi.get(self, "is_service")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUsersUserIdentityResult(dict):
    def __init__(__self__, *,
                 claims: Optional[Sequence['outputs.GetUsersUserIdentityClaimResult']] = None,
                 provider: Optional[str] = None):
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def claims(self) -> Optional[Sequence['outputs.GetUsersUserIdentityClaimResult']]:
        return pulumi.get(self, "claims")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")


@pulumi.output_type
class GetUsersUserIdentityClaimResult(dict):
    def __init__(__self__, *,
                 is_identifying_claim: bool,
                 name: str,
                 value: str):
        pulumi.set(__self__, "is_identifying_claim", is_identifying_claim)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isIdentifyingClaim")
    def is_identifying_claim(self) -> bool:
        return pulumi.get(self, "is_identifying_claim")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVariablesVariableResult(dict):
    def __init__(__self__, *,
                 description: str,
                 encrypted_value: str,
                 is_editable: bool,
                 is_sensitive: bool,
                 key_fingerprint: str,
                 name: str,
                 owner_id: str,
                 pgp_key: str,
                 project_id: str,
                 prompts: Sequence['outputs.GetVariablesVariablePromptResult'],
                 scopes: Sequence['outputs.GetVariablesVariableScopeResult'],
                 sensitive_value: str,
                 type: str,
                 value: str):
        """
        :param str description: The description of this variable.
        :param bool is_editable: Indicates whether or not this variable is considered editable.
        :param bool is_sensitive: Indicates whether or not this resource is considered sensitive and should be kept secret.
        :param str name: The name of this resource.
        :param str type: The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "encrypted_value", encrypted_value)
        pulumi.set(__self__, "is_editable", is_editable)
        pulumi.set(__self__, "is_sensitive", is_sensitive)
        pulumi.set(__self__, "key_fingerprint", key_fingerprint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "pgp_key", pgp_key)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "prompts", prompts)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "sensitive_value", sensitive_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this variable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptedValue")
    def encrypted_value(self) -> str:
        return pulumi.get(self, "encrypted_value")

    @property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> bool:
        """
        Indicates whether or not this variable is considered editable.
        """
        return pulumi.get(self, "is_editable")

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> bool:
        """
        Indicates whether or not this resource is considered sensitive and should be kept secret.
        """
        return pulumi.get(self, "is_sensitive")

    @property
    @pulumi.getter(name="keyFingerprint")
    def key_fingerprint(self) -> str:
        return pulumi.get(self, "key_fingerprint")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pgpKey")
    def pgp_key(self) -> str:
        return pulumi.get(self, "pgp_key")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def prompts(self) -> Sequence['outputs.GetVariablesVariablePromptResult']:
        return pulumi.get(self, "prompts")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetVariablesVariableScopeResult']:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="sensitiveValue")
    def sensitive_value(self) -> str:
        return pulumi.get(self, "sensitive_value")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVariablesVariablePromptResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_settings: Optional['outputs.GetVariablesVariablePromptDisplaySettingsResult'] = None,
                 is_required: Optional[bool] = None,
                 label: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional['outputs.GetVariablesVariablePromptDisplaySettingsResult']:
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class GetVariablesVariablePromptDisplaySettingsResult(dict):
    def __init__(__self__, *,
                 control_type: str,
                 select_options: Optional[Sequence['outputs.GetVariablesVariablePromptDisplaySettingsSelectOptionResult']] = None):
        pulumi.set(__self__, "control_type", control_type)
        if select_options is not None:
            pulumi.set(__self__, "select_options", select_options)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> str:
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter(name="selectOptions")
    def select_options(self) -> Optional[Sequence['outputs.GetVariablesVariablePromptDisplaySettingsSelectOptionResult']]:
        return pulumi.get(self, "select_options")


@pulumi.output_type
class GetVariablesVariablePromptDisplaySettingsSelectOptionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 value: str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVariablesVariableScopeResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 channels: Optional[Sequence[str]] = None,
                 environments: Optional[Sequence[str]] = None,
                 machines: Optional[Sequence[str]] = None,
                 roles: Optional[Sequence[str]] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def machines(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "machines")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class GetWorkerPoolsWorkerPoolResult(dict):
    def __init__(__self__, *,
                 can_add_workers: bool,
                 description: str,
                 id: str,
                 is_default: bool,
                 name: str,
                 sort_order: int,
                 space_id: str,
                 worker_pool_type: str,
                 worker_type: str):
        """
        :param str description: The description of this worker pool.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param int sort_order: The order number to sort a dynamic worker pool.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "can_add_workers", can_add_workers)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "worker_pool_type", worker_pool_type)
        pulumi.set(__self__, "worker_type", worker_type)

    @property
    @pulumi.getter(name="canAddWorkers")
    def can_add_workers(self) -> bool:
        return pulumi.get(self, "can_add_workers")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this worker pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> int:
        """
        The order number to sort a dynamic worker pool.
        """
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="workerPoolType")
    def worker_pool_type(self) -> str:
        return pulumi.get(self, "worker_pool_type")

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> str:
        return pulumi.get(self, "worker_type")


