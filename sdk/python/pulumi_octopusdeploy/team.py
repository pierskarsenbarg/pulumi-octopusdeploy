# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TeamArgs', 'Team']

@pulumi.input_type
class TeamArgs:
    def __init__(__self__, *,
                 can_be_deleted: Optional[pulumi.Input[bool]] = None,
                 can_be_renamed: Optional[pulumi.Input[bool]] = None,
                 can_change_members: Optional[pulumi.Input[bool]] = None,
                 can_change_roles: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TeamExternalSecurityGroupArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 user_roles: Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserRoleArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Team resource.
        :param pulumi.Input[str] description: The user-friendly description of this team.
        :param pulumi.Input[str] name: The name of this team.
        :param pulumi.Input[str] space_id: The space associated with this team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of user IDs designated to be members of this team.
        """
        if can_be_deleted is not None:
            pulumi.set(__self__, "can_be_deleted", can_be_deleted)
        if can_be_renamed is not None:
            pulumi.set(__self__, "can_be_renamed", can_be_renamed)
        if can_change_members is not None:
            pulumi.set(__self__, "can_change_members", can_change_members)
        if can_change_roles is not None:
            pulumi.set(__self__, "can_change_roles", can_change_roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_security_groups is not None:
            pulumi.set(__self__, "external_security_groups", external_security_groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if user_roles is not None:
            pulumi.set(__self__, "user_roles", user_roles)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="canBeDeleted")
    def can_be_deleted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_deleted")

    @can_be_deleted.setter
    def can_be_deleted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_deleted", value)

    @property
    @pulumi.getter(name="canBeRenamed")
    def can_be_renamed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_renamed")

    @can_be_renamed.setter
    def can_be_renamed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_renamed", value)

    @property
    @pulumi.getter(name="canChangeMembers")
    def can_change_members(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_members")

    @can_change_members.setter
    def can_change_members(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_members", value)

    @property
    @pulumi.getter(name="canChangeRoles")
    def can_change_roles(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_roles")

    @can_change_roles.setter
    def can_change_roles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_roles", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The user-friendly description of this team.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalSecurityGroups")
    def external_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamExternalSecurityGroupArgs']]]]:
        return pulumi.get(self, "external_security_groups")

    @external_security_groups.setter
    def external_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamExternalSecurityGroupArgs']]]]):
        pulumi.set(self, "external_security_groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this team.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space associated with this team.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="userRoles")
    def user_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserRoleArgs']]]]:
        return pulumi.get(self, "user_roles")

    @user_roles.setter
    def user_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserRoleArgs']]]]):
        pulumi.set(self, "user_roles", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of user IDs designated to be members of this team.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _TeamState:
    def __init__(__self__, *,
                 can_be_deleted: Optional[pulumi.Input[bool]] = None,
                 can_be_renamed: Optional[pulumi.Input[bool]] = None,
                 can_change_members: Optional[pulumi.Input[bool]] = None,
                 can_change_roles: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TeamExternalSecurityGroupArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 user_roles: Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserRoleArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Team resources.
        :param pulumi.Input[str] description: The user-friendly description of this team.
        :param pulumi.Input[str] name: The name of this team.
        :param pulumi.Input[str] space_id: The space associated with this team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of user IDs designated to be members of this team.
        """
        if can_be_deleted is not None:
            pulumi.set(__self__, "can_be_deleted", can_be_deleted)
        if can_be_renamed is not None:
            pulumi.set(__self__, "can_be_renamed", can_be_renamed)
        if can_change_members is not None:
            pulumi.set(__self__, "can_change_members", can_change_members)
        if can_change_roles is not None:
            pulumi.set(__self__, "can_change_roles", can_change_roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_security_groups is not None:
            pulumi.set(__self__, "external_security_groups", external_security_groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if user_roles is not None:
            pulumi.set(__self__, "user_roles", user_roles)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="canBeDeleted")
    def can_be_deleted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_deleted")

    @can_be_deleted.setter
    def can_be_deleted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_deleted", value)

    @property
    @pulumi.getter(name="canBeRenamed")
    def can_be_renamed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_renamed")

    @can_be_renamed.setter
    def can_be_renamed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_renamed", value)

    @property
    @pulumi.getter(name="canChangeMembers")
    def can_change_members(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_members")

    @can_change_members.setter
    def can_change_members(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_members", value)

    @property
    @pulumi.getter(name="canChangeRoles")
    def can_change_roles(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_roles")

    @can_change_roles.setter
    def can_change_roles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_roles", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The user-friendly description of this team.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalSecurityGroups")
    def external_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamExternalSecurityGroupArgs']]]]:
        return pulumi.get(self, "external_security_groups")

    @external_security_groups.setter
    def external_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamExternalSecurityGroupArgs']]]]):
        pulumi.set(self, "external_security_groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this team.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space associated with this team.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="userRoles")
    def user_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserRoleArgs']]]]:
        return pulumi.get(self, "user_roles")

    @user_roles.setter
    def user_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserRoleArgs']]]]):
        pulumi.set(self, "user_roles", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of user IDs designated to be members of this team.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


class Team(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 can_be_deleted: Optional[pulumi.Input[bool]] = None,
                 can_be_renamed: Optional[pulumi.Input[bool]] = None,
                 can_change_members: Optional[pulumi.Input[bool]] = None,
                 can_change_roles: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TeamExternalSecurityGroupArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 user_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TeamUserRoleArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        This resource manages teams in Octopus Deploy.

        > **NOTE on Team User Roles and Scoped User Roles:** We currently
        provides both a standalone Scoped User Role resource
        and a Team resource with `user_roles` blocks defined in-line. At this time you
        cannot use a Team with in-line user_roles in conjunction with any Scoped User Role
        resources. Doing so will cause a conflict of user role settings and will overwrite
        user roles.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The user-friendly description of this team.
        :param pulumi.Input[str] name: The name of this team.
        :param pulumi.Input[str] space_id: The space associated with this team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of user IDs designated to be members of this team.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TeamArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages teams in Octopus Deploy.

        > **NOTE on Team User Roles and Scoped User Roles:** We currently
        provides both a standalone Scoped User Role resource
        and a Team resource with `user_roles` blocks defined in-line. At this time you
        cannot use a Team with in-line user_roles in conjunction with any Scoped User Role
        resources. Doing so will cause a conflict of user role settings and will overwrite
        user roles.

        :param str resource_name: The name of the resource.
        :param TeamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 can_be_deleted: Optional[pulumi.Input[bool]] = None,
                 can_be_renamed: Optional[pulumi.Input[bool]] = None,
                 can_change_members: Optional[pulumi.Input[bool]] = None,
                 can_change_roles: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TeamExternalSecurityGroupArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 user_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TeamUserRoleArgs']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamArgs.__new__(TeamArgs)

            __props__.__dict__["can_be_deleted"] = can_be_deleted
            __props__.__dict__["can_be_renamed"] = can_be_renamed
            __props__.__dict__["can_change_members"] = can_change_members
            __props__.__dict__["can_change_roles"] = can_change_roles
            __props__.__dict__["description"] = description
            __props__.__dict__["external_security_groups"] = external_security_groups
            __props__.__dict__["name"] = name
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["user_roles"] = user_roles
            __props__.__dict__["users"] = users
        super(Team, __self__).__init__(
            'octopusdeploy:index/team:Team',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            can_be_deleted: Optional[pulumi.Input[bool]] = None,
            can_be_renamed: Optional[pulumi.Input[bool]] = None,
            can_change_members: Optional[pulumi.Input[bool]] = None,
            can_change_roles: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            external_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TeamExternalSecurityGroupArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            user_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TeamUserRoleArgs']]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Team':
        """
        Get an existing Team resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The user-friendly description of this team.
        :param pulumi.Input[str] name: The name of this team.
        :param pulumi.Input[str] space_id: The space associated with this team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of user IDs designated to be members of this team.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamState.__new__(_TeamState)

        __props__.__dict__["can_be_deleted"] = can_be_deleted
        __props__.__dict__["can_be_renamed"] = can_be_renamed
        __props__.__dict__["can_change_members"] = can_change_members
        __props__.__dict__["can_change_roles"] = can_change_roles
        __props__.__dict__["description"] = description
        __props__.__dict__["external_security_groups"] = external_security_groups
        __props__.__dict__["name"] = name
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["user_roles"] = user_roles
        __props__.__dict__["users"] = users
        return Team(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="canBeDeleted")
    def can_be_deleted(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "can_be_deleted")

    @property
    @pulumi.getter(name="canBeRenamed")
    def can_be_renamed(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "can_be_renamed")

    @property
    @pulumi.getter(name="canChangeMembers")
    def can_change_members(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "can_change_members")

    @property
    @pulumi.getter(name="canChangeRoles")
    def can_change_roles(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "can_change_roles")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The user-friendly description of this team.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalSecurityGroups")
    def external_security_groups(self) -> pulumi.Output[Optional[Sequence['outputs.TeamExternalSecurityGroup']]]:
        return pulumi.get(self, "external_security_groups")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this team.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space associated with this team.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="userRoles")
    def user_roles(self) -> pulumi.Output[Sequence['outputs.TeamUserRole']]:
        return pulumi.get(self, "user_roles")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of user IDs designated to be members of this team.
        """
        return pulumi.get(self, "users")

