# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 username: pulumi.Input[str],
                 email_address: Optional[pulumi.Input[str]] = None,
                 identities: Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityArgs']]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 is_service: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] display_name: The display name of this resource.
        :param pulumi.Input[str] username: The username associated with this resource.
        :param pulumi.Input[str] email_address: The email address of this resource.
        :param pulumi.Input[str] password: The password associated with this resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "username", username)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if identities is not None:
            pulumi.set(__self__, "identities", identities)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if is_service is not None:
            pulumi.set(__self__, "is_service", is_service)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The display name of this resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of this resource.
        """
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_address", value)

    @property
    @pulumi.getter
    def identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityArgs']]]]:
        return pulumi.get(self, "identities")

    @identities.setter
    def identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityArgs']]]]):
        pulumi.set(self, "identities", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="isService")
    def is_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_service")

    @is_service.setter
    def is_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_service", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 can_password_be_edited: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email_address: Optional[pulumi.Input[str]] = None,
                 identities: Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityArgs']]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 is_requestor: Optional[pulumi.Input[bool]] = None,
                 is_service: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[str] display_name: The display name of this resource.
        :param pulumi.Input[str] email_address: The email address of this resource.
        :param pulumi.Input[str] password: The password associated with this resource.
        :param pulumi.Input[str] username: The username associated with this resource.
        """
        if can_password_be_edited is not None:
            pulumi.set(__self__, "can_password_be_edited", can_password_be_edited)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if identities is not None:
            pulumi.set(__self__, "identities", identities)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if is_requestor is not None:
            pulumi.set(__self__, "is_requestor", is_requestor)
        if is_service is not None:
            pulumi.set(__self__, "is_service", is_service)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="canPasswordBeEdited")
    def can_password_be_edited(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_password_be_edited")

    @can_password_be_edited.setter
    def can_password_be_edited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_password_be_edited", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of this resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of this resource.
        """
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_address", value)

    @property
    @pulumi.getter
    def identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityArgs']]]]:
        return pulumi.get(self, "identities")

    @identities.setter
    def identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityArgs']]]]):
        pulumi.set(self, "identities", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="isRequestor")
    def is_requestor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_requestor")

    @is_requestor.setter
    def is_requestor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_requestor", value)

    @property
    @pulumi.getter(name="isService")
    def is_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_service")

    @is_service.setter
    def is_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_service", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email_address: Optional[pulumi.Input[str]] = None,
                 identities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserIdentityArgs']]]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 is_service: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages users in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.User("example",
            display_name="Bob Smith",
            email_address="bob.smith@example.com",
            identities=[octopusdeploy.UserIdentityArgs(
                claims=[
                    octopusdeploy.UserIdentityClaimArgs(
                        is_identifying_claim=True,
                        name="email",
                        value="bob.smith@example.com",
                    ),
                    octopusdeploy.UserIdentityClaimArgs(
                        is_identifying_claim=False,
                        name="dn",
                        value="Bob Smith",
                    ),
                ],
                provider="Octopus ID",
            )],
            is_active=True,
            is_service=False,
            password="###########",
            username="[username]")
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/user:User [options] octopusdeploy_user.<name> <user-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The display name of this resource.
        :param pulumi.Input[str] email_address: The email address of this resource.
        :param pulumi.Input[str] password: The password associated with this resource.
        :param pulumi.Input[str] username: The username associated with this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages users in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.User("example",
            display_name="Bob Smith",
            email_address="bob.smith@example.com",
            identities=[octopusdeploy.UserIdentityArgs(
                claims=[
                    octopusdeploy.UserIdentityClaimArgs(
                        is_identifying_claim=True,
                        name="email",
                        value="bob.smith@example.com",
                    ),
                    octopusdeploy.UserIdentityClaimArgs(
                        is_identifying_claim=False,
                        name="dn",
                        value="Bob Smith",
                    ),
                ],
                provider="Octopus ID",
            )],
            is_active=True,
            is_service=False,
            password="###########",
            username="[username]")
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/user:User [options] octopusdeploy_user.<name> <user-id>
        ```

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email_address: Optional[pulumi.Input[str]] = None,
                 identities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserIdentityArgs']]]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 is_service: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["email_address"] = email_address
            __props__.__dict__["identities"] = identities
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["is_service"] = is_service
            __props__.__dict__["password"] = password
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["can_password_be_edited"] = None
            __props__.__dict__["is_requestor"] = None
        super(User, __self__).__init__(
            'octopusdeploy:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            can_password_be_edited: Optional[pulumi.Input[bool]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            email_address: Optional[pulumi.Input[str]] = None,
            identities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserIdentityArgs']]]]] = None,
            is_active: Optional[pulumi.Input[bool]] = None,
            is_requestor: Optional[pulumi.Input[bool]] = None,
            is_service: Optional[pulumi.Input[bool]] = None,
            password: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The display name of this resource.
        :param pulumi.Input[str] email_address: The email address of this resource.
        :param pulumi.Input[str] password: The password associated with this resource.
        :param pulumi.Input[str] username: The username associated with this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["can_password_be_edited"] = can_password_be_edited
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["email_address"] = email_address
        __props__.__dict__["identities"] = identities
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["is_requestor"] = is_requestor
        __props__.__dict__["is_service"] = is_service
        __props__.__dict__["password"] = password
        __props__.__dict__["username"] = username
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="canPasswordBeEdited")
    def can_password_be_edited(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "can_password_be_edited")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of this resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> pulumi.Output[Optional[str]]:
        """
        The email address of this resource.
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def identities(self) -> pulumi.Output[Optional[Sequence['outputs.UserIdentity']]]:
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isRequestor")
    def is_requestor(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_requestor")

    @property
    @pulumi.getter(name="isService")
    def is_service(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_service")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")

