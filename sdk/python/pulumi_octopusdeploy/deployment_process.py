# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeploymentProcessArgs', 'DeploymentProcess']

@pulumi.input_type
class DeploymentProcessArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 branch: Optional[pulumi.Input[str]] = None,
                 last_snapshot_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepArgs']]]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a DeploymentProcess resource.
        :param pulumi.Input[str] project_id: The project ID associated with this deployment process.
        :param pulumi.Input[str] branch: The branch name associated with this deployment process (i.e. `main`). This value is optional and only applies to associated projects that are stored in version control.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        pulumi.set(__self__, "project_id", project_id)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if last_snapshot_id is not None:
            pulumi.set(__self__, "last_snapshot_id", last_snapshot_id)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The project ID associated with this deployment process.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        The branch name associated with this deployment process (i.e. `main`). This value is optional and only applies to associated projects that are stored in version control.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="lastSnapshotId")
    def last_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_snapshot_id")

    @last_snapshot_id.setter
    def last_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_snapshot_id", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepArgs']]]]:
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _DeploymentProcessState:
    def __init__(__self__, *,
                 branch: Optional[pulumi.Input[str]] = None,
                 last_snapshot_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepArgs']]]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DeploymentProcess resources.
        :param pulumi.Input[str] branch: The branch name associated with this deployment process (i.e. `main`). This value is optional and only applies to associated projects that are stored in version control.
        :param pulumi.Input[str] project_id: The project ID associated with this deployment process.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if last_snapshot_id is not None:
            pulumi.set(__self__, "last_snapshot_id", last_snapshot_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        The branch name associated with this deployment process (i.e. `main`). This value is optional and only applies to associated projects that are stored in version control.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="lastSnapshotId")
    def last_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_snapshot_id")

    @last_snapshot_id.setter
    def last_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_snapshot_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project ID associated with this deployment process.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepArgs']]]]:
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class DeploymentProcess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 last_snapshot_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentProcessStepArgs']]]]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource manages deployment processes in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        # basic deployment process with 2 run a script steps
        example = octopusdeploy.DeploymentProcess("example",
            project_id="Projects-123",
            steps=[
                octopusdeploy.DeploymentProcessStepArgs(
                    condition="Success",
                    name="Hello world (using PowerShell)",
                    package_requirement="LetOctopusDecide",
                    run_script_actions=[octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using PowerShell)",
                        run_on_server=True,
                        script_body=\"\"\"  Write-Host 'Hello world, using PowerShell'
          #TODO: Experiment with steps of your own :)
          Write-Host '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    )],
                    start_trigger="StartAfterPrevious",
                ),
                octopusdeploy.DeploymentProcessStepArgs(
                    condition="Success",
                    name="Hello world (using Bash)",
                    package_requirement="LetOctopusDecide",
                    run_script_actions=[octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using Bash)",
                        run_on_server=True,
                        script_body=\"\"\"  echo 'Hello world, using Bash'
          #TODO: Experiment with steps of your own :)
          echo '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    )],
                    start_trigger="StartWithPrevious",
                ),
            ])
        # basic deployment process with 2 run a script steps as child steps
        child_step_example = octopusdeploy.DeploymentProcess("childStepExample",
            project_id="Projects-123",
            steps=[octopusdeploy.DeploymentProcessStepArgs(
                condition="Success",
                name="Hello world (using PowerShell)",
                package_requirement="LetOctopusDecide",
                run_script_actions=[
                    octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using PowerShell)",
                        script_body=\"\"\"  Write-Host 'Hello world, using PowerShell'
          #TODO: Experiment with steps of your own :)
          Write-Host '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    ),
                    octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using Bash)",
                        script_body=\"\"\"  echo 'Hello world, using Bash'
          #TODO: Experiment with steps of your own :)
          echo '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    ),
                ],
                start_trigger="StartAfterPrevious",
                target_roles=["hello-world"],
            )])
        # rolling deployment process with a step with 2 run a script steps as child steps deploying to 2 targets in parallel
        child_step_rolling_deployment_example = octopusdeploy.DeploymentProcess("childStepRollingDeploymentExample",
            project_id="Projects-123",
            steps=[octopusdeploy.DeploymentProcessStepArgs(
                condition="Success",
                name="Hello world (using PowerShell)",
                package_requirement="LetOctopusDecide",
                run_script_actions=[
                    octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using PowerShell)",
                        script_body=\"\"\"  Write-Host 'Hello world, using PowerShell'
          #TODO: Experiment with steps of your own :)
          Write-Host '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    ),
                    octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using Bash)",
                        script_body=\"\"\"  echo 'Hello world, using Bash'
          #TODO: Experiment with steps of your own :)
          echo '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    ),
                ],
                start_trigger="StartAfterPrevious",
                target_roles=["hello-world"],
                window_size="2",
            )])
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/deploymentProcess:DeploymentProcess [options] octopusdeploy_deployment_process.<name> <deployment-process-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] branch: The branch name associated with this deployment process (i.e. `main`). This value is optional and only applies to associated projects that are stored in version control.
        :param pulumi.Input[str] project_id: The project ID associated with this deployment process.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeploymentProcessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages deployment processes in Octopus Deploy.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        # basic deployment process with 2 run a script steps
        example = octopusdeploy.DeploymentProcess("example",
            project_id="Projects-123",
            steps=[
                octopusdeploy.DeploymentProcessStepArgs(
                    condition="Success",
                    name="Hello world (using PowerShell)",
                    package_requirement="LetOctopusDecide",
                    run_script_actions=[octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using PowerShell)",
                        run_on_server=True,
                        script_body=\"\"\"  Write-Host 'Hello world, using PowerShell'
          #TODO: Experiment with steps of your own :)
          Write-Host '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    )],
                    start_trigger="StartAfterPrevious",
                ),
                octopusdeploy.DeploymentProcessStepArgs(
                    condition="Success",
                    name="Hello world (using Bash)",
                    package_requirement="LetOctopusDecide",
                    run_script_actions=[octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using Bash)",
                        run_on_server=True,
                        script_body=\"\"\"  echo 'Hello world, using Bash'
          #TODO: Experiment with steps of your own :)
          echo '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    )],
                    start_trigger="StartWithPrevious",
                ),
            ])
        # basic deployment process with 2 run a script steps as child steps
        child_step_example = octopusdeploy.DeploymentProcess("childStepExample",
            project_id="Projects-123",
            steps=[octopusdeploy.DeploymentProcessStepArgs(
                condition="Success",
                name="Hello world (using PowerShell)",
                package_requirement="LetOctopusDecide",
                run_script_actions=[
                    octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using PowerShell)",
                        script_body=\"\"\"  Write-Host 'Hello world, using PowerShell'
          #TODO: Experiment with steps of your own :)
          Write-Host '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    ),
                    octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using Bash)",
                        script_body=\"\"\"  echo 'Hello world, using Bash'
          #TODO: Experiment with steps of your own :)
          echo '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    ),
                ],
                start_trigger="StartAfterPrevious",
                target_roles=["hello-world"],
            )])
        # rolling deployment process with a step with 2 run a script steps as child steps deploying to 2 targets in parallel
        child_step_rolling_deployment_example = octopusdeploy.DeploymentProcess("childStepRollingDeploymentExample",
            project_id="Projects-123",
            steps=[octopusdeploy.DeploymentProcessStepArgs(
                condition="Success",
                name="Hello world (using PowerShell)",
                package_requirement="LetOctopusDecide",
                run_script_actions=[
                    octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using PowerShell)",
                        script_body=\"\"\"  Write-Host 'Hello world, using PowerShell'
          #TODO: Experiment with steps of your own :)
          Write-Host '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    ),
                    octopusdeploy.DeploymentProcessStepRunScriptActionArgs(
                        can_be_used_for_project_versioning=False,
                        condition="Success",
                        is_disabled=False,
                        is_required=True,
                        name="Hello world (using Bash)",
                        script_body=\"\"\"  echo 'Hello world, using Bash'
          #TODO: Experiment with steps of your own :)
          echo '[Learn more about the types of steps available in Octopus](https://g.octopushq.com/OnboardingAddStepsLearnMore)'

        \"\"\",
                    ),
                ],
                start_trigger="StartAfterPrevious",
                target_roles=["hello-world"],
                window_size="2",
            )])
        ```

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/deploymentProcess:DeploymentProcess [options] octopusdeploy_deployment_process.<name> <deployment-process-id>
        ```

        :param str resource_name: The name of the resource.
        :param DeploymentProcessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeploymentProcessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 last_snapshot_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentProcessStepArgs']]]]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeploymentProcessArgs.__new__(DeploymentProcessArgs)

            __props__.__dict__["branch"] = branch
            __props__.__dict__["last_snapshot_id"] = last_snapshot_id
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["steps"] = steps
            __props__.__dict__["version"] = version
        super(DeploymentProcess, __self__).__init__(
            'octopusdeploy:index/deploymentProcess:DeploymentProcess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            branch: Optional[pulumi.Input[str]] = None,
            last_snapshot_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentProcessStepArgs']]]]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'DeploymentProcess':
        """
        Get an existing DeploymentProcess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] branch: The branch name associated with this deployment process (i.e. `main`). This value is optional and only applies to associated projects that are stored in version control.
        :param pulumi.Input[str] project_id: The project ID associated with this deployment process.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeploymentProcessState.__new__(_DeploymentProcessState)

        __props__.__dict__["branch"] = branch
        __props__.__dict__["last_snapshot_id"] = last_snapshot_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["steps"] = steps
        __props__.__dict__["version"] = version
        return DeploymentProcess(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Output[str]:
        """
        The branch name associated with this deployment process (i.e. `main`). This value is optional and only applies to associated projects that are stored in version control.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="lastSnapshotId")
    def last_snapshot_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "last_snapshot_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The project ID associated with this deployment process.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentProcessStep']]]:
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

