# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AzureCloudServiceDeploymentTargetEndpointArgs',
    'AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs',
    'AzureCloudServiceDeploymentTargetEndpointContainerArgs',
    'AzureCloudServiceDeploymentTargetEndpointDestinationArgs',
    'AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs',
    'AzureWebAppDeploymentTargetEndpointArgs',
    'AzureWebAppDeploymentTargetEndpointAuthenticationArgs',
    'AzureWebAppDeploymentTargetEndpointContainerArgs',
    'AzureWebAppDeploymentTargetEndpointDestinationArgs',
    'AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs',
    'ChannelRuleArgs',
    'ChannelRuleActionPackageArgs',
    'DeploymentProcessStepArgs',
    'DeploymentProcessStepActionArgs',
    'DeploymentProcessStepActionActionTemplateArgs',
    'DeploymentProcessStepActionContainerArgs',
    'DeploymentProcessStepActionPackageArgs',
    'DeploymentProcessStepActionPrimaryPackageArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionContainerArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionPackageArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs',
    'DeploymentProcessStepDeployKubernetesSecretActionArgs',
    'DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs',
    'DeploymentProcessStepDeployKubernetesSecretActionContainerArgs',
    'DeploymentProcessStepDeployKubernetesSecretActionPackageArgs',
    'DeploymentProcessStepDeployPackageActionArgs',
    'DeploymentProcessStepDeployPackageActionActionTemplateArgs',
    'DeploymentProcessStepDeployPackageActionContainerArgs',
    'DeploymentProcessStepDeployPackageActionPackageArgs',
    'DeploymentProcessStepDeployPackageActionPrimaryPackageArgs',
    'DeploymentProcessStepDeployPackageActionWindowsServiceArgs',
    'DeploymentProcessStepDeployWindowsServiceActionArgs',
    'DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs',
    'DeploymentProcessStepDeployWindowsServiceActionContainerArgs',
    'DeploymentProcessStepDeployWindowsServiceActionPackageArgs',
    'DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs',
    'DeploymentProcessStepManualInterventionActionArgs',
    'DeploymentProcessStepManualInterventionActionActionTemplateArgs',
    'DeploymentProcessStepManualInterventionActionContainerArgs',
    'DeploymentProcessStepManualInterventionActionPackageArgs',
    'DeploymentProcessStepRunKubectlScriptActionArgs',
    'DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs',
    'DeploymentProcessStepRunKubectlScriptActionContainerArgs',
    'DeploymentProcessStepRunKubectlScriptActionPackageArgs',
    'DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs',
    'DeploymentProcessStepRunScriptActionArgs',
    'DeploymentProcessStepRunScriptActionActionTemplateArgs',
    'DeploymentProcessStepRunScriptActionContainerArgs',
    'DeploymentProcessStepRunScriptActionPackageArgs',
    'DeploymentProcessStepRunScriptActionPrimaryPackageArgs',
    'EnvironmentJiraExtensionSettingsArgs',
    'EnvironmentJiraServiceManagementExtensionSettingsArgs',
    'EnvironmentServicenowExtensionSettingsArgs',
    'KubernetesClusterDeploymentTargetAuthenticationArgs',
    'KubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs',
    'KubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs',
    'KubernetesClusterDeploymentTargetCertificateAuthenticationArgs',
    'KubernetesClusterDeploymentTargetContainerArgs',
    'KubernetesClusterDeploymentTargetEndpointArgs',
    'KubernetesClusterDeploymentTargetEndpointAuthenticationArgs',
    'KubernetesClusterDeploymentTargetEndpointContainerArgs',
    'KubernetesClusterDeploymentTargetEndpointDestinationArgs',
    'KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs',
    'KubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs',
    'LibraryVariableSetTemplateArgs',
    'LifecyclePhaseArgs',
    'LifecyclePhaseReleaseRetentionPolicyArgs',
    'LifecyclePhaseTentacleRetentionPolicyArgs',
    'LifecycleReleaseRetentionPolicyArgs',
    'LifecycleTentacleRetentionPolicyArgs',
    'ListeningTentacleDeploymentTargetTentacleVersionDetailArgs',
    'MachinePolicyMachineCleanupPolicyArgs',
    'MachinePolicyMachineConnectivityPolicyArgs',
    'MachinePolicyMachineHealthCheckPolicyArgs',
    'MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs',
    'MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs',
    'MachinePolicyMachineUpdatePolicyArgs',
    'OfflinePackageDropDeploymentTargetDestinationArgs',
    'OfflinePackageDropDeploymentTargetEndpointArgs',
    'OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs',
    'OfflinePackageDropDeploymentTargetEndpointContainerArgs',
    'OfflinePackageDropDeploymentTargetEndpointDestinationArgs',
    'OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs',
    'PollingTentacleDeploymentTargetEndpointArgs',
    'PollingTentacleDeploymentTargetEndpointAuthenticationArgs',
    'PollingTentacleDeploymentTargetEndpointContainerArgs',
    'PollingTentacleDeploymentTargetEndpointDestinationArgs',
    'PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs',
    'PollingTentacleDeploymentTargetTentacleVersionDetailArgs',
    'ProjectConnectivityPolicyArgs',
    'ProjectGitAnonymousPersistenceSettingsArgs',
    'ProjectGitLibraryPersistenceSettingsArgs',
    'ProjectGitUsernamePasswordPersistenceSettingsArgs',
    'ProjectJiraServiceManagementExtensionSettingsArgs',
    'ProjectReleaseCreationStrategyArgs',
    'ProjectReleaseCreationStrategyReleaseCreationPackageArgs',
    'ProjectServicenowExtensionSettingsArgs',
    'ProjectTemplateArgs',
    'ProjectVersioningStrategyArgs',
    'ProjectVersioningStrategyDonorPackageArgs',
    'RunbookConnectivityPolicyArgs',
    'RunbookProcessStepArgs',
    'RunbookProcessStepActionArgs',
    'RunbookProcessStepActionActionTemplateArgs',
    'RunbookProcessStepActionContainerArgs',
    'RunbookProcessStepActionPackageArgs',
    'RunbookProcessStepActionPrimaryPackageArgs',
    'RunbookProcessStepApplyTerraformTemplateActionArgs',
    'RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs',
    'RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs',
    'RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs',
    'RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs',
    'RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs',
    'RunbookProcessStepApplyTerraformTemplateActionContainerArgs',
    'RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs',
    'RunbookProcessStepApplyTerraformTemplateActionPackageArgs',
    'RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs',
    'RunbookProcessStepApplyTerraformTemplateActionTemplateArgs',
    'RunbookProcessStepDeployKubernetesSecretActionArgs',
    'RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs',
    'RunbookProcessStepDeployKubernetesSecretActionContainerArgs',
    'RunbookProcessStepDeployKubernetesSecretActionPackageArgs',
    'RunbookProcessStepDeployPackageActionArgs',
    'RunbookProcessStepDeployPackageActionActionTemplateArgs',
    'RunbookProcessStepDeployPackageActionContainerArgs',
    'RunbookProcessStepDeployPackageActionPackageArgs',
    'RunbookProcessStepDeployPackageActionPrimaryPackageArgs',
    'RunbookProcessStepDeployPackageActionWindowsServiceArgs',
    'RunbookProcessStepDeployWindowsServiceActionArgs',
    'RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs',
    'RunbookProcessStepDeployWindowsServiceActionContainerArgs',
    'RunbookProcessStepDeployWindowsServiceActionPackageArgs',
    'RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs',
    'RunbookProcessStepManualInterventionActionArgs',
    'RunbookProcessStepManualInterventionActionActionTemplateArgs',
    'RunbookProcessStepManualInterventionActionContainerArgs',
    'RunbookProcessStepManualInterventionActionPackageArgs',
    'RunbookProcessStepRunKubectlScriptActionArgs',
    'RunbookProcessStepRunKubectlScriptActionActionTemplateArgs',
    'RunbookProcessStepRunKubectlScriptActionContainerArgs',
    'RunbookProcessStepRunKubectlScriptActionPackageArgs',
    'RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs',
    'RunbookProcessStepRunScriptActionArgs',
    'RunbookProcessStepRunScriptActionActionTemplateArgs',
    'RunbookProcessStepRunScriptActionContainerArgs',
    'RunbookProcessStepRunScriptActionPackageArgs',
    'RunbookProcessStepRunScriptActionPrimaryPackageArgs',
    'RunbookRetentionPolicyArgs',
    'ScriptModuleScriptArgs',
    'SshConnectionDeploymentTargetEndpointArgs',
    'SshConnectionDeploymentTargetEndpointAuthenticationArgs',
    'SshConnectionDeploymentTargetEndpointContainerArgs',
    'SshConnectionDeploymentTargetEndpointDestinationArgs',
    'SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs',
    'TeamExternalSecurityGroupArgs',
    'TeamUserRoleArgs',
    'TenantProjectEnvironmentArgs',
    'UserIdentityArgs',
    'UserIdentityClaimArgs',
    'VariablePromptArgs',
    'VariablePromptDisplaySettingsArgs',
    'VariablePromptDisplaySettingsSelectOptionArgs',
    'VariableScopeArgs',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetArgs',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointArgs',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationArgs',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerArgs',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationArgs',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetArgs',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointArgs',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerArgs',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetArgs',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointArgs',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationArgs',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerArgs',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationArgs',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs',
    'GetCertificatesCertificateArgs',
    'GetChannelsChannelArgs',
    'GetChannelsChannelRuleArgs',
    'GetChannelsChannelRuleActionPackageArgs',
    'GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetArgs',
    'GetDeploymentTargetsDeploymentTargetArgs',
    'GetDeploymentTargetsDeploymentTargetEndpointArgs',
    'GetDeploymentTargetsDeploymentTargetEndpointAuthenticationArgs',
    'GetDeploymentTargetsDeploymentTargetEndpointContainerArgs',
    'GetDeploymentTargetsDeploymentTargetEndpointDestinationArgs',
    'GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailArgs',
    'GetEnvironmentsEnvironmentArgs',
    'GetEnvironmentsEnvironmentJiraExtensionSettingArgs',
    'GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs',
    'GetEnvironmentsEnvironmentServicenowExtensionSettingArgs',
    'GetFeedsFeedArgs',
    'GetGitCredentialsGitCredentialArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs',
    'GetLibraryVariableSetsLibraryVariableSetArgs',
    'GetLibraryVariableSetsLibraryVariableSetTemplateArgs',
    'GetLifecyclesLifecycleArgs',
    'GetLifecyclesLifecyclePhaseArgs',
    'GetLifecyclesLifecyclePhaseReleaseRetentionPolicyArgs',
    'GetLifecyclesLifecyclePhaseTentacleRetentionPolicyArgs',
    'GetLifecyclesLifecycleReleaseRetentionPolicyArgs',
    'GetLifecyclesLifecycleTentacleRetentionPolicyArgs',
    'GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetArgs',
    'GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailArgs',
    'GetMachinePoliciesMachinePolicyArgs',
    'GetMachinePoliciesMachinePolicyMachineCleanupPolicyArgs',
    'GetMachinePoliciesMachinePolicyMachineConnectivityPolicyArgs',
    'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyArgs',
    'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs',
    'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs',
    'GetMachinePoliciesMachinePolicyMachineUpdatePolicyArgs',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetArgs',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationArgs',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointArgs',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationArgs',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerArgs',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationArgs',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetArgs',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointArgs',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationArgs',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerArgs',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationArgs',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailArgs',
    'GetProjectGroupsProjectGroupArgs',
    'GetProjectsProjectArgs',
    'GetProjectsProjectConnectivityPolicyArgs',
    'GetProjectsProjectGitAnonymousPersistenceSettingArgs',
    'GetProjectsProjectGitLibraryPersistenceSettingArgs',
    'GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs',
    'GetProjectsProjectJiraServiceManagementExtensionSettingArgs',
    'GetProjectsProjectReleaseCreationStrategyArgs',
    'GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageArgs',
    'GetProjectsProjectServicenowExtensionSettingArgs',
    'GetProjectsProjectTemplateArgs',
    'GetProjectsProjectVersioningStrategyArgs',
    'GetProjectsProjectVersioningStrategyDonorPackageArgs',
    'GetScriptModulesScriptModuleArgs',
    'GetScriptModulesScriptModuleScriptArgs',
    'GetSpacesSpaceArgs',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetArgs',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointArgs',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationArgs',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerArgs',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationArgs',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs',
    'GetTagSetsTagSetArgs',
    'GetTeamsTeamArgs',
    'GetTeamsTeamExternalSecurityGroupArgs',
    'GetTenantsTenantArgs',
    'GetTenantsTenantProjectEnvironmentArgs',
    'GetUserRolesUserRoleArgs',
    'GetUsersUserArgs',
    'GetUsersUserIdentityArgs',
    'GetUsersUserIdentityClaimArgs',
    'GetVariablesVariableArgs',
    'GetVariablesVariablePromptArgs',
    'GetVariablesVariablePromptDisplaySettingsArgs',
    'GetVariablesVariablePromptDisplaySettingsSelectOptionArgs',
    'GetVariablesVariableScopeArgs',
    'GetWorkerPoolsWorkerPoolArgs',
]

@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['AzureWebAppDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['AzureWebAppDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['AzureWebAppDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ChannelRuleArgs:
    def __init__(__self__, *,
                 action_packages: pulumi.Input[Sequence[pulumi.Input['ChannelRuleActionPackageArgs']]],
                 id: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "action_packages", action_packages)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter(name="actionPackages")
    def action_packages(self) -> pulumi.Input[Sequence[pulumi.Input['ChannelRuleActionPackageArgs']]]:
        return pulumi.get(self, "action_packages")

    @action_packages.setter
    def action_packages(self, value: pulumi.Input[Sequence[pulumi.Input['ChannelRuleActionPackageArgs']]]):
        pulumi.set(self, "action_packages", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class ChannelRuleActionPackageArgs:
    def __init__(__self__, *,
                 deployment_action: Optional[pulumi.Input[str]] = None,
                 package_reference: Optional[pulumi.Input[str]] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_action")

    @deployment_action.setter
    def deployment_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_action", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class DeploymentProcessStepArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionArgs']]]] = None,
                 apply_terraform_template_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionArgs']]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 condition_expression: Optional[pulumi.Input[str]] = None,
                 deploy_kubernetes_secret_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionArgs']]]] = None,
                 deploy_package_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionArgs']]]] = None,
                 deploy_windows_service_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 manual_intervention_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionArgs']]]] = None,
                 package_requirement: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 run_kubectl_script_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionArgs']]]] = None,
                 run_script_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionArgs']]]] = None,
                 start_trigger: Optional[pulumi.Input[str]] = None,
                 target_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 window_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] condition: When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        :param pulumi.Input[str] condition_expression: The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[str] package_requirement: Whether to run this step before or after package acquisition (if possible)
        :param pulumi.Input[str] start_trigger: Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_roles: The roles that this step run against, or runs on behalf of
        :param pulumi.Input[str] window_size: The maximum number of targets to deploy to simultaneously
        """
        pulumi.set(__self__, "name", name)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if apply_terraform_template_actions is not None:
            pulumi.set(__self__, "apply_terraform_template_actions", apply_terraform_template_actions)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if deploy_kubernetes_secret_actions is not None:
            pulumi.set(__self__, "deploy_kubernetes_secret_actions", deploy_kubernetes_secret_actions)
        if deploy_package_actions is not None:
            pulumi.set(__self__, "deploy_package_actions", deploy_package_actions)
        if deploy_windows_service_actions is not None:
            pulumi.set(__self__, "deploy_windows_service_actions", deploy_windows_service_actions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manual_intervention_actions is not None:
            pulumi.set(__self__, "manual_intervention_actions", manual_intervention_actions)
        if package_requirement is not None:
            pulumi.set(__self__, "package_requirement", package_requirement)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_kubectl_script_actions is not None:
            pulumi.set(__self__, "run_kubectl_script_actions", run_kubectl_script_actions)
        if run_script_actions is not None:
            pulumi.set(__self__, "run_script_actions", run_script_actions)
        if start_trigger is not None:
            pulumi.set(__self__, "start_trigger", start_trigger)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="applyTerraformTemplateActions")
    def apply_terraform_template_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionArgs']]]]:
        return pulumi.get(self, "apply_terraform_template_actions")

    @apply_terraform_template_actions.setter
    def apply_terraform_template_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionArgs']]]]):
        pulumi.set(self, "apply_terraform_template_actions", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[pulumi.Input[str]]:
        """
        The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        """
        return pulumi.get(self, "condition_expression")

    @condition_expression.setter
    def condition_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_expression", value)

    @property
    @pulumi.getter(name="deployKubernetesSecretActions")
    def deploy_kubernetes_secret_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionArgs']]]]:
        return pulumi.get(self, "deploy_kubernetes_secret_actions")

    @deploy_kubernetes_secret_actions.setter
    def deploy_kubernetes_secret_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionArgs']]]]):
        pulumi.set(self, "deploy_kubernetes_secret_actions", value)

    @property
    @pulumi.getter(name="deployPackageActions")
    def deploy_package_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionArgs']]]]:
        return pulumi.get(self, "deploy_package_actions")

    @deploy_package_actions.setter
    def deploy_package_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionArgs']]]]):
        pulumi.set(self, "deploy_package_actions", value)

    @property
    @pulumi.getter(name="deployWindowsServiceActions")
    def deploy_windows_service_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionArgs']]]]:
        return pulumi.get(self, "deploy_windows_service_actions")

    @deploy_windows_service_actions.setter
    def deploy_windows_service_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionArgs']]]]):
        pulumi.set(self, "deploy_windows_service_actions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="manualInterventionActions")
    def manual_intervention_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionArgs']]]]:
        return pulumi.get(self, "manual_intervention_actions")

    @manual_intervention_actions.setter
    def manual_intervention_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionArgs']]]]):
        pulumi.set(self, "manual_intervention_actions", value)

    @property
    @pulumi.getter(name="packageRequirement")
    def package_requirement(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run this step before or after package acquisition (if possible)
        """
        return pulumi.get(self, "package_requirement")

    @package_requirement.setter
    def package_requirement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_requirement", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runKubectlScriptActions")
    def run_kubectl_script_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionArgs']]]]:
        return pulumi.get(self, "run_kubectl_script_actions")

    @run_kubectl_script_actions.setter
    def run_kubectl_script_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionArgs']]]]):
        pulumi.set(self, "run_kubectl_script_actions", value)

    @property
    @pulumi.getter(name="runScriptActions")
    def run_script_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionArgs']]]]:
        return pulumi.get(self, "run_script_actions")

    @run_script_actions.setter
    def run_script_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionArgs']]]]):
        pulumi.set(self, "run_script_actions", value)

    @property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        """
        return pulumi.get(self, "start_trigger")

    @start_trigger.setter
    def start_trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_trigger", value)

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles that this step run against, or runs on behalf of
        """
        return pulumi.get(self, "target_roles")

    @target_roles.setter
    def target_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_roles", value)

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of targets to deploy to simultaneously
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window_size", value)


@pulumi.input_type
class DeploymentProcessStepActionArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['DeploymentProcessStepActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['DeploymentProcessStepActionPrimaryPackageArgs']]:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['DeploymentProcessStepActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class DeploymentProcessStepActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionArgs:
    def __init__(__self__, *,
                 advanced_options: pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs'],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs']] = None,
                 aws_account: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs']] = None,
                 azure_account: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 google_cloud_account: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 inline_template: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 template: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs']] = None,
                 template_parameters: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if aws_account is not None:
            pulumi.set(__self__, "aws_account", aws_account)
        if azure_account is not None:
            pulumi.set(__self__, "azure_account", azure_account)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if google_cloud_account is not None:
            pulumi.set(__self__, "google_cloud_account", google_cloud_account)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inline_template is not None:
            pulumi.set(__self__, "inline_template", inline_template)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs']:
        return pulumi.get(self, "advanced_options")

    @advanced_options.setter
    def advanced_options(self, value: pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs']):
        pulumi.set(self, "advanced_options", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="awsAccount")
    def aws_account(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs']]:
        return pulumi.get(self, "aws_account")

    @aws_account.setter
    def aws_account(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs']]):
        pulumi.set(self, "aws_account", value)

    @property
    @pulumi.getter(name="azureAccount")
    def azure_account(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs']]:
        return pulumi.get(self, "azure_account")

    @azure_account.setter
    def azure_account(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs']]):
        pulumi.set(self, "azure_account", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="googleCloudAccount")
    def google_cloud_account(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']]:
        return pulumi.get(self, "google_cloud_account")

    @google_cloud_account.setter
    def google_cloud_account(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']]):
        pulumi.set(self, "google_cloud_account", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inlineTemplate")
    def inline_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inline_template")

    @inline_template.setter
    def inline_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inline_template", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']]:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs']]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs']]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template_parameters")

    @template_parameters.setter
    def template_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_parameters", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs:
    def __init__(__self__, *,
                 allow_additional_plugin_downloads: Optional[pulumi.Input[bool]] = None,
                 apply_parameters: Optional[pulumi.Input[str]] = None,
                 init_parameters: Optional[pulumi.Input[str]] = None,
                 plugin_cache_directory: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        if allow_additional_plugin_downloads is not None:
            pulumi.set(__self__, "allow_additional_plugin_downloads", allow_additional_plugin_downloads)
        if apply_parameters is not None:
            pulumi.set(__self__, "apply_parameters", apply_parameters)
        if init_parameters is not None:
            pulumi.set(__self__, "init_parameters", init_parameters)
        if plugin_cache_directory is not None:
            pulumi.set(__self__, "plugin_cache_directory", plugin_cache_directory)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="allowAdditionalPluginDownloads")
    def allow_additional_plugin_downloads(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_additional_plugin_downloads")

    @allow_additional_plugin_downloads.setter
    def allow_additional_plugin_downloads(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_additional_plugin_downloads", value)

    @property
    @pulumi.getter(name="applyParameters")
    def apply_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apply_parameters")

    @apply_parameters.setter
    def apply_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apply_parameters", value)

    @property
    @pulumi.getter(name="initParameters")
    def init_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "init_parameters")

    @init_parameters.setter
    def init_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "init_parameters", value)

    @property
    @pulumi.getter(name="pluginCacheDirectory")
    def plugin_cache_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin_cache_directory")

    @plugin_cache_directory.setter
    def plugin_cache_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_cache_directory", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 variable: Optional[pulumi.Input[str]] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 role_session_name: Optional[pulumi.Input[str]] = None,
                 session_duration: Optional[pulumi.Input[int]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_session_name is not None:
            pulumi.set(__self__, "role_session_name", role_session_name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleSessionName")
    def role_session_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_session_name")

    @role_session_name.setter
    def role_session_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_session_name", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_duration", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs:
    def __init__(__self__, *,
                 variable: Optional[pulumi.Input[str]] = None):
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs:
    def __init__(__self__, *,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 variable: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs:
    def __init__(__self__, *,
                 additional_variable_files: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 run_automatic_file_substitution: Optional[pulumi.Input[bool]] = None,
                 target_files: Optional[pulumi.Input[str]] = None):
        if additional_variable_files is not None:
            pulumi.set(__self__, "additional_variable_files", additional_variable_files)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if run_automatic_file_substitution is not None:
            pulumi.set(__self__, "run_automatic_file_substitution", run_automatic_file_substitution)
        if target_files is not None:
            pulumi.set(__self__, "target_files", target_files)

    @property
    @pulumi.getter(name="additionalVariableFiles")
    def additional_variable_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_variable_files")

    @additional_variable_files.setter
    def additional_variable_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_variable_files", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter(name="runAutomaticFileSubstitution")
    def run_automatic_file_substitution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_automatic_file_substitution")

    @run_automatic_file_substitution.setter
    def run_automatic_file_substitution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_automatic_file_substitution", value)

    @property
    @pulumi.getter(name="targetFiles")
    def target_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_files")

    @target_files.setter
    def target_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_files", value)


@pulumi.input_type
class DeploymentProcessStepDeployKubernetesSecretActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 secret_name: pulumi.Input[str],
                 secret_values: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_values", secret_values)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="secretValues")
    def secret_values(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "secret_values")

    @secret_values.setter
    def secret_values(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "secret_values", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepDeployKubernetesSecretActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepDeployKubernetesSecretActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 primary_package: pulumi.Input['DeploymentProcessStepDeployPackageActionPrimaryPackageArgs'],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 windows_service: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionWindowsServiceArgs']] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if windows_service is not None:
            pulumi.set(__self__, "windows_service", windows_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> pulumi.Input['DeploymentProcessStepDeployPackageActionPrimaryPackageArgs']:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: pulumi.Input['DeploymentProcessStepDeployPackageActionPrimaryPackageArgs']):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="windowsService")
    def windows_service(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionWindowsServiceArgs']]:
        return pulumi.get(self, "windows_service")

    @windows_service.setter
    def windows_service(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionWindowsServiceArgs']]):
        pulumi.set(self, "windows_service", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionWindowsServiceArgs:
    def __init__(__self__, *,
                 executable_path: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 arguments: Optional[pulumi.Input[str]] = None,
                 create_or_update_service: Optional[pulumi.Input[bool]] = None,
                 custom_account_name: Optional[pulumi.Input[str]] = None,
                 custom_account_password: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 start_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "service_name", service_name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "executable_path")

    @executable_path.setter
    def executable_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "executable_path", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_or_update_service")

    @create_or_update_service.setter
    def create_or_update_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_or_update_service", value)

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_account_name")

    @custom_account_name.setter
    def custom_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_name", value)

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_account_password")

    @custom_account_password.setter
    def custom_account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_password", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_mode")

    @start_mode.setter
    def start_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mode", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionArgs:
    def __init__(__self__, *,
                 executable_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_package: pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs'],
                 service_name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs']] = None,
                 arguments: Optional[pulumi.Input[str]] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionContainerArgs']]]] = None,
                 create_or_update_service: Optional[pulumi.Input[bool]] = None,
                 custom_account_name: Optional[pulumi.Input[str]] = None,
                 custom_account_password: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 start_mode: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        pulumi.set(__self__, "service_name", service_name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "executable_path")

    @executable_path.setter
    def executable_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "executable_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs']:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs']):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_or_update_service")

    @create_or_update_service.setter
    def create_or_update_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_or_update_service", value)

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_account_name")

    @custom_account_name.setter
    def custom_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_name", value)

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_account_password")

    @custom_account_password.setter
    def custom_account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_password", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_mode")

    @start_mode.setter
    def start_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mode", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepManualInterventionActionArgs:
    def __init__(__self__, *,
                 instructions: pulumi.Input[str],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepManualInterventionActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 responsible_teams: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "instructions", instructions)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if responsible_teams is not None:
            pulumi.set(__self__, "responsible_teams", responsible_teams)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def instructions(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: pulumi.Input[str]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepManualInterventionActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepManualInterventionActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="responsibleTeams")
    def responsible_teams(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "responsible_teams")

    @responsible_teams.setter
    def responsible_teams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "responsible_teams", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class DeploymentProcessStepManualInterventionActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepManualInterventionActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepManualInterventionActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 script_file_name: Optional[pulumi.Input[str]] = None,
                 script_parameters: Optional[pulumi.Input[str]] = None,
                 script_source: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs']]:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_file_name")

    @script_file_name.setter
    def script_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_file_name", value)

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_parameters")

    @script_parameters.setter
    def script_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_parameters", value)

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_source")

    @script_source.setter
    def script_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_source", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 script_body: Optional[pulumi.Input[str]] = None,
                 script_file_name: Optional[pulumi.Input[str]] = None,
                 script_parameters: Optional[pulumi.Input[str]] = None,
                 script_source: Optional[pulumi.Input[str]] = None,
                 script_syntax: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variable_substitution_in_files: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            warnings.warn("""This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""", DeprecationWarning)
            pulumi.log.warn("""properties is deprecated: This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""")
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepRunScriptActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['DeploymentProcessStepRunScriptActionPrimaryPackageArgs']]:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_file_name")

    @script_file_name.setter
    def script_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_file_name", value)

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_parameters")

    @script_parameters.setter
    def script_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_parameters", value)

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_source")

    @script_source.setter
    def script_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_source", value)

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_syntax")

    @script_syntax.setter
    def script_syntax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_syntax", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable_substitution_in_files")

    @variable_substitution_in_files.setter
    def variable_substitution_in_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_substitution_in_files", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this deployment process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this deployment process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class EnvironmentJiraExtensionSettingsArgs:
    def __init__(__self__, *,
                 environment_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] environment_type: The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, or `"unmapped"`.
        """
        pulumi.set(__self__, "environment_type", environment_type)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Input[str]:
        """
        The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, or `"unmapped"`.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_type", value)


@pulumi.input_type
class EnvironmentJiraServiceManagementExtensionSettingsArgs:
    def __init__(__self__, *,
                 is_enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] is_enabled: Specifies whether or not this extension is enabled for this project.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class EnvironmentServicenowExtensionSettingsArgs:
    def __init__(__self__, *,
                 is_enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] is_enabled: Specifies whether or not this extension is enabled for this project.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 cluster_resource_group: pulumi.Input[str]):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_resource_group", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetCertificateAuthenticationArgs:
    def __init__(__self__, *,
                 client_certificate: Optional[pulumi.Input[str]] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['KubernetesClusterDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['KubernetesClusterDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['KubernetesClusterDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 project: pulumi.Input[str],
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "project", project)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class LibraryVariableSetTemplateArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 display_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 help_text: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
        :param pulumi.Input[str] default_value: A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        :param pulumi.Input[Mapping[str, Any]] display_settings: The display settings for the parameter.
        :param pulumi.Input[str] help_text: The help presented alongside the parameter input.
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[str] label: The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The display settings for the parameter.
        """
        return pulumi.get(self, "display_settings")

    @display_settings.setter
    def display_settings(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "display_settings", value)

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[pulumi.Input[str]]:
        """
        The help presented alongside the parameter input.
        """
        return pulumi.get(self, "help_text")

    @help_text.setter
    def help_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_text", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class LifecyclePhaseArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 automatic_deployment_targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_optional_phase: Optional[pulumi.Input[bool]] = None,
                 minimum_environments_before_promotion: Optional[pulumi.Input[int]] = None,
                 optional_deployment_targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 release_retention_policy: Optional[pulumi.Input['LifecyclePhaseReleaseRetentionPolicyArgs']] = None,
                 tentacle_retention_policy: Optional[pulumi.Input['LifecyclePhaseTentacleRetentionPolicyArgs']] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] automatic_deployment_targets: Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[bool] is_optional_phase: If false a release must be deployed to this phase before it can be deployed to the next phase.
        :param pulumi.Input[int] minimum_environments_before_promotion: The number of units required before a release can enter the next phase. If 0, all environments are required.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] optional_deployment_targets: Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
        """
        pulumi.set(__self__, "name", name)
        if automatic_deployment_targets is not None:
            pulumi.set(__self__, "automatic_deployment_targets", automatic_deployment_targets)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_optional_phase is not None:
            pulumi.set(__self__, "is_optional_phase", is_optional_phase)
        if minimum_environments_before_promotion is not None:
            pulumi.set(__self__, "minimum_environments_before_promotion", minimum_environments_before_promotion)
        if optional_deployment_targets is not None:
            pulumi.set(__self__, "optional_deployment_targets", optional_deployment_targets)
        if release_retention_policy is not None:
            pulumi.set(__self__, "release_retention_policy", release_retention_policy)
        if tentacle_retention_policy is not None:
            pulumi.set(__self__, "tentacle_retention_policy", tentacle_retention_policy)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="automaticDeploymentTargets")
    def automatic_deployment_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
        """
        return pulumi.get(self, "automatic_deployment_targets")

    @automatic_deployment_targets.setter
    def automatic_deployment_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "automatic_deployment_targets", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isOptionalPhase")
    def is_optional_phase(self) -> Optional[pulumi.Input[bool]]:
        """
        If false a release must be deployed to this phase before it can be deployed to the next phase.
        """
        return pulumi.get(self, "is_optional_phase")

    @is_optional_phase.setter
    def is_optional_phase(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_optional_phase", value)

    @property
    @pulumi.getter(name="minimumEnvironmentsBeforePromotion")
    def minimum_environments_before_promotion(self) -> Optional[pulumi.Input[int]]:
        """
        The number of units required before a release can enter the next phase. If 0, all environments are required.
        """
        return pulumi.get(self, "minimum_environments_before_promotion")

    @minimum_environments_before_promotion.setter
    def minimum_environments_before_promotion(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_environments_before_promotion", value)

    @property
    @pulumi.getter(name="optionalDeploymentTargets")
    def optional_deployment_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
        """
        return pulumi.get(self, "optional_deployment_targets")

    @optional_deployment_targets.setter
    def optional_deployment_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "optional_deployment_targets", value)

    @property
    @pulumi.getter(name="releaseRetentionPolicy")
    def release_retention_policy(self) -> Optional[pulumi.Input['LifecyclePhaseReleaseRetentionPolicyArgs']]:
        return pulumi.get(self, "release_retention_policy")

    @release_retention_policy.setter
    def release_retention_policy(self, value: Optional[pulumi.Input['LifecyclePhaseReleaseRetentionPolicyArgs']]):
        pulumi.set(self, "release_retention_policy", value)

    @property
    @pulumi.getter(name="tentacleRetentionPolicy")
    def tentacle_retention_policy(self) -> Optional[pulumi.Input['LifecyclePhaseTentacleRetentionPolicyArgs']]:
        return pulumi.get(self, "tentacle_retention_policy")

    @tentacle_retention_policy.setter
    def tentacle_retention_policy(self, value: Optional[pulumi.Input['LifecyclePhaseTentacleRetentionPolicyArgs']]):
        pulumi.set(self, "tentacle_retention_policy", value)


@pulumi.input_type
class LifecyclePhaseReleaseRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        :param pulumi.Input[str] unit: The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class LifecyclePhaseTentacleRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        :param pulumi.Input[str] unit: The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class LifecycleReleaseRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        :param pulumi.Input[str] unit: The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class LifecycleTentacleRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        :param pulumi.Input[str] unit: The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days/releases to keep. The default value is `30`. If `0` then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of quantity to keep. Valid units are `Days` or `Items`. The default value is `Days`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class ListeningTentacleDeploymentTargetTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MachinePolicyMachineCleanupPolicyArgs:
    def __init__(__self__, *,
                 delete_machines_behavior: Optional[pulumi.Input[str]] = None,
                 delete_machines_elapsed_timespan: Optional[pulumi.Input[int]] = None):
        if delete_machines_behavior is not None:
            pulumi.set(__self__, "delete_machines_behavior", delete_machines_behavior)
        if delete_machines_elapsed_timespan is not None:
            pulumi.set(__self__, "delete_machines_elapsed_timespan", delete_machines_elapsed_timespan)

    @property
    @pulumi.getter(name="deleteMachinesBehavior")
    def delete_machines_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delete_machines_behavior")

    @delete_machines_behavior.setter
    def delete_machines_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_machines_behavior", value)

    @property
    @pulumi.getter(name="deleteMachinesElapsedTimespan")
    def delete_machines_elapsed_timespan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delete_machines_elapsed_timespan")

    @delete_machines_elapsed_timespan.setter
    def delete_machines_elapsed_timespan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delete_machines_elapsed_timespan", value)


@pulumi.input_type
class MachinePolicyMachineConnectivityPolicyArgs:
    def __init__(__self__, *,
                 machine_connectivity_behavior: Optional[pulumi.Input[str]] = None):
        if machine_connectivity_behavior is not None:
            pulumi.set(__self__, "machine_connectivity_behavior", machine_connectivity_behavior)

    @property
    @pulumi.getter(name="machineConnectivityBehavior")
    def machine_connectivity_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "machine_connectivity_behavior")

    @machine_connectivity_behavior.setter
    def machine_connectivity_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_connectivity_behavior", value)


@pulumi.input_type
class MachinePolicyMachineHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 bash_health_check_policy: pulumi.Input['MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs'],
                 powershell_health_check_policy: pulumi.Input['MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs'],
                 health_check_cron: Optional[pulumi.Input[str]] = None,
                 health_check_cron_timezone: Optional[pulumi.Input[str]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bash_health_check_policy", bash_health_check_policy)
        pulumi.set(__self__, "powershell_health_check_policy", powershell_health_check_policy)
        if health_check_cron is not None:
            pulumi.set(__self__, "health_check_cron", health_check_cron)
        if health_check_cron_timezone is not None:
            pulumi.set(__self__, "health_check_cron_timezone", health_check_cron_timezone)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)

    @property
    @pulumi.getter(name="bashHealthCheckPolicy")
    def bash_health_check_policy(self) -> pulumi.Input['MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs']:
        return pulumi.get(self, "bash_health_check_policy")

    @bash_health_check_policy.setter
    def bash_health_check_policy(self, value: pulumi.Input['MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs']):
        pulumi.set(self, "bash_health_check_policy", value)

    @property
    @pulumi.getter(name="powershellHealthCheckPolicy")
    def powershell_health_check_policy(self) -> pulumi.Input['MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs']:
        return pulumi.get(self, "powershell_health_check_policy")

    @powershell_health_check_policy.setter
    def powershell_health_check_policy(self, value: pulumi.Input['MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs']):
        pulumi.set(self, "powershell_health_check_policy", value)

    @property
    @pulumi.getter(name="healthCheckCron")
    def health_check_cron(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_cron")

    @health_check_cron.setter
    def health_check_cron(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_cron", value)

    @property
    @pulumi.getter(name="healthCheckCronTimezone")
    def health_check_cron_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_cron_timezone")

    @health_check_cron_timezone.setter
    def health_check_cron_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_cron_timezone", value)

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)


@pulumi.input_type
class MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 run_type: Optional[pulumi.Input[str]] = None,
                 script_body: Optional[pulumi.Input[str]] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_type")

    @run_type.setter
    def run_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_type", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)


@pulumi.input_type
class MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 run_type: Optional[pulumi.Input[str]] = None,
                 script_body: Optional[pulumi.Input[str]] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_type")

    @run_type.setter
    def run_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_type", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)


@pulumi.input_type
class MachinePolicyMachineUpdatePolicyArgs:
    def __init__(__self__, *,
                 calamari_update_behavior: Optional[pulumi.Input[str]] = None,
                 tentacle_update_account_id: Optional[pulumi.Input[str]] = None,
                 tentacle_update_behavior: Optional[pulumi.Input[str]] = None):
        if calamari_update_behavior is not None:
            pulumi.set(__self__, "calamari_update_behavior", calamari_update_behavior)
        if tentacle_update_account_id is not None:
            pulumi.set(__self__, "tentacle_update_account_id", tentacle_update_account_id)
        if tentacle_update_behavior is not None:
            pulumi.set(__self__, "tentacle_update_behavior", tentacle_update_behavior)

    @property
    @pulumi.getter(name="calamariUpdateBehavior")
    def calamari_update_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "calamari_update_behavior")

    @calamari_update_behavior.setter
    def calamari_update_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "calamari_update_behavior", value)

    @property
    @pulumi.getter(name="tentacleUpdateAccountId")
    def tentacle_update_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tentacle_update_account_id")

    @tentacle_update_account_id.setter
    def tentacle_update_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tentacle_update_account_id", value)

    @property
    @pulumi.getter(name="tentacleUpdateBehavior")
    def tentacle_update_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tentacle_update_behavior")

    @tentacle_update_behavior.setter
    def tentacle_update_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tentacle_update_behavior", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['PollingTentacleDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['PollingTentacleDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['PollingTentacleDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ProjectConnectivityPolicyArgs:
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: Optional[pulumi.Input[bool]] = None,
                 exclude_unhealthy_targets: Optional[pulumi.Input[bool]] = None,
                 skip_machine_behavior: Optional[pulumi.Input[str]] = None,
                 target_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if exclude_unhealthy_targets is not None:
            pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @allow_deployments_to_no_targets.setter
    def allow_deployments_to_no_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deployments_to_no_targets", value)

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @exclude_unhealthy_targets.setter
    def exclude_unhealthy_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_unhealthy_targets", value)

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_machine_behavior")

    @skip_machine_behavior.setter
    def skip_machine_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_machine_behavior", value)

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "target_roles")

    @target_roles.setter
    def target_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_roles", value)


@pulumi.input_type
class ProjectGitAnonymousPersistenceSettingsArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 base_path: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 protected_branches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] url: The URL associated with these version control settings.
        :param pulumi.Input[str] base_path: The base path associated with these version control settings.
        :param pulumi.Input[str] default_branch: The default branch associated with these version control settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[pulumi.Input[str]]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_path", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")

    @protected_branches.setter
    def protected_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_branches", value)


@pulumi.input_type
class ProjectGitLibraryPersistenceSettingsArgs:
    def __init__(__self__, *,
                 git_credential_id: pulumi.Input[str],
                 url: pulumi.Input[str],
                 base_path: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 protected_branches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] url: The URL associated with these version control settings.
        :param pulumi.Input[str] base_path: The base path associated with these version control settings.
        :param pulumi.Input[str] default_branch: The default branch associated with these version control settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "git_credential_id", git_credential_id)
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_id", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[pulumi.Input[str]]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_path", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")

    @protected_branches.setter
    def protected_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_branches", value)


@pulumi.input_type
class ProjectGitUsernamePasswordPersistenceSettingsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 url: pulumi.Input[str],
                 username: pulumi.Input[str],
                 base_path: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 protected_branches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] password: The password for the Git credential.
        :param pulumi.Input[str] url: The URL associated with these version control settings.
        :param pulumi.Input[str] username: The username for the Git credential.
        :param pulumi.Input[str] base_path: The base path associated with these version control settings.
        :param pulumi.Input[str] default_branch: The default branch associated with these version control settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password for the Git credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username for the Git credential.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[pulumi.Input[str]]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_path", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")

    @protected_branches.setter
    def protected_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_branches", value)


@pulumi.input_type
class ProjectJiraServiceManagementExtensionSettingsArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[str],
                 is_enabled: pulumi.Input[bool],
                 service_desk_project_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] connection_id: The connection identifier associated with the extension settings.
        :param pulumi.Input[bool] is_enabled: Specifies whether or not this extension is enabled for this project.
        :param pulumi.Input[str] service_desk_project_name: The project name associated with this extension.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "service_desk_project_name", service_desk_project_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[str]:
        """
        The connection identifier associated with the extension settings.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="serviceDeskProjectName")
    def service_desk_project_name(self) -> pulumi.Input[str]:
        """
        The project name associated with this extension.
        """
        return pulumi.get(self, "service_desk_project_name")

    @service_desk_project_name.setter
    def service_desk_project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_desk_project_name", value)


@pulumi.input_type
class ProjectReleaseCreationStrategyArgs:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 release_creation_package: Optional[pulumi.Input['ProjectReleaseCreationStrategyReleaseCreationPackageArgs']] = None,
                 release_creation_package_step_id: Optional[pulumi.Input[str]] = None):
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if release_creation_package is not None:
            pulumi.set(__self__, "release_creation_package", release_creation_package)
        if release_creation_package_step_id is not None:
            pulumi.set(__self__, "release_creation_package_step_id", release_creation_package_step_id)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="releaseCreationPackage")
    def release_creation_package(self) -> Optional[pulumi.Input['ProjectReleaseCreationStrategyReleaseCreationPackageArgs']]:
        return pulumi.get(self, "release_creation_package")

    @release_creation_package.setter
    def release_creation_package(self, value: Optional[pulumi.Input['ProjectReleaseCreationStrategyReleaseCreationPackageArgs']]):
        pulumi.set(self, "release_creation_package", value)

    @property
    @pulumi.getter(name="releaseCreationPackageStepId")
    def release_creation_package_step_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release_creation_package_step_id")

    @release_creation_package_step_id.setter
    def release_creation_package_step_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_creation_package_step_id", value)


@pulumi.input_type
class ProjectReleaseCreationStrategyReleaseCreationPackageArgs:
    def __init__(__self__, *,
                 deployment_action: Optional[pulumi.Input[str]] = None,
                 package_reference: Optional[pulumi.Input[str]] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_action")

    @deployment_action.setter
    def deployment_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_action", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class ProjectServicenowExtensionSettingsArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[str],
                 is_enabled: pulumi.Input[bool],
                 is_state_automatically_transitioned: pulumi.Input[bool],
                 standard_change_template_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] connection_id: The connection identifier associated with the extension settings.
        :param pulumi.Input[bool] is_enabled: Specifies whether or not this extension is enabled for this project.
        :param pulumi.Input[bool] is_state_automatically_transitioned: Specifies whether or not this extension will automatically transition the state of a deployment for this project.
        :param pulumi.Input[str] standard_change_template_name: The name of the standard change template associated with this extension.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_state_automatically_transitioned", is_state_automatically_transitioned)
        pulumi.set(__self__, "standard_change_template_name", standard_change_template_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[str]:
        """
        The connection identifier associated with the extension settings.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isStateAutomaticallyTransitioned")
    def is_state_automatically_transitioned(self) -> pulumi.Input[bool]:
        """
        Specifies whether or not this extension will automatically transition the state of a deployment for this project.
        """
        return pulumi.get(self, "is_state_automatically_transitioned")

    @is_state_automatically_transitioned.setter
    def is_state_automatically_transitioned(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_state_automatically_transitioned", value)

    @property
    @pulumi.getter(name="standardChangeTemplateName")
    def standard_change_template_name(self) -> pulumi.Input[str]:
        """
        The name of the standard change template associated with this extension.
        """
        return pulumi.get(self, "standard_change_template_name")

    @standard_change_template_name.setter
    def standard_change_template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "standard_change_template_name", value)


@pulumi.input_type
class ProjectTemplateArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 display_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 help_text: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
        :param pulumi.Input[str] default_value: A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        :param pulumi.Input[Mapping[str, Any]] display_settings: The display settings for the parameter.
        :param pulumi.Input[str] help_text: The help presented alongside the parameter input.
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[str] label: The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The display settings for the parameter.
        """
        return pulumi.get(self, "display_settings")

    @display_settings.setter
    def display_settings(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "display_settings", value)

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[pulumi.Input[str]]:
        """
        The help presented alongside the parameter input.
        """
        return pulumi.get(self, "help_text")

    @help_text.setter
    def help_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_text", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProjectVersioningStrategyArgs:
    def __init__(__self__, *,
                 donor_package: Optional[pulumi.Input['ProjectVersioningStrategyDonorPackageArgs']] = None,
                 donor_package_step_id: Optional[pulumi.Input[str]] = None,
                 template: Optional[pulumi.Input[str]] = None):
        if donor_package is not None:
            pulumi.set(__self__, "donor_package", donor_package)
        if donor_package_step_id is not None:
            pulumi.set(__self__, "donor_package_step_id", donor_package_step_id)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="donorPackage")
    def donor_package(self) -> Optional[pulumi.Input['ProjectVersioningStrategyDonorPackageArgs']]:
        return pulumi.get(self, "donor_package")

    @donor_package.setter
    def donor_package(self, value: Optional[pulumi.Input['ProjectVersioningStrategyDonorPackageArgs']]):
        pulumi.set(self, "donor_package", value)

    @property
    @pulumi.getter(name="donorPackageStepId")
    def donor_package_step_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "donor_package_step_id")

    @donor_package_step_id.setter
    def donor_package_step_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "donor_package_step_id", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class ProjectVersioningStrategyDonorPackageArgs:
    def __init__(__self__, *,
                 deployment_action: Optional[pulumi.Input[str]] = None,
                 package_reference: Optional[pulumi.Input[str]] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_action")

    @deployment_action.setter
    def deployment_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_action", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class RunbookConnectivityPolicyArgs:
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: Optional[pulumi.Input[bool]] = None,
                 exclude_unhealthy_targets: Optional[pulumi.Input[bool]] = None,
                 skip_machine_behavior: Optional[pulumi.Input[str]] = None,
                 target_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if exclude_unhealthy_targets is not None:
            pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @allow_deployments_to_no_targets.setter
    def allow_deployments_to_no_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deployments_to_no_targets", value)

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @exclude_unhealthy_targets.setter
    def exclude_unhealthy_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_unhealthy_targets", value)

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_machine_behavior")

    @skip_machine_behavior.setter
    def skip_machine_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_machine_behavior", value)

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "target_roles")

    @target_roles.setter
    def target_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_roles", value)


@pulumi.input_type
class RunbookProcessStepArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionArgs']]]] = None,
                 apply_terraform_template_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionArgs']]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 condition_expression: Optional[pulumi.Input[str]] = None,
                 deploy_kubernetes_secret_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionArgs']]]] = None,
                 deploy_package_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionArgs']]]] = None,
                 deploy_windows_service_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 manual_intervention_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionArgs']]]] = None,
                 package_requirement: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 run_kubectl_script_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionArgs']]]] = None,
                 run_script_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionArgs']]]] = None,
                 start_trigger: Optional[pulumi.Input[str]] = None,
                 target_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 window_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] condition: When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        :param pulumi.Input[str] condition_expression: The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[str] package_requirement: Whether to run this step before or after package acquisition (if possible)
        :param pulumi.Input[str] start_trigger: Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_roles: The roles that this step run against, or runs on behalf of
        :param pulumi.Input[str] window_size: The maximum number of targets to deploy to simultaneously
        """
        pulumi.set(__self__, "name", name)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if apply_terraform_template_actions is not None:
            pulumi.set(__self__, "apply_terraform_template_actions", apply_terraform_template_actions)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if deploy_kubernetes_secret_actions is not None:
            pulumi.set(__self__, "deploy_kubernetes_secret_actions", deploy_kubernetes_secret_actions)
        if deploy_package_actions is not None:
            pulumi.set(__self__, "deploy_package_actions", deploy_package_actions)
        if deploy_windows_service_actions is not None:
            pulumi.set(__self__, "deploy_windows_service_actions", deploy_windows_service_actions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manual_intervention_actions is not None:
            pulumi.set(__self__, "manual_intervention_actions", manual_intervention_actions)
        if package_requirement is not None:
            pulumi.set(__self__, "package_requirement", package_requirement)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_kubectl_script_actions is not None:
            pulumi.set(__self__, "run_kubectl_script_actions", run_kubectl_script_actions)
        if run_script_actions is not None:
            pulumi.set(__self__, "run_script_actions", run_script_actions)
        if start_trigger is not None:
            pulumi.set(__self__, "start_trigger", start_trigger)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="applyTerraformTemplateActions")
    def apply_terraform_template_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionArgs']]]]:
        return pulumi.get(self, "apply_terraform_template_actions")

    @apply_terraform_template_actions.setter
    def apply_terraform_template_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionArgs']]]]):
        pulumi.set(self, "apply_terraform_template_actions", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[pulumi.Input[str]]:
        """
        The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        """
        return pulumi.get(self, "condition_expression")

    @condition_expression.setter
    def condition_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_expression", value)

    @property
    @pulumi.getter(name="deployKubernetesSecretActions")
    def deploy_kubernetes_secret_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionArgs']]]]:
        return pulumi.get(self, "deploy_kubernetes_secret_actions")

    @deploy_kubernetes_secret_actions.setter
    def deploy_kubernetes_secret_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionArgs']]]]):
        pulumi.set(self, "deploy_kubernetes_secret_actions", value)

    @property
    @pulumi.getter(name="deployPackageActions")
    def deploy_package_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionArgs']]]]:
        return pulumi.get(self, "deploy_package_actions")

    @deploy_package_actions.setter
    def deploy_package_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionArgs']]]]):
        pulumi.set(self, "deploy_package_actions", value)

    @property
    @pulumi.getter(name="deployWindowsServiceActions")
    def deploy_windows_service_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionArgs']]]]:
        return pulumi.get(self, "deploy_windows_service_actions")

    @deploy_windows_service_actions.setter
    def deploy_windows_service_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionArgs']]]]):
        pulumi.set(self, "deploy_windows_service_actions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="manualInterventionActions")
    def manual_intervention_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionArgs']]]]:
        return pulumi.get(self, "manual_intervention_actions")

    @manual_intervention_actions.setter
    def manual_intervention_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionArgs']]]]):
        pulumi.set(self, "manual_intervention_actions", value)

    @property
    @pulumi.getter(name="packageRequirement")
    def package_requirement(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run this step before or after package acquisition (if possible)
        """
        return pulumi.get(self, "package_requirement")

    @package_requirement.setter
    def package_requirement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_requirement", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runKubectlScriptActions")
    def run_kubectl_script_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionArgs']]]]:
        return pulumi.get(self, "run_kubectl_script_actions")

    @run_kubectl_script_actions.setter
    def run_kubectl_script_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionArgs']]]]):
        pulumi.set(self, "run_kubectl_script_actions", value)

    @property
    @pulumi.getter(name="runScriptActions")
    def run_script_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionArgs']]]]:
        return pulumi.get(self, "run_script_actions")

    @run_script_actions.setter
    def run_script_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionArgs']]]]):
        pulumi.set(self, "run_script_actions", value)

    @property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        """
        return pulumi.get(self, "start_trigger")

    @start_trigger.setter
    def start_trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_trigger", value)

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles that this step run against, or runs on behalf of
        """
        return pulumi.get(self, "target_roles")

    @target_roles.setter
    def target_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_roles", value)

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of targets to deploy to simultaneously
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window_size", value)


@pulumi.input_type
class RunbookProcessStepActionArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['RunbookProcessStepActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['RunbookProcessStepActionPrimaryPackageArgs']]:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['RunbookProcessStepActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class RunbookProcessStepActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionArgs:
    def __init__(__self__, *,
                 advanced_options: pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs'],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs']] = None,
                 aws_account: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs']] = None,
                 azure_account: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 google_cloud_account: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 inline_template: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 template: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionTemplateArgs']] = None,
                 template_parameters: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if aws_account is not None:
            pulumi.set(__self__, "aws_account", aws_account)
        if azure_account is not None:
            pulumi.set(__self__, "azure_account", azure_account)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if google_cloud_account is not None:
            pulumi.set(__self__, "google_cloud_account", google_cloud_account)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inline_template is not None:
            pulumi.set(__self__, "inline_template", inline_template)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs']:
        return pulumi.get(self, "advanced_options")

    @advanced_options.setter
    def advanced_options(self, value: pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs']):
        pulumi.set(self, "advanced_options", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="awsAccount")
    def aws_account(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs']]:
        return pulumi.get(self, "aws_account")

    @aws_account.setter
    def aws_account(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs']]):
        pulumi.set(self, "aws_account", value)

    @property
    @pulumi.getter(name="azureAccount")
    def azure_account(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs']]:
        return pulumi.get(self, "azure_account")

    @azure_account.setter
    def azure_account(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs']]):
        pulumi.set(self, "azure_account", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="googleCloudAccount")
    def google_cloud_account(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']]:
        return pulumi.get(self, "google_cloud_account")

    @google_cloud_account.setter
    def google_cloud_account(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']]):
        pulumi.set(self, "google_cloud_account", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inlineTemplate")
    def inline_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inline_template")

    @inline_template.setter
    def inline_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inline_template", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']]:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionTemplateArgs']]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionTemplateArgs']]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template_parameters")

    @template_parameters.setter
    def template_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_parameters", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs:
    def __init__(__self__, *,
                 allow_additional_plugin_downloads: Optional[pulumi.Input[bool]] = None,
                 apply_parameters: Optional[pulumi.Input[str]] = None,
                 init_parameters: Optional[pulumi.Input[str]] = None,
                 plugin_cache_directory: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        if allow_additional_plugin_downloads is not None:
            pulumi.set(__self__, "allow_additional_plugin_downloads", allow_additional_plugin_downloads)
        if apply_parameters is not None:
            pulumi.set(__self__, "apply_parameters", apply_parameters)
        if init_parameters is not None:
            pulumi.set(__self__, "init_parameters", init_parameters)
        if plugin_cache_directory is not None:
            pulumi.set(__self__, "plugin_cache_directory", plugin_cache_directory)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="allowAdditionalPluginDownloads")
    def allow_additional_plugin_downloads(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_additional_plugin_downloads")

    @allow_additional_plugin_downloads.setter
    def allow_additional_plugin_downloads(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_additional_plugin_downloads", value)

    @property
    @pulumi.getter(name="applyParameters")
    def apply_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apply_parameters")

    @apply_parameters.setter
    def apply_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apply_parameters", value)

    @property
    @pulumi.getter(name="initParameters")
    def init_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "init_parameters")

    @init_parameters.setter
    def init_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "init_parameters", value)

    @property
    @pulumi.getter(name="pluginCacheDirectory")
    def plugin_cache_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin_cache_directory")

    @plugin_cache_directory.setter
    def plugin_cache_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_cache_directory", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 variable: Optional[pulumi.Input[str]] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 role_session_name: Optional[pulumi.Input[str]] = None,
                 session_duration: Optional[pulumi.Input[int]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_session_name is not None:
            pulumi.set(__self__, "role_session_name", role_session_name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleSessionName")
    def role_session_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_session_name")

    @role_session_name.setter
    def role_session_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_session_name", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_duration", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs:
    def __init__(__self__, *,
                 variable: Optional[pulumi.Input[str]] = None):
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs:
    def __init__(__self__, *,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 variable: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionTemplateArgs:
    def __init__(__self__, *,
                 additional_variable_files: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 run_automatic_file_substitution: Optional[pulumi.Input[bool]] = None,
                 target_files: Optional[pulumi.Input[str]] = None):
        if additional_variable_files is not None:
            pulumi.set(__self__, "additional_variable_files", additional_variable_files)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if run_automatic_file_substitution is not None:
            pulumi.set(__self__, "run_automatic_file_substitution", run_automatic_file_substitution)
        if target_files is not None:
            pulumi.set(__self__, "target_files", target_files)

    @property
    @pulumi.getter(name="additionalVariableFiles")
    def additional_variable_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_variable_files")

    @additional_variable_files.setter
    def additional_variable_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_variable_files", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter(name="runAutomaticFileSubstitution")
    def run_automatic_file_substitution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_automatic_file_substitution")

    @run_automatic_file_substitution.setter
    def run_automatic_file_substitution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_automatic_file_substitution", value)

    @property
    @pulumi.getter(name="targetFiles")
    def target_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_files")

    @target_files.setter
    def target_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_files", value)


@pulumi.input_type
class RunbookProcessStepDeployKubernetesSecretActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 secret_name: pulumi.Input[str],
                 secret_values: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 action_template: Optional[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_values", secret_values)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="secretValues")
    def secret_values(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "secret_values")

    @secret_values.setter
    def secret_values(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "secret_values", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepDeployKubernetesSecretActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepDeployKubernetesSecretActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 primary_package: pulumi.Input['RunbookProcessStepDeployPackageActionPrimaryPackageArgs'],
                 action_template: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 windows_service: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionWindowsServiceArgs']] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if windows_service is not None:
            pulumi.set(__self__, "windows_service", windows_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> pulumi.Input['RunbookProcessStepDeployPackageActionPrimaryPackageArgs']:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: pulumi.Input['RunbookProcessStepDeployPackageActionPrimaryPackageArgs']):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepDeployPackageActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="windowsService")
    def windows_service(self) -> Optional[pulumi.Input['RunbookProcessStepDeployPackageActionWindowsServiceArgs']]:
        return pulumi.get(self, "windows_service")

    @windows_service.setter
    def windows_service(self, value: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionWindowsServiceArgs']]):
        pulumi.set(self, "windows_service", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionWindowsServiceArgs:
    def __init__(__self__, *,
                 executable_path: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 arguments: Optional[pulumi.Input[str]] = None,
                 create_or_update_service: Optional[pulumi.Input[bool]] = None,
                 custom_account_name: Optional[pulumi.Input[str]] = None,
                 custom_account_password: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 start_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "service_name", service_name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "executable_path")

    @executable_path.setter
    def executable_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "executable_path", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_or_update_service")

    @create_or_update_service.setter
    def create_or_update_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_or_update_service", value)

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_account_name")

    @custom_account_name.setter
    def custom_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_name", value)

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_account_password")

    @custom_account_password.setter
    def custom_account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_password", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_mode")

    @start_mode.setter
    def start_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mode", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionArgs:
    def __init__(__self__, *,
                 executable_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_package: pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs'],
                 service_name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs']] = None,
                 arguments: Optional[pulumi.Input[str]] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionContainerArgs']]]] = None,
                 create_or_update_service: Optional[pulumi.Input[bool]] = None,
                 custom_account_name: Optional[pulumi.Input[str]] = None,
                 custom_account_password: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 start_mode: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        pulumi.set(__self__, "service_name", service_name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "executable_path")

    @executable_path.setter
    def executable_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "executable_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs']:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs']):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_or_update_service")

    @create_or_update_service.setter
    def create_or_update_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_or_update_service", value)

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_account_name")

    @custom_account_name.setter
    def custom_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_name", value)

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_account_password")

    @custom_account_password.setter
    def custom_account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_password", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_mode")

    @start_mode.setter
    def start_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mode", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepManualInterventionActionArgs:
    def __init__(__self__, *,
                 instructions: pulumi.Input[str],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepManualInterventionActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 responsible_teams: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "instructions", instructions)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if responsible_teams is not None:
            pulumi.set(__self__, "responsible_teams", responsible_teams)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def instructions(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: pulumi.Input[str]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepManualInterventionActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepManualInterventionActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="responsibleTeams")
    def responsible_teams(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "responsible_teams")

    @responsible_teams.setter
    def responsible_teams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "responsible_teams", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class RunbookProcessStepManualInterventionActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepManualInterventionActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepManualInterventionActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 script_file_name: Optional[pulumi.Input[str]] = None,
                 script_parameters: Optional[pulumi.Input[str]] = None,
                 script_source: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs']]:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_file_name")

    @script_file_name.setter
    def script_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_file_name", value)

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_parameters")

    @script_parameters.setter
    def script_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_parameters", value)

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_source")

    @script_source.setter
    def script_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_source", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepRunScriptActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['RunbookProcessStepRunScriptActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 script_body: Optional[pulumi.Input[str]] = None,
                 script_file_name: Optional[pulumi.Input[str]] = None,
                 script_parameters: Optional[pulumi.Input[str]] = None,
                 script_source: Optional[pulumi.Input[str]] = None,
                 script_syntax: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variable_substitution_in_files: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            warnings.warn("""This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""", DeprecationWarning)
            pulumi.log.warn("""properties is deprecated: This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""")
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepRunScriptActionActionTemplateArgs']]:
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepRunScriptActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionPackageArgs']]]]:
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['RunbookProcessStepRunScriptActionPrimaryPackageArgs']]:
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['RunbookProcessStepRunScriptActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_file_name")

    @script_file_name.setter
    def script_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_file_name", value)

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_parameters")

    @script_parameters.setter
    def script_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_parameters", value)

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_source")

    @script_source.setter
    def script_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_source", value)

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_syntax")

    @script_syntax.setter
    def script_syntax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_syntax", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable_substitution_in_files")

    @variable_substitution_in_files.setter
    def variable_substitution_in_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_substitution_in_files", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[int] version: The version number of this runbook process.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of this runbook process.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: How many runs to keep per environment.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        How many runs to keep per environment.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)


@pulumi.input_type
class ScriptModuleScriptArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str],
                 syntax: pulumi.Input[str]):
        """
        :param pulumi.Input[str] body: The body of this script module.
        :param pulumi.Input[str] syntax: The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "syntax", syntax)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        The body of this script module.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def syntax(self) -> pulumi.Input[str]:
        """
        The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        return pulumi.get(self, "syntax")

    @syntax.setter
    def syntax(self, value: pulumi.Input[str]):
        pulumi.set(self, "syntax", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['SshConnectionDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['SshConnectionDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['SshConnectionDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class TeamExternalSecurityGroupArgs:
    def __init__(__self__, *,
                 display_id_and_name: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        if display_id_and_name is not None:
            pulumi.set(__self__, "display_id_and_name", display_id_and_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayIdAndName")
    def display_id_and_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "display_id_and_name")

    @display_id_and_name.setter
    def display_id_and_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_id_and_name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class TeamUserRoleArgs:
    def __init__(__self__, *,
                 space_id: pulumi.Input[str],
                 user_role_id: pulumi.Input[str],
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 project_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] space_id: The space associated with this team.
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "user_role_id", user_role_id)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if project_group_ids is not None:
            pulumi.set(__self__, "project_group_ids", project_group_ids)
        if project_ids is not None:
            pulumi.set(__self__, "project_ids", project_ids)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Input[str]:
        """
        The space associated with this team.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="userRoleId")
    def user_role_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_role_id")

    @user_role_id.setter
    def user_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_role_id", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="projectGroupIds")
    def project_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "project_group_ids")

    @project_group_ids.setter
    def project_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_group_ids", value)

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "project_ids")

    @project_ids.setter
    def project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_ids", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_ids")

    @tenant_ids.setter
    def tenant_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_ids", value)


@pulumi.input_type
class TenantProjectEnvironmentArgs:
    def __init__(__self__, *,
                 environments: pulumi.Input[Sequence[pulumi.Input[str]]],
                 project_id: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this tenant through a project.
        :param pulumi.Input[str] project_id: The project ID associated with this tenant.
        """
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def environments(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of environment IDs associated with this tenant through a project.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The project ID associated with this tenant.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class UserIdentityArgs:
    def __init__(__self__, *,
                 claims: Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityClaimArgs']]]] = None,
                 provider: Optional[pulumi.Input[str]] = None):
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityClaimArgs']]]]:
        return pulumi.get(self, "claims")

    @claims.setter
    def claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityClaimArgs']]]]):
        pulumi.set(self, "claims", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)


@pulumi.input_type
class UserIdentityClaimArgs:
    def __init__(__self__, *,
                 is_identifying_claim: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "is_identifying_claim", is_identifying_claim)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isIdentifyingClaim")
    def is_identifying_claim(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_identifying_claim")

    @is_identifying_claim.setter
    def is_identifying_claim(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_identifying_claim", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VariablePromptArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_settings: Optional[pulumi.Input['VariablePromptDisplaySettingsArgs']] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: The description of this variable prompt option.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this variable prompt option.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[pulumi.Input['VariablePromptDisplaySettingsArgs']]:
        return pulumi.get(self, "display_settings")

    @display_settings.setter
    def display_settings(self, value: Optional[pulumi.Input['VariablePromptDisplaySettingsArgs']]):
        pulumi.set(self, "display_settings", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class VariablePromptDisplaySettingsArgs:
    def __init__(__self__, *,
                 control_type: pulumi.Input[str],
                 select_options: Optional[pulumi.Input[Sequence[pulumi.Input['VariablePromptDisplaySettingsSelectOptionArgs']]]] = None):
        pulumi.set(__self__, "control_type", control_type)
        if select_options is not None:
            pulumi.set(__self__, "select_options", select_options)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "control_type")

    @control_type.setter
    def control_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_type", value)

    @property
    @pulumi.getter(name="selectOptions")
    def select_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VariablePromptDisplaySettingsSelectOptionArgs']]]]:
        return pulumi.get(self, "select_options")

    @select_options.setter
    def select_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VariablePromptDisplaySettingsSelectOptionArgs']]]]):
        pulumi.set(self, "select_options", value)


@pulumi.input_type
class VariablePromptDisplaySettingsSelectOptionArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VariableScopeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 machines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: A list of actions that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: A list of channels that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environments that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] machines: A list of machines that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A list of roles that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags that are scoped to this variable value.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of actions that are scoped to this variable value.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of channels that are scoped to this variable value.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of environments that are scoped to this variable value.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def machines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of machines that are scoped to this variable value.
        """
        return pulumi.get(self, "machines")

    @machines.setter
    def machines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "machines", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of roles that are scoped to this variable value.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags that are scoped to this variable value.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetArgs:
    def __init__(__self__, *,
                 account_id: str,
                 cloud_service_name: str,
                 default_worker_pool_id: str,
                 endpoints: Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointArgs'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 slot: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 storage_account_name: str,
                 swap_if_possible: bool,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str,
                 use_current_instance_count: bool):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "slot", slot)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> str:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: str):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> str:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: str):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointArgs']:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointArgs']):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter
    def slot(self) -> str:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: str):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> str:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: str):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> bool:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: bool):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> bool:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: bool):
        pulumi.set(self, "use_current_instance_count", value)


@pulumi.input_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 authentication: 'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationArgs',
                 communication_style: str,
                 containers: Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerArgs'],
                 destinations: Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationArgs'],
                 id: str,
                 tentacle_version_details: Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationArgs':
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: 'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationArgs'):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: str):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerArgs']:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerArgs']):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationArgs']:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationArgs']):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[str]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[str]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[str]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[str]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[str]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[str]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[str]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[str]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[str]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[str]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[str]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[str]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[bool]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[str]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[str]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[bool]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[str]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[bool]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[str]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[bool]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[str]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[str]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[bool]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[str]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[int]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[str]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[bool]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[str]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[bool]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[bool]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[str]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[str]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[str]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetArgs:
    def __init__(__self__, *,
                 aad_client_credential_secret: str,
                 aad_credential_type: str,
                 aad_user_credential_password: str,
                 aad_user_credential_username: str,
                 certificate_store_location: str,
                 certificate_store_name: str,
                 client_certificate_variable: str,
                 connection_endpoint: str,
                 endpoints: Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointArgs'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 security_mode: str,
                 server_certificate_thumbprint: str,
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        pulumi.set(__self__, "aad_user_credential_password", aad_user_credential_password)
        pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "security_mode", security_mode)
        pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> str:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: str):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> str:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: str):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialPassword")
    def aad_user_credential_password(self) -> str:
        return pulumi.get(self, "aad_user_credential_password")

    @aad_user_credential_password.setter
    def aad_user_credential_password(self, value: str):
        pulumi.set(self, "aad_user_credential_password", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> str:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: str):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> str:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: str):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> str:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: str):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> str:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: str):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> str:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: str):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointArgs']:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointArgs']):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> str:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: str):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> str:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: str):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 authentication: 'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs',
                 communication_style: str,
                 containers: Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerArgs'],
                 destinations: Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs'],
                 id: str,
                 tentacle_version_details: Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs':
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: 'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs'):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: str):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerArgs']:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerArgs']):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs']:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs']):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[str]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[str]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[str]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[str]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[str]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[str]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[str]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[str]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[str]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[str]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[str]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[str]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[bool]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[str]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[str]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[bool]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[str]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[bool]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[str]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[bool]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[str]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[str]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[bool]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[str]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[int]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[str]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[bool]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[str]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[bool]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[bool]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[str]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[str]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[str]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetArgs:
    def __init__(__self__, *,
                 account_id: str,
                 endpoints: Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointArgs'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 resource_group_name: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str,
                 web_app_name: str,
                 web_app_slot_name: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "web_app_name", web_app_name)
        pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointArgs']:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointArgs']):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: str):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> str:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: str):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> str:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: str):
        pulumi.set(self, "web_app_slot_name", value)


@pulumi.input_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 authentication: 'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationArgs',
                 communication_style: str,
                 containers: Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerArgs'],
                 destinations: Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationArgs'],
                 id: str,
                 tentacle_version_details: Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationArgs':
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: 'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationArgs'):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: str):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerArgs']:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerArgs']):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationArgs']:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationArgs']):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[str]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[str]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[str]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[str]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[str]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[str]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[str]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[str]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[str]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[str]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[str]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[str]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[bool]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[str]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[str]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[bool]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[str]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[bool]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[str]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[bool]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[str]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[str]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[bool]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[str]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[int]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[str]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[bool]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[str]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[bool]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[bool]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[str]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[str]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[str]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetCertificatesCertificateArgs:
    def __init__(__self__, *,
                 archived: str,
                 certificate_data: str,
                 certificate_data_format: str,
                 environments: Sequence[str],
                 has_private_key: bool,
                 id: str,
                 is_expired: bool,
                 issuer_common_name: str,
                 issuer_distinguished_name: str,
                 issuer_organization: str,
                 name: str,
                 not_after: str,
                 not_before: str,
                 notes: str,
                 password: str,
                 replaced_by: str,
                 self_signed: bool,
                 serial_number: str,
                 signature_algorithm_name: str,
                 subject_alternative_names: Sequence[str],
                 subject_common_name: str,
                 subject_distinguished_name: str,
                 subject_organization: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 version: int):
        """
        :param str archived: A filter to search for resources that have been archived.
        :param str certificate_data: The encoded data of the certificate.
        :param str certificate_data_format: Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param bool has_private_key: Indicates if the certificate has a private key.
        :param str id: The unique ID for this resource.
        :param bool is_expired: Indicates if the certificate has expired.
        :param str name: The name of this resource.
        :param str password: The password associated with this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "archived", archived)
        pulumi.set(__self__, "certificate_data", certificate_data)
        pulumi.set(__self__, "certificate_data_format", certificate_data_format)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_private_key", has_private_key)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_expired", is_expired)
        pulumi.set(__self__, "issuer_common_name", issuer_common_name)
        pulumi.set(__self__, "issuer_distinguished_name", issuer_distinguished_name)
        pulumi.set(__self__, "issuer_organization", issuer_organization)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "not_after", not_after)
        pulumi.set(__self__, "not_before", not_before)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "replaced_by", replaced_by)
        pulumi.set(__self__, "self_signed", self_signed)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "signature_algorithm_name", signature_algorithm_name)
        pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        pulumi.set(__self__, "subject_common_name", subject_common_name)
        pulumi.set(__self__, "subject_distinguished_name", subject_distinguished_name)
        pulumi.set(__self__, "subject_organization", subject_organization)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def archived(self) -> str:
        """
        A filter to search for resources that have been archived.
        """
        return pulumi.get(self, "archived")

    @archived.setter
    def archived(self, value: str):
        pulumi.set(self, "archived", value)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> str:
        """
        The encoded data of the certificate.
        """
        return pulumi.get(self, "certificate_data")

    @certificate_data.setter
    def certificate_data(self, value: str):
        pulumi.set(self, "certificate_data", value)

    @property
    @pulumi.getter(name="certificateDataFormat")
    def certificate_data_format(self) -> str:
        """
        Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        """
        return pulumi.get(self, "certificate_data_format")

    @certificate_data_format.setter
    def certificate_data_format(self, value: str):
        pulumi.set(self, "certificate_data_format", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasPrivateKey")
    def has_private_key(self) -> bool:
        """
        Indicates if the certificate has a private key.
        """
        return pulumi.get(self, "has_private_key")

    @has_private_key.setter
    def has_private_key(self, value: bool):
        pulumi.set(self, "has_private_key", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isExpired")
    def is_expired(self) -> bool:
        """
        Indicates if the certificate has expired.
        """
        return pulumi.get(self, "is_expired")

    @is_expired.setter
    def is_expired(self, value: bool):
        pulumi.set(self, "is_expired", value)

    @property
    @pulumi.getter(name="issuerCommonName")
    def issuer_common_name(self) -> str:
        return pulumi.get(self, "issuer_common_name")

    @issuer_common_name.setter
    def issuer_common_name(self, value: str):
        pulumi.set(self, "issuer_common_name", value)

    @property
    @pulumi.getter(name="issuerDistinguishedName")
    def issuer_distinguished_name(self) -> str:
        return pulumi.get(self, "issuer_distinguished_name")

    @issuer_distinguished_name.setter
    def issuer_distinguished_name(self, value: str):
        pulumi.set(self, "issuer_distinguished_name", value)

    @property
    @pulumi.getter(name="issuerOrganization")
    def issuer_organization(self) -> str:
        return pulumi.get(self, "issuer_organization")

    @issuer_organization.setter
    def issuer_organization(self, value: str):
        pulumi.set(self, "issuer_organization", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> str:
        return pulumi.get(self, "not_after")

    @not_after.setter
    def not_after(self, value: str):
        pulumi.set(self, "not_after", value)

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> str:
        return pulumi.get(self, "not_before")

    @not_before.setter
    def not_before(self, value: str):
        pulumi.set(self, "not_before", value)

    @property
    @pulumi.getter
    def notes(self) -> str:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: str):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="replacedBy")
    def replaced_by(self) -> str:
        return pulumi.get(self, "replaced_by")

    @replaced_by.setter
    def replaced_by(self, value: str):
        pulumi.set(self, "replaced_by", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> bool:
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(self, value: bool):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: str):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="signatureAlgorithmName")
    def signature_algorithm_name(self) -> str:
        return pulumi.get(self, "signature_algorithm_name")

    @signature_algorithm_name.setter
    def signature_algorithm_name(self, value: str):
        pulumi.set(self, "signature_algorithm_name", value)

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Sequence[str]:
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Sequence[str]):
        pulumi.set(self, "subject_alternative_names", value)

    @property
    @pulumi.getter(name="subjectCommonName")
    def subject_common_name(self) -> str:
        return pulumi.get(self, "subject_common_name")

    @subject_common_name.setter
    def subject_common_name(self, value: str):
        pulumi.set(self, "subject_common_name", value)

    @property
    @pulumi.getter(name="subjectDistinguishedName")
    def subject_distinguished_name(self) -> str:
        return pulumi.get(self, "subject_distinguished_name")

    @subject_distinguished_name.setter
    def subject_distinguished_name(self, value: str):
        pulumi.set(self, "subject_distinguished_name", value)

    @property
    @pulumi.getter(name="subjectOrganization")
    def subject_organization(self) -> str:
        return pulumi.get(self, "subject_organization")

    @subject_organization.setter
    def subject_organization(self, value: str):
        pulumi.set(self, "subject_organization", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: int):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetChannelsChannelArgs:
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 is_default: bool,
                 lifecycle_id: str,
                 name: str,
                 project_id: str,
                 rules: Sequence['GetChannelsChannelRuleArgs'],
                 space_id: str,
                 tenant_tags: Sequence[str]):
        """
        :param str description: The description of this channel.
        :param str id: The unique ID for this resource.
        :param bool is_default: Indicates if this is the default channel for the associated project.
        :param str lifecycle_id: The lifecycle ID associated with this channel.
        :param str name: The name of this resource.
        :param str project_id: The project ID associated with this channel.
        :param Sequence['GetChannelsChannelRuleArgs'] rules: A list of rules associated with this channel.
        :param str space_id: The space ID associated with this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "lifecycle_id", lifecycle_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this channel.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates if this is the default channel for the associated project.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: bool):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> str:
        """
        The lifecycle ID associated with this channel.
        """
        return pulumi.get(self, "lifecycle_id")

    @lifecycle_id.setter
    def lifecycle_id(self, value: str):
        pulumi.set(self, "lifecycle_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The project ID associated with this channel.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: str):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['GetChannelsChannelRuleArgs']:
        """
        A list of rules associated with this channel.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Sequence['GetChannelsChannelRuleArgs']):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class GetChannelsChannelRuleArgs:
    def __init__(__self__, *,
                 action_packages: Sequence['GetChannelsChannelRuleActionPackageArgs'],
                 id: str,
                 tag: Optional[str] = None,
                 version_range: Optional[str] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "action_packages", action_packages)
        pulumi.set(__self__, "id", id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter(name="actionPackages")
    def action_packages(self) -> Sequence['GetChannelsChannelRuleActionPackageArgs']:
        return pulumi.get(self, "action_packages")

    @action_packages.setter
    def action_packages(self, value: Sequence['GetChannelsChannelRuleActionPackageArgs']):
        pulumi.set(self, "action_packages", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[str]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class GetChannelsChannelRuleActionPackageArgs:
    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @deployment_action.setter
    def deployment_action(self, value: Optional[str]):
        pulumi.set(self, "deployment_action", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: Optional[str]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetArgs:
    def __init__(__self__, *,
                 default_worker_pool_id: str,
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> str:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: str):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GetDeploymentTargetsDeploymentTargetArgs:
    def __init__(__self__, *,
                 endpoints: Sequence['GetDeploymentTargetsDeploymentTargetEndpointArgs'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['GetDeploymentTargetsDeploymentTargetEndpointArgs']:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Sequence['GetDeploymentTargetsDeploymentTargetEndpointArgs']):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GetDeploymentTargetsDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 authentication: 'GetDeploymentTargetsDeploymentTargetEndpointAuthenticationArgs',
                 communication_style: str,
                 containers: Sequence['GetDeploymentTargetsDeploymentTargetEndpointContainerArgs'],
                 destinations: Sequence['GetDeploymentTargetsDeploymentTargetEndpointDestinationArgs'],
                 id: str,
                 tentacle_version_details: Sequence['GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailArgs'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The ID of this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'GetDeploymentTargetsDeploymentTargetEndpointAuthenticationArgs':
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: 'GetDeploymentTargetsDeploymentTargetEndpointAuthenticationArgs'):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: str):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['GetDeploymentTargetsDeploymentTargetEndpointContainerArgs']:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Sequence['GetDeploymentTargetsDeploymentTargetEndpointContainerArgs']):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['GetDeploymentTargetsDeploymentTargetEndpointDestinationArgs']:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Sequence['GetDeploymentTargetsDeploymentTargetEndpointDestinationArgs']):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[str]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[str]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[str]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[str]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[str]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[str]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[str]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[str]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[str]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[str]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[str]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[str]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[bool]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[str]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[str]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[bool]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[str]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[bool]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[str]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[bool]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[str]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class GetDeploymentTargetsDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[str]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[bool]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[str]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[int]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[str]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[bool]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[str]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[bool]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[bool]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[str]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class GetDeploymentTargetsDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[str]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class GetDeploymentTargetsDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[str]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetEnvironmentsEnvironmentArgs:
    def __init__(__self__, *,
                 allow_dynamic_infrastructure: bool,
                 description: str,
                 id: str,
                 jira_extension_settings: Sequence['GetEnvironmentsEnvironmentJiraExtensionSettingArgs'],
                 jira_service_management_extension_settings: Sequence['GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs'],
                 name: str,
                 servicenow_extension_settings: Sequence['GetEnvironmentsEnvironmentServicenowExtensionSettingArgs'],
                 slug: str,
                 sort_order: int,
                 space_id: str,
                 use_guided_failure: bool):
        """
        :param str description: The description of this environment.
        :param str id: The unique ID for this resource.
        :param Sequence['GetEnvironmentsEnvironmentJiraExtensionSettingArgs'] jira_extension_settings: Provides extension settings for the Jira integration for this environment.
        :param Sequence['GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs'] jira_service_management_extension_settings: Provides extension settings for the Jira Service Management (JSM) integration for this environment.
        :param str name: The name of this resource.
        :param Sequence['GetEnvironmentsEnvironmentServicenowExtensionSettingArgs'] servicenow_extension_settings: Provides extension settings for the ServiceNow integration for this environment.
        :param int sort_order: The order number to sort an environment.
        :param str space_id: The space ID associated with this environment.
        """
        pulumi.set(__self__, "allow_dynamic_infrastructure", allow_dynamic_infrastructure)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "jira_extension_settings", jira_extension_settings)
        pulumi.set(__self__, "jira_service_management_extension_settings", jira_service_management_extension_settings)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "servicenow_extension_settings", servicenow_extension_settings)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "use_guided_failure", use_guided_failure)

    @property
    @pulumi.getter(name="allowDynamicInfrastructure")
    def allow_dynamic_infrastructure(self) -> bool:
        return pulumi.get(self, "allow_dynamic_infrastructure")

    @allow_dynamic_infrastructure.setter
    def allow_dynamic_infrastructure(self, value: bool):
        pulumi.set(self, "allow_dynamic_infrastructure", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this environment.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="jiraExtensionSettings")
    def jira_extension_settings(self) -> Sequence['GetEnvironmentsEnvironmentJiraExtensionSettingArgs']:
        """
        Provides extension settings for the Jira integration for this environment.
        """
        return pulumi.get(self, "jira_extension_settings")

    @jira_extension_settings.setter
    def jira_extension_settings(self, value: Sequence['GetEnvironmentsEnvironmentJiraExtensionSettingArgs']):
        pulumi.set(self, "jira_extension_settings", value)

    @property
    @pulumi.getter(name="jiraServiceManagementExtensionSettings")
    def jira_service_management_extension_settings(self) -> Sequence['GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs']:
        """
        Provides extension settings for the Jira Service Management (JSM) integration for this environment.
        """
        return pulumi.get(self, "jira_service_management_extension_settings")

    @jira_service_management_extension_settings.setter
    def jira_service_management_extension_settings(self, value: Sequence['GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs']):
        pulumi.set(self, "jira_service_management_extension_settings", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="servicenowExtensionSettings")
    def servicenow_extension_settings(self) -> Sequence['GetEnvironmentsEnvironmentServicenowExtensionSettingArgs']:
        """
        Provides extension settings for the ServiceNow integration for this environment.
        """
        return pulumi.get(self, "servicenow_extension_settings")

    @servicenow_extension_settings.setter
    def servicenow_extension_settings(self, value: Sequence['GetEnvironmentsEnvironmentServicenowExtensionSettingArgs']):
        pulumi.set(self, "servicenow_extension_settings", value)

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: str):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> int:
        """
        The order number to sort an environment.
        """
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: int):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this environment.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="useGuidedFailure")
    def use_guided_failure(self) -> bool:
        return pulumi.get(self, "use_guided_failure")

    @use_guided_failure.setter
    def use_guided_failure(self, value: bool):
        pulumi.set(self, "use_guided_failure", value)


@pulumi.input_type
class GetEnvironmentsEnvironmentJiraExtensionSettingArgs:
    def __init__(__self__, *,
                 environment_type: str):
        pulumi.set(__self__, "environment_type", environment_type)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> str:
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: str):
        pulumi.set(self, "environment_type", value)


@pulumi.input_type
class GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs:
    def __init__(__self__, *,
                 is_enabled: bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: bool):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class GetEnvironmentsEnvironmentServicenowExtensionSettingArgs:
    def __init__(__self__, *,
                 is_enabled: bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: bool):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class GetFeedsFeedArgs:
    def __init__(__self__, *,
                 access_key: str,
                 api_version: str,
                 delete_unreleased_packages_after_days: int,
                 download_attempts: int,
                 download_retry_backoff_seconds: int,
                 feed_type: str,
                 feed_uri: str,
                 id: str,
                 is_enhanced_mode: bool,
                 name: str,
                 package_acquisition_location_options: Sequence[str],
                 password: str,
                 region: str,
                 registry_path: str,
                 secret_key: str,
                 space_id: str,
                 username: str):
        """
        :param int download_attempts: The number of times a deployment should attempt to download a package from this feed before failing.
        :param int download_retry_backoff_seconds: The number of seconds to apply as a linear back off between download attempts.
        :param str feed_type: A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
        :param str id: The unique ID for this resource.
        :param str name: A short, memorable, unique name for this feed. Example: ACME Builds.
        :param str password: The password associated with this resource.
        :param str space_id: The space ID associated with this resource.
        :param str username: The username associated with this resource.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "delete_unreleased_packages_after_days", delete_unreleased_packages_after_days)
        pulumi.set(__self__, "download_attempts", download_attempts)
        pulumi.set(__self__, "download_retry_backoff_seconds", download_retry_backoff_seconds)
        pulumi.set(__self__, "feed_type", feed_type)
        pulumi.set(__self__, "feed_uri", feed_uri)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enhanced_mode", is_enhanced_mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_acquisition_location_options", package_acquisition_location_options)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "registry_path", registry_path)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: str):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: str):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="deleteUnreleasedPackagesAfterDays")
    def delete_unreleased_packages_after_days(self) -> int:
        return pulumi.get(self, "delete_unreleased_packages_after_days")

    @delete_unreleased_packages_after_days.setter
    def delete_unreleased_packages_after_days(self, value: int):
        pulumi.set(self, "delete_unreleased_packages_after_days", value)

    @property
    @pulumi.getter(name="downloadAttempts")
    def download_attempts(self) -> int:
        """
        The number of times a deployment should attempt to download a package from this feed before failing.
        """
        return pulumi.get(self, "download_attempts")

    @download_attempts.setter
    def download_attempts(self, value: int):
        pulumi.set(self, "download_attempts", value)

    @property
    @pulumi.getter(name="downloadRetryBackoffSeconds")
    def download_retry_backoff_seconds(self) -> int:
        """
        The number of seconds to apply as a linear back off between download attempts.
        """
        return pulumi.get(self, "download_retry_backoff_seconds")

    @download_retry_backoff_seconds.setter
    def download_retry_backoff_seconds(self, value: int):
        pulumi.set(self, "download_retry_backoff_seconds", value)

    @property
    @pulumi.getter(name="feedType")
    def feed_type(self) -> str:
        """
        A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
        """
        return pulumi.get(self, "feed_type")

    @feed_type.setter
    def feed_type(self, value: str):
        pulumi.set(self, "feed_type", value)

    @property
    @pulumi.getter(name="feedUri")
    def feed_uri(self) -> str:
        return pulumi.get(self, "feed_uri")

    @feed_uri.setter
    def feed_uri(self, value: str):
        pulumi.set(self, "feed_uri", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isEnhancedMode")
    def is_enhanced_mode(self) -> bool:
        return pulumi.get(self, "is_enhanced_mode")

    @is_enhanced_mode.setter
    def is_enhanced_mode(self, value: bool):
        pulumi.set(self, "is_enhanced_mode", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A short, memorable, unique name for this feed. Example: ACME Builds.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageAcquisitionLocationOptions")
    def package_acquisition_location_options(self) -> Sequence[str]:
        return pulumi.get(self, "package_acquisition_location_options")

    @package_acquisition_location_options.setter
    def package_acquisition_location_options(self, value: Sequence[str]):
        pulumi.set(self, "package_acquisition_location_options", value)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: str):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="registryPath")
    def registry_path(self) -> str:
        return pulumi.get(self, "registry_path")

    @registry_path.setter
    def registry_path(self, value: str):
        pulumi.set(self, "registry_path", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: str):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: str):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetGitCredentialsGitCredentialArgs:
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 password: str,
                 space_id: str,
                 type: str,
                 username: str):
        """
        :param str description: The description of this Git credential.
        :param str id: The unique ID for this resource.
        :param str name: The name of the Git credential. This name must be unique.
        :param str password: The password for the Git credential.
        :param str space_id: The space ID associated with this resource.
        :param str type: The Git credential authentication type.
        :param str username: The username for the Git credential.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this Git credential.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Git credential. This name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password for the Git credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the Git credential.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: str):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetArgs:
    def __init__(__self__, *,
                 authentications: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationArgs'],
                 aws_account_authentications: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs'],
                 azure_service_principal_authentications: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs'],
                 certificate_authentications: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationArgs'],
                 cluster_certificate: str,
                 cluster_url: str,
                 containers: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerArgs'],
                 default_worker_pool_id: str,
                 endpoints: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointArgs'],
                 environments: Sequence[str],
                 gcp_account_authentications: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs'],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 namespace: str,
                 operating_system: str,
                 proxy_id: str,
                 roles: Sequence[str],
                 running_in_container: bool,
                 shell_name: str,
                 shell_version: str,
                 skip_tls_verification: bool,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "aws_account_authentications", aws_account_authentications)
        pulumi.set(__self__, "azure_service_principal_authentications", azure_service_principal_authentications)
        pulumi.set(__self__, "certificate_authentications", certificate_authentications)
        pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "gcp_account_authentications", gcp_account_authentications)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "running_in_container", running_in_container)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationArgs']:
        return pulumi.get(self, "authentications")

    @authentications.setter
    def authentications(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationArgs']):
        pulumi.set(self, "authentications", value)

    @property
    @pulumi.getter(name="awsAccountAuthentications")
    def aws_account_authentications(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs']:
        return pulumi.get(self, "aws_account_authentications")

    @aws_account_authentications.setter
    def aws_account_authentications(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs']):
        pulumi.set(self, "aws_account_authentications", value)

    @property
    @pulumi.getter(name="azureServicePrincipalAuthentications")
    def azure_service_principal_authentications(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs']:
        return pulumi.get(self, "azure_service_principal_authentications")

    @azure_service_principal_authentications.setter
    def azure_service_principal_authentications(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs']):
        pulumi.set(self, "azure_service_principal_authentications", value)

    @property
    @pulumi.getter(name="certificateAuthentications")
    def certificate_authentications(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationArgs']:
        return pulumi.get(self, "certificate_authentications")

    @certificate_authentications.setter
    def certificate_authentications(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationArgs']):
        pulumi.set(self, "certificate_authentications", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> str:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: str):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: str):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerArgs']:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerArgs']):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> str:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: str):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointArgs']:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointArgs']):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="gcpAccountAuthentications")
    def gcp_account_authentications(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs']:
        return pulumi.get(self, "gcp_account_authentications")

    @gcp_account_authentications.setter
    def gcp_account_authentications(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs']):
        pulumi.set(self, "gcp_account_authentications", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: str):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: str):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> bool:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: bool):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> bool:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: bool):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 use_instance_role: Optional[bool] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: str):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[bool]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[str]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[int]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[bool]):
        pulumi.set(self, "use_instance_role", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 cluster_resource_group: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: str):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> str:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: str):
        pulumi.set(self, "cluster_resource_group", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationArgs:
    def __init__(__self__, *,
                 client_certificate: Optional[str] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[str]):
        pulumi.set(self, "client_certificate", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[str]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 authentication: 'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationArgs',
                 communication_style: str,
                 containers: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerArgs'],
                 destinations: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationArgs'],
                 id: str,
                 tentacle_version_details: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationArgs':
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: 'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationArgs'):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: str):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerArgs']:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerArgs']):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationArgs']:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationArgs']):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[str]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[str]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[str]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[str]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[str]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[str]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[str]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[str]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[str]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[str]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[str]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[str]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[bool]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[str]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[str]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[bool]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[str]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[bool]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[str]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[bool]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[str]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[str]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[bool]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[str]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[int]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[str]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[bool]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[str]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[bool]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[bool]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[str]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[str]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[str]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 project: str,
                 impersonate_service_account: Optional[bool] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "project", project)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: str):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: str):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[bool]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[str]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[bool]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[str]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class GetLibraryVariableSetsLibraryVariableSetArgs:
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 space_id: str,
                 templates: Sequence['GetLibraryVariableSetsLibraryVariableSetTemplateArgs'],
                 variable_set_id: str):
        """
        :param str description: The description of this library variable set.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "templates", templates)
        pulumi.set(__self__, "variable_set_id", variable_set_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this library variable set.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def templates(self) -> Sequence['GetLibraryVariableSetsLibraryVariableSetTemplateArgs']:
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Sequence['GetLibraryVariableSetsLibraryVariableSetTemplateArgs']):
        pulumi.set(self, "templates", value)

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> str:
        return pulumi.get(self, "variable_set_id")

    @variable_set_id.setter
    def variable_set_id(self, value: str):
        pulumi.set(self, "variable_set_id", value)


@pulumi.input_type
class GetLibraryVariableSetsLibraryVariableSetTemplateArgs:
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 default_value: Optional[str] = None,
                 display_settings: Optional[Mapping[str, Any]] = None,
                 help_text: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[str]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "display_settings")

    @display_settings.setter
    def display_settings(self, value: Optional[Mapping[str, Any]]):
        pulumi.set(self, "display_settings", value)

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[str]:
        return pulumi.get(self, "help_text")

    @help_text.setter
    def help_text(self, value: Optional[str]):
        pulumi.set(self, "help_text", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class GetLifecyclesLifecycleArgs:
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 phases: Sequence['GetLifecyclesLifecyclePhaseArgs'],
                 release_retention_policies: Sequence['GetLifecyclesLifecycleReleaseRetentionPolicyArgs'],
                 space_id: str,
                 tentacle_retention_policies: Sequence['GetLifecyclesLifecycleTentacleRetentionPolicyArgs']):
        """
        :param str description: The description of this lifecycle.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phases", phases)
        pulumi.set(__self__, "release_retention_policies", release_retention_policies)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tentacle_retention_policies", tentacle_retention_policies)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this lifecycle.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def phases(self) -> Sequence['GetLifecyclesLifecyclePhaseArgs']:
        return pulumi.get(self, "phases")

    @phases.setter
    def phases(self, value: Sequence['GetLifecyclesLifecyclePhaseArgs']):
        pulumi.set(self, "phases", value)

    @property
    @pulumi.getter(name="releaseRetentionPolicies")
    def release_retention_policies(self) -> Sequence['GetLifecyclesLifecycleReleaseRetentionPolicyArgs']:
        return pulumi.get(self, "release_retention_policies")

    @release_retention_policies.setter
    def release_retention_policies(self, value: Sequence['GetLifecyclesLifecycleReleaseRetentionPolicyArgs']):
        pulumi.set(self, "release_retention_policies", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="tentacleRetentionPolicies")
    def tentacle_retention_policies(self) -> Sequence['GetLifecyclesLifecycleTentacleRetentionPolicyArgs']:
        return pulumi.get(self, "tentacle_retention_policies")

    @tentacle_retention_policies.setter
    def tentacle_retention_policies(self, value: Sequence['GetLifecyclesLifecycleTentacleRetentionPolicyArgs']):
        pulumi.set(self, "tentacle_retention_policies", value)


@pulumi.input_type
class GetLifecyclesLifecyclePhaseArgs:
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 automatic_deployment_targets: Optional[Sequence[str]] = None,
                 is_optional_phase: Optional[bool] = None,
                 minimum_environments_before_promotion: Optional[int] = None,
                 optional_deployment_targets: Optional[Sequence[str]] = None,
                 release_retention_policy: Optional['GetLifecyclesLifecyclePhaseReleaseRetentionPolicyArgs'] = None,
                 tentacle_retention_policy: Optional['GetLifecyclesLifecyclePhaseTentacleRetentionPolicyArgs'] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if automatic_deployment_targets is not None:
            pulumi.set(__self__, "automatic_deployment_targets", automatic_deployment_targets)
        if is_optional_phase is not None:
            pulumi.set(__self__, "is_optional_phase", is_optional_phase)
        if minimum_environments_before_promotion is not None:
            pulumi.set(__self__, "minimum_environments_before_promotion", minimum_environments_before_promotion)
        if optional_deployment_targets is not None:
            pulumi.set(__self__, "optional_deployment_targets", optional_deployment_targets)
        if release_retention_policy is not None:
            pulumi.set(__self__, "release_retention_policy", release_retention_policy)
        if tentacle_retention_policy is not None:
            pulumi.set(__self__, "tentacle_retention_policy", tentacle_retention_policy)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="automaticDeploymentTargets")
    def automatic_deployment_targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "automatic_deployment_targets")

    @automatic_deployment_targets.setter
    def automatic_deployment_targets(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "automatic_deployment_targets", value)

    @property
    @pulumi.getter(name="isOptionalPhase")
    def is_optional_phase(self) -> Optional[bool]:
        return pulumi.get(self, "is_optional_phase")

    @is_optional_phase.setter
    def is_optional_phase(self, value: Optional[bool]):
        pulumi.set(self, "is_optional_phase", value)

    @property
    @pulumi.getter(name="minimumEnvironmentsBeforePromotion")
    def minimum_environments_before_promotion(self) -> Optional[int]:
        return pulumi.get(self, "minimum_environments_before_promotion")

    @minimum_environments_before_promotion.setter
    def minimum_environments_before_promotion(self, value: Optional[int]):
        pulumi.set(self, "minimum_environments_before_promotion", value)

    @property
    @pulumi.getter(name="optionalDeploymentTargets")
    def optional_deployment_targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "optional_deployment_targets")

    @optional_deployment_targets.setter
    def optional_deployment_targets(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "optional_deployment_targets", value)

    @property
    @pulumi.getter(name="releaseRetentionPolicy")
    def release_retention_policy(self) -> Optional['GetLifecyclesLifecyclePhaseReleaseRetentionPolicyArgs']:
        return pulumi.get(self, "release_retention_policy")

    @release_retention_policy.setter
    def release_retention_policy(self, value: Optional['GetLifecyclesLifecyclePhaseReleaseRetentionPolicyArgs']):
        pulumi.set(self, "release_retention_policy", value)

    @property
    @pulumi.getter(name="tentacleRetentionPolicy")
    def tentacle_retention_policy(self) -> Optional['GetLifecyclesLifecyclePhaseTentacleRetentionPolicyArgs']:
        return pulumi.get(self, "tentacle_retention_policy")

    @tentacle_retention_policy.setter
    def tentacle_retention_policy(self, value: Optional['GetLifecyclesLifecyclePhaseTentacleRetentionPolicyArgs']):
        pulumi.set(self, "tentacle_retention_policy", value)


@pulumi.input_type
class GetLifecyclesLifecyclePhaseReleaseRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[int]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[bool]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[str]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class GetLifecyclesLifecyclePhaseTentacleRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[int]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[bool]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[str]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class GetLifecyclesLifecycleReleaseRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[int]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[bool]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[str]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class GetLifecyclesLifecycleTentacleRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[int]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[bool]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[str]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetArgs:
    def __init__(__self__, *,
                 certificate_signature_algorithm: str,
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 proxy_id: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 tentacle_url: str,
                 tentacle_version_details: Sequence['GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailArgs'],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this listening tentacle.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: Represents the disabled status of this deployment target.
        :param bool is_in_process: Represents the in-process status of this deployment target.
        :param str machine_policy_id: The machine policy ID that is associated with this deployment target.
        :param str name: The name of this resource.
        :param str operating_system: The operating system that is associated with this deployment target.
        :param str proxy_id: The proxy ID that is associated with this deployment target.
        :param Sequence[str] roles: A list of role IDs that are associated with this deployment target.
        :param str shell_name: The shell name associated with this deployment target.
        :param str shell_version: The shell version associated with this deployment target.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str tentacle_url: The tenant URL of this deployment target.
        :param str thumbprint: The thumbprint of this deployment target.
        :param str uri: The URI of this deployment target.
        """
        pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "tentacle_url", tentacle_url)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> str:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: str):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this listening tentacle.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        Represents the disabled status of this deployment target.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        """
        Represents the in-process status of this deployment target.
        """
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        """
        The machine policy ID that is associated with this deployment target.
        """
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        """
        The operating system that is associated with this deployment target.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        """
        The proxy ID that is associated with this deployment target.
        """
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: str):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A list of role IDs that are associated with this deployment target.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        """
        The shell name associated with this deployment target.
        """
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        """
        The shell version associated with this deployment target.
        """
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter(name="tentacleUrl")
    def tentacle_url(self) -> str:
        """
        The tenant URL of this deployment target.
        """
        return pulumi.get(self, "tentacle_url")

    @tentacle_url.setter
    def tentacle_url(self, value: str):
        pulumi.set(self, "tentacle_url", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of this deployment target.
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The URI of this deployment target.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetMachinePoliciesMachinePolicyArgs:
    def __init__(__self__, *,
                 connection_connect_timeout: int,
                 connection_retry_count_limit: int,
                 connection_retry_sleep_interval: int,
                 connection_retry_time_limit: int,
                 description: str,
                 id: str,
                 is_default: bool,
                 machine_cleanup_policies: Sequence['GetMachinePoliciesMachinePolicyMachineCleanupPolicyArgs'],
                 machine_connectivity_policies: Sequence['GetMachinePoliciesMachinePolicyMachineConnectivityPolicyArgs'],
                 machine_health_check_policies: Sequence['GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyArgs'],
                 machine_update_policies: Sequence['GetMachinePoliciesMachinePolicyMachineUpdatePolicyArgs'],
                 name: str,
                 polling_request_maximum_message_processing_timeout: int,
                 polling_request_queue_timeout: int,
                 space_id: str):
        """
        :param str description: The description of this machine policy.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "connection_connect_timeout", connection_connect_timeout)
        pulumi.set(__self__, "connection_retry_count_limit", connection_retry_count_limit)
        pulumi.set(__self__, "connection_retry_sleep_interval", connection_retry_sleep_interval)
        pulumi.set(__self__, "connection_retry_time_limit", connection_retry_time_limit)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "machine_cleanup_policies", machine_cleanup_policies)
        pulumi.set(__self__, "machine_connectivity_policies", machine_connectivity_policies)
        pulumi.set(__self__, "machine_health_check_policies", machine_health_check_policies)
        pulumi.set(__self__, "machine_update_policies", machine_update_policies)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "polling_request_maximum_message_processing_timeout", polling_request_maximum_message_processing_timeout)
        pulumi.set(__self__, "polling_request_queue_timeout", polling_request_queue_timeout)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="connectionConnectTimeout")
    def connection_connect_timeout(self) -> int:
        return pulumi.get(self, "connection_connect_timeout")

    @connection_connect_timeout.setter
    def connection_connect_timeout(self, value: int):
        pulumi.set(self, "connection_connect_timeout", value)

    @property
    @pulumi.getter(name="connectionRetryCountLimit")
    def connection_retry_count_limit(self) -> int:
        return pulumi.get(self, "connection_retry_count_limit")

    @connection_retry_count_limit.setter
    def connection_retry_count_limit(self, value: int):
        pulumi.set(self, "connection_retry_count_limit", value)

    @property
    @pulumi.getter(name="connectionRetrySleepInterval")
    def connection_retry_sleep_interval(self) -> int:
        return pulumi.get(self, "connection_retry_sleep_interval")

    @connection_retry_sleep_interval.setter
    def connection_retry_sleep_interval(self, value: int):
        pulumi.set(self, "connection_retry_sleep_interval", value)

    @property
    @pulumi.getter(name="connectionRetryTimeLimit")
    def connection_retry_time_limit(self) -> int:
        return pulumi.get(self, "connection_retry_time_limit")

    @connection_retry_time_limit.setter
    def connection_retry_time_limit(self, value: int):
        pulumi.set(self, "connection_retry_time_limit", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this machine policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: bool):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="machineCleanupPolicies")
    def machine_cleanup_policies(self) -> Sequence['GetMachinePoliciesMachinePolicyMachineCleanupPolicyArgs']:
        return pulumi.get(self, "machine_cleanup_policies")

    @machine_cleanup_policies.setter
    def machine_cleanup_policies(self, value: Sequence['GetMachinePoliciesMachinePolicyMachineCleanupPolicyArgs']):
        pulumi.set(self, "machine_cleanup_policies", value)

    @property
    @pulumi.getter(name="machineConnectivityPolicies")
    def machine_connectivity_policies(self) -> Sequence['GetMachinePoliciesMachinePolicyMachineConnectivityPolicyArgs']:
        return pulumi.get(self, "machine_connectivity_policies")

    @machine_connectivity_policies.setter
    def machine_connectivity_policies(self, value: Sequence['GetMachinePoliciesMachinePolicyMachineConnectivityPolicyArgs']):
        pulumi.set(self, "machine_connectivity_policies", value)

    @property
    @pulumi.getter(name="machineHealthCheckPolicies")
    def machine_health_check_policies(self) -> Sequence['GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyArgs']:
        return pulumi.get(self, "machine_health_check_policies")

    @machine_health_check_policies.setter
    def machine_health_check_policies(self, value: Sequence['GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyArgs']):
        pulumi.set(self, "machine_health_check_policies", value)

    @property
    @pulumi.getter(name="machineUpdatePolicies")
    def machine_update_policies(self) -> Sequence['GetMachinePoliciesMachinePolicyMachineUpdatePolicyArgs']:
        return pulumi.get(self, "machine_update_policies")

    @machine_update_policies.setter
    def machine_update_policies(self, value: Sequence['GetMachinePoliciesMachinePolicyMachineUpdatePolicyArgs']):
        pulumi.set(self, "machine_update_policies", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pollingRequestMaximumMessageProcessingTimeout")
    def polling_request_maximum_message_processing_timeout(self) -> int:
        return pulumi.get(self, "polling_request_maximum_message_processing_timeout")

    @polling_request_maximum_message_processing_timeout.setter
    def polling_request_maximum_message_processing_timeout(self, value: int):
        pulumi.set(self, "polling_request_maximum_message_processing_timeout", value)

    @property
    @pulumi.getter(name="pollingRequestQueueTimeout")
    def polling_request_queue_timeout(self) -> int:
        return pulumi.get(self, "polling_request_queue_timeout")

    @polling_request_queue_timeout.setter
    def polling_request_queue_timeout(self, value: int):
        pulumi.set(self, "polling_request_queue_timeout", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class GetMachinePoliciesMachinePolicyMachineCleanupPolicyArgs:
    def __init__(__self__, *,
                 delete_machines_elapsed_timespan: int,
                 delete_machines_behavior: Optional[str] = None):
        pulumi.set(__self__, "delete_machines_elapsed_timespan", delete_machines_elapsed_timespan)
        if delete_machines_behavior is not None:
            pulumi.set(__self__, "delete_machines_behavior", delete_machines_behavior)

    @property
    @pulumi.getter(name="deleteMachinesElapsedTimespan")
    def delete_machines_elapsed_timespan(self) -> int:
        return pulumi.get(self, "delete_machines_elapsed_timespan")

    @delete_machines_elapsed_timespan.setter
    def delete_machines_elapsed_timespan(self, value: int):
        pulumi.set(self, "delete_machines_elapsed_timespan", value)

    @property
    @pulumi.getter(name="deleteMachinesBehavior")
    def delete_machines_behavior(self) -> Optional[str]:
        return pulumi.get(self, "delete_machines_behavior")

    @delete_machines_behavior.setter
    def delete_machines_behavior(self, value: Optional[str]):
        pulumi.set(self, "delete_machines_behavior", value)


@pulumi.input_type
class GetMachinePoliciesMachinePolicyMachineConnectivityPolicyArgs:
    def __init__(__self__, *,
                 machine_connectivity_behavior: Optional[str] = None):
        if machine_connectivity_behavior is not None:
            pulumi.set(__self__, "machine_connectivity_behavior", machine_connectivity_behavior)

    @property
    @pulumi.getter(name="machineConnectivityBehavior")
    def machine_connectivity_behavior(self) -> Optional[str]:
        return pulumi.get(self, "machine_connectivity_behavior")

    @machine_connectivity_behavior.setter
    def machine_connectivity_behavior(self, value: Optional[str]):
        pulumi.set(self, "machine_connectivity_behavior", value)


@pulumi.input_type
class GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 bash_health_check_policy: 'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs',
                 powershell_health_check_policy: 'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs',
                 health_check_cron: Optional[str] = None,
                 health_check_cron_timezone: Optional[str] = None,
                 health_check_interval: Optional[int] = None,
                 health_check_type: Optional[str] = None):
        pulumi.set(__self__, "bash_health_check_policy", bash_health_check_policy)
        pulumi.set(__self__, "powershell_health_check_policy", powershell_health_check_policy)
        if health_check_cron is not None:
            pulumi.set(__self__, "health_check_cron", health_check_cron)
        if health_check_cron_timezone is not None:
            pulumi.set(__self__, "health_check_cron_timezone", health_check_cron_timezone)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)

    @property
    @pulumi.getter(name="bashHealthCheckPolicy")
    def bash_health_check_policy(self) -> 'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs':
        return pulumi.get(self, "bash_health_check_policy")

    @bash_health_check_policy.setter
    def bash_health_check_policy(self, value: 'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs'):
        pulumi.set(self, "bash_health_check_policy", value)

    @property
    @pulumi.getter(name="powershellHealthCheckPolicy")
    def powershell_health_check_policy(self) -> 'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs':
        return pulumi.get(self, "powershell_health_check_policy")

    @powershell_health_check_policy.setter
    def powershell_health_check_policy(self, value: 'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs'):
        pulumi.set(self, "powershell_health_check_policy", value)

    @property
    @pulumi.getter(name="healthCheckCron")
    def health_check_cron(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron")

    @health_check_cron.setter
    def health_check_cron(self, value: Optional[str]):
        pulumi.set(self, "health_check_cron", value)

    @property
    @pulumi.getter(name="healthCheckCronTimezone")
    def health_check_cron_timezone(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron_timezone")

    @health_check_cron_timezone.setter
    def health_check_cron_timezone(self, value: Optional[str]):
        pulumi.set(self, "health_check_cron_timezone", value)

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[int]:
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[int]):
        pulumi.set(self, "health_check_interval", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[str]:
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[str]):
        pulumi.set(self, "health_check_type", value)


@pulumi.input_type
class GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @run_type.setter
    def run_type(self, value: Optional[str]):
        pulumi.set(self, "run_type", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[str]):
        pulumi.set(self, "script_body", value)


@pulumi.input_type
class GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @run_type.setter
    def run_type(self, value: Optional[str]):
        pulumi.set(self, "run_type", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[str]):
        pulumi.set(self, "script_body", value)


@pulumi.input_type
class GetMachinePoliciesMachinePolicyMachineUpdatePolicyArgs:
    def __init__(__self__, *,
                 calamari_update_behavior: Optional[str] = None,
                 tentacle_update_account_id: Optional[str] = None,
                 tentacle_update_behavior: Optional[str] = None):
        if calamari_update_behavior is not None:
            pulumi.set(__self__, "calamari_update_behavior", calamari_update_behavior)
        if tentacle_update_account_id is not None:
            pulumi.set(__self__, "tentacle_update_account_id", tentacle_update_account_id)
        if tentacle_update_behavior is not None:
            pulumi.set(__self__, "tentacle_update_behavior", tentacle_update_behavior)

    @property
    @pulumi.getter(name="calamariUpdateBehavior")
    def calamari_update_behavior(self) -> Optional[str]:
        return pulumi.get(self, "calamari_update_behavior")

    @calamari_update_behavior.setter
    def calamari_update_behavior(self, value: Optional[str]):
        pulumi.set(self, "calamari_update_behavior", value)

    @property
    @pulumi.getter(name="tentacleUpdateAccountId")
    def tentacle_update_account_id(self) -> Optional[str]:
        return pulumi.get(self, "tentacle_update_account_id")

    @tentacle_update_account_id.setter
    def tentacle_update_account_id(self, value: Optional[str]):
        pulumi.set(self, "tentacle_update_account_id", value)

    @property
    @pulumi.getter(name="tentacleUpdateBehavior")
    def tentacle_update_behavior(self) -> Optional[str]:
        return pulumi.get(self, "tentacle_update_behavior")

    @tentacle_update_behavior.setter
    def tentacle_update_behavior(self, value: Optional[str]):
        pulumi.set(self, "tentacle_update_behavior", value)


@pulumi.input_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetArgs:
    def __init__(__self__, *,
                 applications_directory: str,
                 destinations: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationArgs'],
                 endpoints: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointArgs'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str,
                 working_directory: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "applications_directory", applications_directory)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> str:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: str):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationArgs']:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationArgs']):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointArgs']:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointArgs']):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> str:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: str):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[str]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 authentication: 'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationArgs',
                 communication_style: str,
                 containers: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerArgs'],
                 destinations: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationArgs'],
                 id: str,
                 tentacle_version_details: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationArgs':
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: 'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationArgs'):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: str):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerArgs']:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerArgs']):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationArgs']:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationArgs']):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[str]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[str]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[str]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[str]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[str]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[str]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[str]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[str]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[str]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[str]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[str]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[str]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[bool]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[str]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[str]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[bool]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[str]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[bool]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[str]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[bool]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[str]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[str]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[bool]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[str]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[int]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[str]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[bool]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[str]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[bool]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[bool]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[str]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[str]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[str]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetArgs:
    def __init__(__self__, *,
                 certificate_signature_algorithm: str,
                 endpoints: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointArgs'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 tentacle_url: str,
                 tentacle_version_details: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailArgs'],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "tentacle_url", tentacle_url)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> str:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: str):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointArgs']:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointArgs']):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter(name="tentacleUrl")
    def tentacle_url(self) -> str:
        return pulumi.get(self, "tentacle_url")

    @tentacle_url.setter
    def tentacle_url(self, value: str):
        pulumi.set(self, "tentacle_url", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 authentication: 'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationArgs',
                 communication_style: str,
                 containers: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerArgs'],
                 destinations: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationArgs'],
                 id: str,
                 tentacle_version_details: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationArgs':
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: 'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationArgs'):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: str):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerArgs']:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerArgs']):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationArgs']:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationArgs']):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[str]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[str]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[str]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[str]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[str]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[str]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[str]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[str]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[str]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[str]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[str]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[str]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[bool]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[str]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[str]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[bool]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[str]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[bool]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[str]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[bool]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[str]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[str]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[bool]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[str]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[int]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[str]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[bool]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[str]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[bool]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[bool]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[str]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[str]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[str]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetProjectGroupsProjectGroupArgs:
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 retention_policy_id: str,
                 space_id: str):
        """
        :param str description: The description of this project group.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str retention_policy_id: The ID of the retention policy associated with this project group.
        :param str space_id: The space ID associated with this project group.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "retention_policy_id", retention_policy_id)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this project group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retentionPolicyId")
    def retention_policy_id(self) -> str:
        """
        The ID of the retention policy associated with this project group.
        """
        return pulumi.get(self, "retention_policy_id")

    @retention_policy_id.setter
    def retention_policy_id(self, value: str):
        pulumi.set(self, "retention_policy_id", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this project group.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class GetProjectsProjectArgs:
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: bool,
                 auto_create_release: bool,
                 auto_deploy_release_overrides: Sequence[str],
                 cloned_from_project_id: str,
                 connectivity_policies: Sequence['GetProjectsProjectConnectivityPolicyArgs'],
                 default_guided_failure_mode: str,
                 default_to_skip_if_already_installed: bool,
                 deployment_changes_template: str,
                 deployment_process_id: str,
                 description: str,
                 discrete_channel_release: bool,
                 git_anonymous_persistence_settings: Sequence['GetProjectsProjectGitAnonymousPersistenceSettingArgs'],
                 git_library_persistence_settings: Sequence['GetProjectsProjectGitLibraryPersistenceSettingArgs'],
                 git_username_password_persistence_settings: Sequence['GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs'],
                 id: str,
                 included_library_variable_sets: Sequence[str],
                 is_disabled: bool,
                 is_discrete_channel_release: bool,
                 is_version_controlled: bool,
                 jira_service_management_extension_settings: Sequence['GetProjectsProjectJiraServiceManagementExtensionSettingArgs'],
                 lifecycle_id: str,
                 name: str,
                 project_group_id: str,
                 release_creation_strategies: Sequence['GetProjectsProjectReleaseCreationStrategyArgs'],
                 release_notes_template: str,
                 servicenow_extension_settings: Sequence['GetProjectsProjectServicenowExtensionSettingArgs'],
                 slug: str,
                 space_id: str,
                 templates: Sequence['GetProjectsProjectTemplateArgs'],
                 tenanted_deployment_participation: str,
                 variable_set_id: str,
                 versioning_strategies: Sequence['GetProjectsProjectVersioningStrategyArgs']):
        """
        :param str cloned_from_project_id: A filter to search for cloned resources by a project ID.
        :param str description: The description of this project.
        :param bool discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param Sequence['GetProjectsProjectGitAnonymousPersistenceSettingArgs'] git_anonymous_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param Sequence['GetProjectsProjectGitLibraryPersistenceSettingArgs'] git_library_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param Sequence['GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs'] git_username_password_persistence_settings: Provides Git-related persistence settings for a version-controlled project.
        :param str id: The unique ID for this resource.
        :param bool is_discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param Sequence['GetProjectsProjectJiraServiceManagementExtensionSettingArgs'] jira_service_management_extension_settings: Provides extension settings for the Jira Service Management (JSM) integration for this project.
        :param str lifecycle_id: The lifecycle ID associated with this project.
        :param str name: The name of the project in Octopus Deploy. This name must be unique.
        :param str project_group_id: The project group ID associated with this project.
        :param Sequence['GetProjectsProjectServicenowExtensionSettingArgs'] servicenow_extension_settings: Provides extension settings for the ServiceNow integration for this project.
        :param str slug: A human-readable, unique identifier, used to identify a project.
        :param str space_id: The space ID associated with this project.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        if allow_deployments_to_no_targets is not None:
            warnings.warn("""This value is only valid for an associated connectivity policy and should not be specified here.""", DeprecationWarning)
            pulumi.log.warn("""allow_deployments_to_no_targets is deprecated: This value is only valid for an associated connectivity policy and should not be specified here.""")
        pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        pulumi.set(__self__, "auto_create_release", auto_create_release)
        pulumi.set(__self__, "auto_deploy_release_overrides", auto_deploy_release_overrides)
        pulumi.set(__self__, "cloned_from_project_id", cloned_from_project_id)
        pulumi.set(__self__, "connectivity_policies", connectivity_policies)
        pulumi.set(__self__, "default_guided_failure_mode", default_guided_failure_mode)
        pulumi.set(__self__, "default_to_skip_if_already_installed", default_to_skip_if_already_installed)
        pulumi.set(__self__, "deployment_changes_template", deployment_changes_template)
        pulumi.set(__self__, "deployment_process_id", deployment_process_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "discrete_channel_release", discrete_channel_release)
        pulumi.set(__self__, "git_anonymous_persistence_settings", git_anonymous_persistence_settings)
        pulumi.set(__self__, "git_library_persistence_settings", git_library_persistence_settings)
        pulumi.set(__self__, "git_username_password_persistence_settings", git_username_password_persistence_settings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "included_library_variable_sets", included_library_variable_sets)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_discrete_channel_release", is_discrete_channel_release)
        pulumi.set(__self__, "is_version_controlled", is_version_controlled)
        pulumi.set(__self__, "jira_service_management_extension_settings", jira_service_management_extension_settings)
        pulumi.set(__self__, "lifecycle_id", lifecycle_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_group_id", project_group_id)
        pulumi.set(__self__, "release_creation_strategies", release_creation_strategies)
        pulumi.set(__self__, "release_notes_template", release_notes_template)
        pulumi.set(__self__, "servicenow_extension_settings", servicenow_extension_settings)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "templates", templates)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "variable_set_id", variable_set_id)
        pulumi.set(__self__, "versioning_strategies", versioning_strategies)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> bool:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @allow_deployments_to_no_targets.setter
    def allow_deployments_to_no_targets(self, value: bool):
        pulumi.set(self, "allow_deployments_to_no_targets", value)

    @property
    @pulumi.getter(name="autoCreateRelease")
    def auto_create_release(self) -> bool:
        return pulumi.get(self, "auto_create_release")

    @auto_create_release.setter
    def auto_create_release(self, value: bool):
        pulumi.set(self, "auto_create_release", value)

    @property
    @pulumi.getter(name="autoDeployReleaseOverrides")
    def auto_deploy_release_overrides(self) -> Sequence[str]:
        return pulumi.get(self, "auto_deploy_release_overrides")

    @auto_deploy_release_overrides.setter
    def auto_deploy_release_overrides(self, value: Sequence[str]):
        pulumi.set(self, "auto_deploy_release_overrides", value)

    @property
    @pulumi.getter(name="clonedFromProjectId")
    def cloned_from_project_id(self) -> str:
        """
        A filter to search for cloned resources by a project ID.
        """
        return pulumi.get(self, "cloned_from_project_id")

    @cloned_from_project_id.setter
    def cloned_from_project_id(self, value: str):
        pulumi.set(self, "cloned_from_project_id", value)

    @property
    @pulumi.getter(name="connectivityPolicies")
    def connectivity_policies(self) -> Sequence['GetProjectsProjectConnectivityPolicyArgs']:
        return pulumi.get(self, "connectivity_policies")

    @connectivity_policies.setter
    def connectivity_policies(self, value: Sequence['GetProjectsProjectConnectivityPolicyArgs']):
        pulumi.set(self, "connectivity_policies", value)

    @property
    @pulumi.getter(name="defaultGuidedFailureMode")
    def default_guided_failure_mode(self) -> str:
        return pulumi.get(self, "default_guided_failure_mode")

    @default_guided_failure_mode.setter
    def default_guided_failure_mode(self, value: str):
        pulumi.set(self, "default_guided_failure_mode", value)

    @property
    @pulumi.getter(name="defaultToSkipIfAlreadyInstalled")
    def default_to_skip_if_already_installed(self) -> bool:
        return pulumi.get(self, "default_to_skip_if_already_installed")

    @default_to_skip_if_already_installed.setter
    def default_to_skip_if_already_installed(self, value: bool):
        pulumi.set(self, "default_to_skip_if_already_installed", value)

    @property
    @pulumi.getter(name="deploymentChangesTemplate")
    def deployment_changes_template(self) -> str:
        return pulumi.get(self, "deployment_changes_template")

    @deployment_changes_template.setter
    def deployment_changes_template(self, value: str):
        pulumi.set(self, "deployment_changes_template", value)

    @property
    @pulumi.getter(name="deploymentProcessId")
    def deployment_process_id(self) -> str:
        return pulumi.get(self, "deployment_process_id")

    @deployment_process_id.setter
    def deployment_process_id(self, value: str):
        pulumi.set(self, "deployment_process_id", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this project.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discreteChannelRelease")
    def discrete_channel_release(self) -> bool:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "discrete_channel_release")

    @discrete_channel_release.setter
    def discrete_channel_release(self, value: bool):
        pulumi.set(self, "discrete_channel_release", value)

    @property
    @pulumi.getter(name="gitAnonymousPersistenceSettings")
    def git_anonymous_persistence_settings(self) -> Sequence['GetProjectsProjectGitAnonymousPersistenceSettingArgs']:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_anonymous_persistence_settings")

    @git_anonymous_persistence_settings.setter
    def git_anonymous_persistence_settings(self, value: Sequence['GetProjectsProjectGitAnonymousPersistenceSettingArgs']):
        pulumi.set(self, "git_anonymous_persistence_settings", value)

    @property
    @pulumi.getter(name="gitLibraryPersistenceSettings")
    def git_library_persistence_settings(self) -> Sequence['GetProjectsProjectGitLibraryPersistenceSettingArgs']:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_library_persistence_settings")

    @git_library_persistence_settings.setter
    def git_library_persistence_settings(self, value: Sequence['GetProjectsProjectGitLibraryPersistenceSettingArgs']):
        pulumi.set(self, "git_library_persistence_settings", value)

    @property
    @pulumi.getter(name="gitUsernamePasswordPersistenceSettings")
    def git_username_password_persistence_settings(self) -> Sequence['GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs']:
        """
        Provides Git-related persistence settings for a version-controlled project.
        """
        return pulumi.get(self, "git_username_password_persistence_settings")

    @git_username_password_persistence_settings.setter
    def git_username_password_persistence_settings(self, value: Sequence['GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs']):
        pulumi.set(self, "git_username_password_persistence_settings", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="includedLibraryVariableSets")
    def included_library_variable_sets(self) -> Sequence[str]:
        return pulumi.get(self, "included_library_variable_sets")

    @included_library_variable_sets.setter
    def included_library_variable_sets(self, value: Sequence[str]):
        pulumi.set(self, "included_library_variable_sets", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isDiscreteChannelRelease")
    def is_discrete_channel_release(self) -> bool:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "is_discrete_channel_release")

    @is_discrete_channel_release.setter
    def is_discrete_channel_release(self, value: bool):
        pulumi.set(self, "is_discrete_channel_release", value)

    @property
    @pulumi.getter(name="isVersionControlled")
    def is_version_controlled(self) -> bool:
        return pulumi.get(self, "is_version_controlled")

    @is_version_controlled.setter
    def is_version_controlled(self, value: bool):
        pulumi.set(self, "is_version_controlled", value)

    @property
    @pulumi.getter(name="jiraServiceManagementExtensionSettings")
    def jira_service_management_extension_settings(self) -> Sequence['GetProjectsProjectJiraServiceManagementExtensionSettingArgs']:
        """
        Provides extension settings for the Jira Service Management (JSM) integration for this project.
        """
        return pulumi.get(self, "jira_service_management_extension_settings")

    @jira_service_management_extension_settings.setter
    def jira_service_management_extension_settings(self, value: Sequence['GetProjectsProjectJiraServiceManagementExtensionSettingArgs']):
        pulumi.set(self, "jira_service_management_extension_settings", value)

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> str:
        """
        The lifecycle ID associated with this project.
        """
        return pulumi.get(self, "lifecycle_id")

    @lifecycle_id.setter
    def lifecycle_id(self, value: str):
        pulumi.set(self, "lifecycle_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the project in Octopus Deploy. This name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectGroupId")
    def project_group_id(self) -> str:
        """
        The project group ID associated with this project.
        """
        return pulumi.get(self, "project_group_id")

    @project_group_id.setter
    def project_group_id(self, value: str):
        pulumi.set(self, "project_group_id", value)

    @property
    @pulumi.getter(name="releaseCreationStrategies")
    def release_creation_strategies(self) -> Sequence['GetProjectsProjectReleaseCreationStrategyArgs']:
        return pulumi.get(self, "release_creation_strategies")

    @release_creation_strategies.setter
    def release_creation_strategies(self, value: Sequence['GetProjectsProjectReleaseCreationStrategyArgs']):
        pulumi.set(self, "release_creation_strategies", value)

    @property
    @pulumi.getter(name="releaseNotesTemplate")
    def release_notes_template(self) -> str:
        return pulumi.get(self, "release_notes_template")

    @release_notes_template.setter
    def release_notes_template(self, value: str):
        pulumi.set(self, "release_notes_template", value)

    @property
    @pulumi.getter(name="servicenowExtensionSettings")
    def servicenow_extension_settings(self) -> Sequence['GetProjectsProjectServicenowExtensionSettingArgs']:
        """
        Provides extension settings for the ServiceNow integration for this project.
        """
        return pulumi.get(self, "servicenow_extension_settings")

    @servicenow_extension_settings.setter
    def servicenow_extension_settings(self, value: Sequence['GetProjectsProjectServicenowExtensionSettingArgs']):
        pulumi.set(self, "servicenow_extension_settings", value)

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        A human-readable, unique identifier, used to identify a project.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: str):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this project.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def templates(self) -> Sequence['GetProjectsProjectTemplateArgs']:
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Sequence['GetProjectsProjectTemplateArgs']):
        pulumi.set(self, "templates", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> str:
        return pulumi.get(self, "variable_set_id")

    @variable_set_id.setter
    def variable_set_id(self, value: str):
        pulumi.set(self, "variable_set_id", value)

    @property
    @pulumi.getter(name="versioningStrategies")
    def versioning_strategies(self) -> Sequence['GetProjectsProjectVersioningStrategyArgs']:
        return pulumi.get(self, "versioning_strategies")

    @versioning_strategies.setter
    def versioning_strategies(self, value: Sequence['GetProjectsProjectVersioningStrategyArgs']):
        pulumi.set(self, "versioning_strategies", value)


@pulumi.input_type
class GetProjectsProjectConnectivityPolicyArgs:
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: bool,
                 exclude_unhealthy_targets: bool,
                 target_roles: Sequence[str],
                 skip_machine_behavior: Optional[str] = None):
        pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        pulumi.set(__self__, "target_roles", target_roles)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> bool:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @allow_deployments_to_no_targets.setter
    def allow_deployments_to_no_targets(self, value: bool):
        pulumi.set(self, "allow_deployments_to_no_targets", value)

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> bool:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @exclude_unhealthy_targets.setter
    def exclude_unhealthy_targets(self, value: bool):
        pulumi.set(self, "exclude_unhealthy_targets", value)

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Sequence[str]:
        return pulumi.get(self, "target_roles")

    @target_roles.setter
    def target_roles(self, value: Sequence[str]):
        pulumi.set(self, "target_roles", value)

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[str]:
        return pulumi.get(self, "skip_machine_behavior")

    @skip_machine_behavior.setter
    def skip_machine_behavior(self, value: Optional[str]):
        pulumi.set(self, "skip_machine_behavior", value)


@pulumi.input_type
class GetProjectsProjectGitAnonymousPersistenceSettingArgs:
    def __init__(__self__, *,
                 url: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: str):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[str]):
        pulumi.set(self, "base_path", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "protected_branches")

    @protected_branches.setter
    def protected_branches(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "protected_branches", value)


@pulumi.input_type
class GetProjectsProjectGitLibraryPersistenceSettingArgs:
    def __init__(__self__, *,
                 git_credential_id: str,
                 url: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "git_credential_id", git_credential_id)
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> str:
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: str):
        pulumi.set(self, "git_credential_id", value)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: str):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[str]):
        pulumi.set(self, "base_path", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "protected_branches")

    @protected_branches.setter
    def protected_branches(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "protected_branches", value)


@pulumi.input_type
class GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs:
    def __init__(__self__, *,
                 password: str,
                 url: str,
                 username: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: str):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: str):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[str]):
        pulumi.set(self, "base_path", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "protected_branches")

    @protected_branches.setter
    def protected_branches(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "protected_branches", value)


@pulumi.input_type
class GetProjectsProjectJiraServiceManagementExtensionSettingArgs:
    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 service_desk_project_name: str):
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "service_desk_project_name", service_desk_project_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: str):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: bool):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="serviceDeskProjectName")
    def service_desk_project_name(self) -> str:
        return pulumi.get(self, "service_desk_project_name")

    @service_desk_project_name.setter
    def service_desk_project_name(self, value: str):
        pulumi.set(self, "service_desk_project_name", value)


@pulumi.input_type
class GetProjectsProjectReleaseCreationStrategyArgs:
    def __init__(__self__, *,
                 release_creation_package: 'GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageArgs',
                 channel_id: Optional[str] = None,
                 release_creation_package_step_id: Optional[str] = None):
        pulumi.set(__self__, "release_creation_package", release_creation_package)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if release_creation_package_step_id is not None:
            pulumi.set(__self__, "release_creation_package_step_id", release_creation_package_step_id)

    @property
    @pulumi.getter(name="releaseCreationPackage")
    def release_creation_package(self) -> 'GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageArgs':
        return pulumi.get(self, "release_creation_package")

    @release_creation_package.setter
    def release_creation_package(self, value: 'GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageArgs'):
        pulumi.set(self, "release_creation_package", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[str]:
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[str]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="releaseCreationPackageStepId")
    def release_creation_package_step_id(self) -> Optional[str]:
        return pulumi.get(self, "release_creation_package_step_id")

    @release_creation_package_step_id.setter
    def release_creation_package_step_id(self, value: Optional[str]):
        pulumi.set(self, "release_creation_package_step_id", value)


@pulumi.input_type
class GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageArgs:
    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @deployment_action.setter
    def deployment_action(self, value: Optional[str]):
        pulumi.set(self, "deployment_action", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: Optional[str]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class GetProjectsProjectServicenowExtensionSettingArgs:
    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 is_state_automatically_transitioned: bool,
                 standard_change_template_name: str):
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_state_automatically_transitioned", is_state_automatically_transitioned)
        pulumi.set(__self__, "standard_change_template_name", standard_change_template_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: str):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: bool):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isStateAutomaticallyTransitioned")
    def is_state_automatically_transitioned(self) -> bool:
        return pulumi.get(self, "is_state_automatically_transitioned")

    @is_state_automatically_transitioned.setter
    def is_state_automatically_transitioned(self, value: bool):
        pulumi.set(self, "is_state_automatically_transitioned", value)

    @property
    @pulumi.getter(name="standardChangeTemplateName")
    def standard_change_template_name(self) -> str:
        return pulumi.get(self, "standard_change_template_name")

    @standard_change_template_name.setter
    def standard_change_template_name(self, value: str):
        pulumi.set(self, "standard_change_template_name", value)


@pulumi.input_type
class GetProjectsProjectTemplateArgs:
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 default_value: Optional[str] = None,
                 display_settings: Optional[Mapping[str, Any]] = None,
                 help_text: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str name: A filter to search by name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to search by name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[str]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "display_settings")

    @display_settings.setter
    def display_settings(self, value: Optional[Mapping[str, Any]]):
        pulumi.set(self, "display_settings", value)

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[str]:
        return pulumi.get(self, "help_text")

    @help_text.setter
    def help_text(self, value: Optional[str]):
        pulumi.set(self, "help_text", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class GetProjectsProjectVersioningStrategyArgs:
    def __init__(__self__, *,
                 donor_package: 'GetProjectsProjectVersioningStrategyDonorPackageArgs',
                 donor_package_step_id: str,
                 template: str):
        pulumi.set(__self__, "donor_package", donor_package)
        pulumi.set(__self__, "donor_package_step_id", donor_package_step_id)
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="donorPackage")
    def donor_package(self) -> 'GetProjectsProjectVersioningStrategyDonorPackageArgs':
        return pulumi.get(self, "donor_package")

    @donor_package.setter
    def donor_package(self, value: 'GetProjectsProjectVersioningStrategyDonorPackageArgs'):
        pulumi.set(self, "donor_package", value)

    @property
    @pulumi.getter(name="donorPackageStepId")
    def donor_package_step_id(self) -> str:
        return pulumi.get(self, "donor_package_step_id")

    @donor_package_step_id.setter
    def donor_package_step_id(self, value: str):
        pulumi.set(self, "donor_package_step_id", value)

    @property
    @pulumi.getter
    def template(self) -> str:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: str):
        pulumi.set(self, "template", value)


@pulumi.input_type
class GetProjectsProjectVersioningStrategyDonorPackageArgs:
    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @deployment_action.setter
    def deployment_action(self, value: Optional[str]):
        pulumi.set(self, "deployment_action", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: Optional[str]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class GetScriptModulesScriptModuleArgs:
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 scripts: Sequence['GetScriptModulesScriptModuleScriptArgs'],
                 space_id: str,
                 variable_set_id: str):
        """
        :param str description: The description of this script module.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param Sequence['GetScriptModulesScriptModuleScriptArgs'] scripts: The script associated with this script module.
        :param str space_id: The space ID associated with this resource.
        :param str variable_set_id: The variable set ID for this script module.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scripts", scripts)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "variable_set_id", variable_set_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this script module.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scripts(self) -> Sequence['GetScriptModulesScriptModuleScriptArgs']:
        """
        The script associated with this script module.
        """
        return pulumi.get(self, "scripts")

    @scripts.setter
    def scripts(self, value: Sequence['GetScriptModulesScriptModuleScriptArgs']):
        pulumi.set(self, "scripts", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> str:
        """
        The variable set ID for this script module.
        """
        return pulumi.get(self, "variable_set_id")

    @variable_set_id.setter
    def variable_set_id(self, value: str):
        pulumi.set(self, "variable_set_id", value)


@pulumi.input_type
class GetScriptModulesScriptModuleScriptArgs:
    def __init__(__self__, *,
                 body: str,
                 syntax: str):
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "syntax", syntax)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: str):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def syntax(self) -> str:
        return pulumi.get(self, "syntax")

    @syntax.setter
    def syntax(self, value: str):
        pulumi.set(self, "syntax", value)


@pulumi.input_type
class GetSpacesSpaceArgs:
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 is_default: bool,
                 is_task_queue_stopped: bool,
                 name: str,
                 slug: str,
                 space_managers_team_members: Sequence[str],
                 space_managers_teams: Sequence[str]):
        """
        :param str description: The description of this space.
        :param str id: The unique ID for this resource.
        :param bool is_default: Specifies if this space is the default space in Octopus.
        :param bool is_task_queue_stopped: Specifies the status of the task queue for this space.
        :param str name: The name of this resource.
        :param str slug: The unique slug of this space.
        :param Sequence[str] space_managers_team_members: A list of user IDs designated to be managers of this space.
        :param Sequence[str] space_managers_teams: A list of team IDs designated to be managers of this space.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_task_queue_stopped", is_task_queue_stopped)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "space_managers_team_members", space_managers_team_members)
        pulumi.set(__self__, "space_managers_teams", space_managers_teams)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this space.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Specifies if this space is the default space in Octopus.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: bool):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="isTaskQueueStopped")
    def is_task_queue_stopped(self) -> bool:
        """
        Specifies the status of the task queue for this space.
        """
        return pulumi.get(self, "is_task_queue_stopped")

    @is_task_queue_stopped.setter
    def is_task_queue_stopped(self, value: bool):
        pulumi.set(self, "is_task_queue_stopped", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The unique slug of this space.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: str):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="spaceManagersTeamMembers")
    def space_managers_team_members(self) -> Sequence[str]:
        """
        A list of user IDs designated to be managers of this space.
        """
        return pulumi.get(self, "space_managers_team_members")

    @space_managers_team_members.setter
    def space_managers_team_members(self, value: Sequence[str]):
        pulumi.set(self, "space_managers_team_members", value)

    @property
    @pulumi.getter(name="spaceManagersTeams")
    def space_managers_teams(self) -> Sequence[str]:
        """
        A list of team IDs designated to be managers of this space.
        """
        return pulumi.get(self, "space_managers_teams")

    @space_managers_teams.setter
    def space_managers_teams(self, value: Sequence[str]):
        pulumi.set(self, "space_managers_teams", value)


@pulumi.input_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetArgs:
    def __init__(__self__, *,
                 account_id: str,
                 dot_net_core_platform: str,
                 endpoints: Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointArgs'],
                 environments: Sequence[str],
                 fingerprint: str,
                 has_latest_calamari: bool,
                 health_status: str,
                 host: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 port: int,
                 proxy_id: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: A filter to search by the disabled status of a resource.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A filter to search by a list of role IDs.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> str:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: str):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointArgs']:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointArgs']):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: str):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @has_latest_calamari.setter
    def has_latest_calamari(self, value: bool):
        pulumi.set(self, "has_latest_calamari", value)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: str):
        pulumi.set(self, "health_status", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        A filter to search by the disabled status of a resource.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: bool):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @is_in_process.setter
    def is_in_process(self, value: bool):
        pulumi.set(self, "is_in_process", value)

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @machine_policy_id.setter
    def machine_policy_id(self, value: str):
        pulumi.set(self, "machine_policy_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: str):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: str):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A filter to search by a list of role IDs.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Sequence[str]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @shell_name.setter
    def shell_name(self, value: str):
        pulumi.set(self, "shell_name", value)

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @shell_version.setter
    def shell_version(self, value: str):
        pulumi.set(self, "shell_version", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @status_summary.setter
    def status_summary(self, value: str):
        pulumi.set(self, "status_summary", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: str):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Sequence[str]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: str):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: str):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 authentication: 'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationArgs',
                 communication_style: str,
                 containers: Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerArgs'],
                 destinations: Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationArgs'],
                 id: str,
                 tentacle_version_details: Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        :param str thumbprint: The thumbprint of the deployment target to match in the query and/or search
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationArgs':
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: 'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationArgs'):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: str):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerArgs']:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerArgs']):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationArgs']:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationArgs']):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs']:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Sequence['GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs']):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[str]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[str]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[str]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[str]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[str]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[str]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[str]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[str]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[str]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[str]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[str]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[str]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[str]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[bool]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[str]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[str]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[bool]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[str]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[bool]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        """
        The thumbprint of the deployment target to match in the query and/or search
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[str]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[bool]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[str]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[str]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[str]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[bool]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[str]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[int]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[str]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[str]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[bool]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[str]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[bool]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[bool]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[str]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[str]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[str]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[str]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: bool):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: bool):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: bool):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: str):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetTagSetsTagSetArgs:
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 sort_order: int,
                 space_id: str):
        """
        :param str description: The description of this tag set.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param int sort_order: The sort order associated with this resource.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this tag set.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> int:
        """
        The sort order associated with this resource.
        """
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: int):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class GetTeamsTeamArgs:
    def __init__(__self__, *,
                 can_be_deleted: bool,
                 can_be_renamed: bool,
                 can_change_members: bool,
                 can_change_roles: bool,
                 description: str,
                 external_security_groups: Sequence['GetTeamsTeamExternalSecurityGroupArgs'],
                 id: str,
                 name: str,
                 space_id: str,
                 users: Sequence[str]):
        """
        :param str description: The user-friendly description of this team.
        :param str id: The unique ID for this resource.
        :param str name: The name of this team.
        :param str space_id: The space associated with this team.
        :param Sequence[str] users: A list of user IDs designated to be members of this team.
        """
        pulumi.set(__self__, "can_be_deleted", can_be_deleted)
        pulumi.set(__self__, "can_be_renamed", can_be_renamed)
        pulumi.set(__self__, "can_change_members", can_change_members)
        pulumi.set(__self__, "can_change_roles", can_change_roles)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_security_groups", external_security_groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="canBeDeleted")
    def can_be_deleted(self) -> bool:
        return pulumi.get(self, "can_be_deleted")

    @can_be_deleted.setter
    def can_be_deleted(self, value: bool):
        pulumi.set(self, "can_be_deleted", value)

    @property
    @pulumi.getter(name="canBeRenamed")
    def can_be_renamed(self) -> bool:
        return pulumi.get(self, "can_be_renamed")

    @can_be_renamed.setter
    def can_be_renamed(self, value: bool):
        pulumi.set(self, "can_be_renamed", value)

    @property
    @pulumi.getter(name="canChangeMembers")
    def can_change_members(self) -> bool:
        return pulumi.get(self, "can_change_members")

    @can_change_members.setter
    def can_change_members(self, value: bool):
        pulumi.set(self, "can_change_members", value)

    @property
    @pulumi.getter(name="canChangeRoles")
    def can_change_roles(self) -> bool:
        return pulumi.get(self, "can_change_roles")

    @can_change_roles.setter
    def can_change_roles(self, value: bool):
        pulumi.set(self, "can_change_roles", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The user-friendly description of this team.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalSecurityGroups")
    def external_security_groups(self) -> Sequence['GetTeamsTeamExternalSecurityGroupArgs']:
        return pulumi.get(self, "external_security_groups")

    @external_security_groups.setter
    def external_security_groups(self, value: Sequence['GetTeamsTeamExternalSecurityGroupArgs']):
        pulumi.set(self, "external_security_groups", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this team.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space associated with this team.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter
    def users(self) -> Sequence[str]:
        """
        A list of user IDs designated to be members of this team.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Sequence[str]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class GetTeamsTeamExternalSecurityGroupArgs:
    def __init__(__self__, *,
                 display_id_and_name: bool,
                 display_name: str,
                 id: str):
        """
        :param str id: An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        pulumi.set(__self__, "display_id_and_name", display_id_and_name)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayIdAndName")
    def display_id_and_name(self) -> bool:
        return pulumi.get(self, "display_id_and_name")

    @display_id_and_name.setter
    def display_id_and_name(self, value: bool):
        pulumi.set(self, "display_id_and_name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: str):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An auto-generated identifier that includes the timestamp when this data source was last modified.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GetTenantsTenantArgs:
    def __init__(__self__, *,
                 cloned_from_tenant_id: str,
                 description: str,
                 id: str,
                 name: str,
                 project_environments: Sequence['GetTenantsTenantProjectEnvironmentArgs'],
                 space_id: str,
                 tenant_tags: Sequence[str]):
        """
        :param str cloned_from_tenant_id: The ID of the tenant from which this tenant was cloned.
        :param str description: The description of this tenant.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "cloned_from_tenant_id", cloned_from_tenant_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_environments", project_environments)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="clonedFromTenantId")
    def cloned_from_tenant_id(self) -> str:
        """
        The ID of the tenant from which this tenant was cloned.
        """
        return pulumi.get(self, "cloned_from_tenant_id")

    @cloned_from_tenant_id.setter
    def cloned_from_tenant_id(self, value: str):
        pulumi.set(self, "cloned_from_tenant_id", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this tenant.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectEnvironments")
    def project_environments(self) -> Sequence['GetTenantsTenantProjectEnvironmentArgs']:
        return pulumi.get(self, "project_environments")

    @project_environments.setter
    def project_environments(self, value: Sequence['GetTenantsTenantProjectEnvironmentArgs']):
        pulumi.set(self, "project_environments", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Sequence[str]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class GetTenantsTenantProjectEnvironmentArgs:
    def __init__(__self__, *,
                 environments: Sequence[str],
                 project_id: str):
        """
        :param str project_id: A filter to search by a project ID.
        """
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Sequence[str]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        A filter to search by a project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: str):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class GetUserRolesUserRoleArgs:
    def __init__(__self__, *,
                 can_be_deleted: bool,
                 description: str,
                 granted_space_permissions: Sequence[str],
                 granted_system_permissions: Sequence[str],
                 id: str,
                 name: str,
                 space_permission_descriptions: Sequence[str],
                 supported_restrictions: Sequence[str],
                 system_permission_descriptions: Sequence[str]):
        """
        :param str description: The description of this user role.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        """
        pulumi.set(__self__, "can_be_deleted", can_be_deleted)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "granted_space_permissions", granted_space_permissions)
        pulumi.set(__self__, "granted_system_permissions", granted_system_permissions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_permission_descriptions", space_permission_descriptions)
        pulumi.set(__self__, "supported_restrictions", supported_restrictions)
        pulumi.set(__self__, "system_permission_descriptions", system_permission_descriptions)

    @property
    @pulumi.getter(name="canBeDeleted")
    def can_be_deleted(self) -> bool:
        return pulumi.get(self, "can_be_deleted")

    @can_be_deleted.setter
    def can_be_deleted(self, value: bool):
        pulumi.set(self, "can_be_deleted", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this user role.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="grantedSpacePermissions")
    def granted_space_permissions(self) -> Sequence[str]:
        return pulumi.get(self, "granted_space_permissions")

    @granted_space_permissions.setter
    def granted_space_permissions(self, value: Sequence[str]):
        pulumi.set(self, "granted_space_permissions", value)

    @property
    @pulumi.getter(name="grantedSystemPermissions")
    def granted_system_permissions(self) -> Sequence[str]:
        return pulumi.get(self, "granted_system_permissions")

    @granted_system_permissions.setter
    def granted_system_permissions(self, value: Sequence[str]):
        pulumi.set(self, "granted_system_permissions", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="spacePermissionDescriptions")
    def space_permission_descriptions(self) -> Sequence[str]:
        return pulumi.get(self, "space_permission_descriptions")

    @space_permission_descriptions.setter
    def space_permission_descriptions(self, value: Sequence[str]):
        pulumi.set(self, "space_permission_descriptions", value)

    @property
    @pulumi.getter(name="supportedRestrictions")
    def supported_restrictions(self) -> Sequence[str]:
        return pulumi.get(self, "supported_restrictions")

    @supported_restrictions.setter
    def supported_restrictions(self, value: Sequence[str]):
        pulumi.set(self, "supported_restrictions", value)

    @property
    @pulumi.getter(name="systemPermissionDescriptions")
    def system_permission_descriptions(self) -> Sequence[str]:
        return pulumi.get(self, "system_permission_descriptions")

    @system_permission_descriptions.setter
    def system_permission_descriptions(self, value: Sequence[str]):
        pulumi.set(self, "system_permission_descriptions", value)


@pulumi.input_type
class GetUsersUserArgs:
    def __init__(__self__, *,
                 can_password_be_edited: bool,
                 display_name: str,
                 email_address: str,
                 id: str,
                 identities: Sequence['GetUsersUserIdentityArgs'],
                 is_active: bool,
                 is_requestor: bool,
                 is_service: bool,
                 password: str,
                 username: str):
        """
        :param str display_name: The display name of this resource.
        :param str email_address: The email address of this resource.
        :param str id: The unique ID for this resource.
        :param str password: The password associated with this resource.
        :param str username: The username associated with this resource.
        """
        pulumi.set(__self__, "can_password_be_edited", can_password_be_edited)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email_address", email_address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identities", identities)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "is_requestor", is_requestor)
        pulumi.set(__self__, "is_service", is_service)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="canPasswordBeEdited")
    def can_password_be_edited(self) -> bool:
        return pulumi.get(self, "can_password_be_edited")

    @can_password_be_edited.setter
    def can_password_be_edited(self, value: bool):
        pulumi.set(self, "can_password_be_edited", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of this resource.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: str):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of this resource.
        """
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: str):
        pulumi.set(self, "email_address", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def identities(self) -> Sequence['GetUsersUserIdentityArgs']:
        return pulumi.get(self, "identities")

    @identities.setter
    def identities(self, value: Sequence['GetUsersUserIdentityArgs']):
        pulumi.set(self, "identities", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: bool):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="isRequestor")
    def is_requestor(self) -> bool:
        return pulumi.get(self, "is_requestor")

    @is_requestor.setter
    def is_requestor(self, value: bool):
        pulumi.set(self, "is_requestor", value)

    @property
    @pulumi.getter(name="isService")
    def is_service(self) -> bool:
        return pulumi.get(self, "is_service")

    @is_service.setter
    def is_service(self, value: bool):
        pulumi.set(self, "is_service", value)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: str):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetUsersUserIdentityArgs:
    def __init__(__self__, *,
                 claims: Optional[Sequence['GetUsersUserIdentityClaimArgs']] = None,
                 provider: Optional[str] = None):
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def claims(self) -> Optional[Sequence['GetUsersUserIdentityClaimArgs']]:
        return pulumi.get(self, "claims")

    @claims.setter
    def claims(self, value: Optional[Sequence['GetUsersUserIdentityClaimArgs']]):
        pulumi.set(self, "claims", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[str]):
        pulumi.set(self, "provider", value)


@pulumi.input_type
class GetUsersUserIdentityClaimArgs:
    def __init__(__self__, *,
                 is_identifying_claim: bool,
                 name: str,
                 value: str):
        pulumi.set(__self__, "is_identifying_claim", is_identifying_claim)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isIdentifyingClaim")
    def is_identifying_claim(self) -> bool:
        return pulumi.get(self, "is_identifying_claim")

    @is_identifying_claim.setter
    def is_identifying_claim(self, value: bool):
        pulumi.set(self, "is_identifying_claim", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetVariablesVariableArgs:
    def __init__(__self__, *,
                 description: str,
                 encrypted_value: str,
                 is_editable: bool,
                 is_sensitive: bool,
                 key_fingerprint: str,
                 name: str,
                 owner_id: str,
                 pgp_key: str,
                 project_id: str,
                 prompts: Sequence['GetVariablesVariablePromptArgs'],
                 scopes: Sequence['GetVariablesVariableScopeArgs'],
                 sensitive_value: str,
                 type: str,
                 value: str):
        """
        :param str description: The description of this variable.
        :param bool is_editable: Indicates whether or not this variable is considered editable.
        :param bool is_sensitive: Indicates whether or not this resource is considered sensitive and should be kept secret.
        :param str name: The name of this resource.
        :param str type: The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "encrypted_value", encrypted_value)
        pulumi.set(__self__, "is_editable", is_editable)
        pulumi.set(__self__, "is_sensitive", is_sensitive)
        pulumi.set(__self__, "key_fingerprint", key_fingerprint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "pgp_key", pgp_key)
        if project_id is not None:
            warnings.warn("""This attribute is deprecated; please use owner_id instead.""", DeprecationWarning)
            pulumi.log.warn("""project_id is deprecated: This attribute is deprecated; please use owner_id instead.""")
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "prompts", prompts)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "sensitive_value", sensitive_value)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this variable.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="encryptedValue")
    def encrypted_value(self) -> str:
        return pulumi.get(self, "encrypted_value")

    @encrypted_value.setter
    def encrypted_value(self, value: str):
        pulumi.set(self, "encrypted_value", value)

    @property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> bool:
        """
        Indicates whether or not this variable is considered editable.
        """
        return pulumi.get(self, "is_editable")

    @is_editable.setter
    def is_editable(self, value: bool):
        pulumi.set(self, "is_editable", value)

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> bool:
        """
        Indicates whether or not this resource is considered sensitive and should be kept secret.
        """
        return pulumi.get(self, "is_sensitive")

    @is_sensitive.setter
    def is_sensitive(self, value: bool):
        pulumi.set(self, "is_sensitive", value)

    @property
    @pulumi.getter(name="keyFingerprint")
    def key_fingerprint(self) -> str:
        return pulumi.get(self, "key_fingerprint")

    @key_fingerprint.setter
    def key_fingerprint(self, value: str):
        pulumi.set(self, "key_fingerprint", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: str):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pgpKey")
    def pgp_key(self) -> str:
        return pulumi.get(self, "pgp_key")

    @pgp_key.setter
    def pgp_key(self, value: str):
        pulumi.set(self, "pgp_key", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: str):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def prompts(self) -> Sequence['GetVariablesVariablePromptArgs']:
        return pulumi.get(self, "prompts")

    @prompts.setter
    def prompts(self, value: Sequence['GetVariablesVariablePromptArgs']):
        pulumi.set(self, "prompts", value)

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['GetVariablesVariableScopeArgs']:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Sequence['GetVariablesVariableScopeArgs']):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="sensitiveValue")
    def sensitive_value(self) -> str:
        return pulumi.get(self, "sensitive_value")

    @sensitive_value.setter
    def sensitive_value(self, value: str):
        pulumi.set(self, "sensitive_value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetVariablesVariablePromptArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_settings: Optional['GetVariablesVariablePromptDisplaySettingsArgs'] = None,
                 is_required: Optional[bool] = None,
                 label: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional['GetVariablesVariablePromptDisplaySettingsArgs']:
        return pulumi.get(self, "display_settings")

    @display_settings.setter
    def display_settings(self, value: Optional['GetVariablesVariablePromptDisplaySettingsArgs']):
        pulumi.set(self, "display_settings", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[bool]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class GetVariablesVariablePromptDisplaySettingsArgs:
    def __init__(__self__, *,
                 control_type: str,
                 select_options: Optional[Sequence['GetVariablesVariablePromptDisplaySettingsSelectOptionArgs']] = None):
        pulumi.set(__self__, "control_type", control_type)
        if select_options is not None:
            pulumi.set(__self__, "select_options", select_options)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> str:
        return pulumi.get(self, "control_type")

    @control_type.setter
    def control_type(self, value: str):
        pulumi.set(self, "control_type", value)

    @property
    @pulumi.getter(name="selectOptions")
    def select_options(self) -> Optional[Sequence['GetVariablesVariablePromptDisplaySettingsSelectOptionArgs']]:
        return pulumi.get(self, "select_options")

    @select_options.setter
    def select_options(self, value: Optional[Sequence['GetVariablesVariablePromptDisplaySettingsSelectOptionArgs']]):
        pulumi.set(self, "select_options", value)


@pulumi.input_type
class GetVariablesVariablePromptDisplaySettingsSelectOptionArgs:
    def __init__(__self__, *,
                 display_name: str,
                 value: str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: str):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetVariablesVariableScopeArgs:
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 channels: Optional[Sequence[str]] = None,
                 environments: Optional[Sequence[str]] = None,
                 machines: Optional[Sequence[str]] = None,
                 roles: Optional[Sequence[str]] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def machines(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "machines")

    @machines.setter
    def machines(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "machines", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class GetWorkerPoolsWorkerPoolArgs:
    def __init__(__self__, *,
                 can_add_workers: bool,
                 description: str,
                 id: str,
                 is_default: bool,
                 name: str,
                 sort_order: int,
                 space_id: str,
                 worker_pool_type: str,
                 worker_type: str):
        """
        :param str description: The description of this worker pool.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param int sort_order: The order number to sort a dynamic worker pool.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "can_add_workers", can_add_workers)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "worker_pool_type", worker_pool_type)
        pulumi.set(__self__, "worker_type", worker_type)

    @property
    @pulumi.getter(name="canAddWorkers")
    def can_add_workers(self) -> bool:
        return pulumi.get(self, "can_add_workers")

    @can_add_workers.setter
    def can_add_workers(self, value: bool):
        pulumi.set(self, "can_add_workers", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this worker pool.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: bool):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> int:
        """
        The order number to sort a dynamic worker pool.
        """
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: int):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: str):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="workerPoolType")
    def worker_pool_type(self) -> str:
        return pulumi.get(self, "worker_pool_type")

    @worker_pool_type.setter
    def worker_pool_type(self, value: str):
        pulumi.set(self, "worker_pool_type", value)

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> str:
        return pulumi.get(self, "worker_type")

    @worker_type.setter
    def worker_type(self, value: str):
        pulumi.set(self, "worker_type", value)


