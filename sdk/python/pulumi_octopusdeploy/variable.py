# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VariableArgs', 'Variable']

@pulumi.input_type
class VariableArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 is_editable: Optional[pulumi.Input[bool]] = None,
                 is_sensitive: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pgp_key: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 prompt: Optional[pulumi.Input['VariablePromptArgs']] = None,
                 scope: Optional[pulumi.Input['VariableScopeArgs']] = None,
                 sensitive_value: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Variable resource.
        :param pulumi.Input[str] type: The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        :param pulumi.Input[str] description: The description of this variable.
        :param pulumi.Input[bool] is_editable: Indicates whether or not this variable is considered editable.
        :param pulumi.Input[bool] is_sensitive: Indicates whether or not this resource is considered sensitive and should be kept secret.
        :param pulumi.Input[str] name: The name of this resource.
        """
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_editable is not None:
            pulumi.set(__self__, "is_editable", is_editable)
        if is_sensitive is not None:
            pulumi.set(__self__, "is_sensitive", is_sensitive)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pgp_key is not None:
            pulumi.set(__self__, "pgp_key", pgp_key)
        if project_id is not None:
            warnings.warn("""This attribute is deprecated; please use owner_id instead.""", DeprecationWarning)
            pulumi.log.warn("""project_id is deprecated: This attribute is deprecated; please use owner_id instead.""")
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if prompt is not None:
            pulumi.set(__self__, "prompt", prompt)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sensitive_value is not None:
            pulumi.set(__self__, "sensitive_value", sensitive_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this variable.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not this variable is considered editable.
        """
        return pulumi.get(self, "is_editable")

    @is_editable.setter
    def is_editable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_editable", value)

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not this resource is considered sensitive and should be kept secret.
        """
        return pulumi.get(self, "is_sensitive")

    @is_sensitive.setter
    def is_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sensitive", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pgpKey")
    def pgp_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pgp_key")

    @pgp_key.setter
    def pgp_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgp_key", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def prompt(self) -> Optional[pulumi.Input['VariablePromptArgs']]:
        return pulumi.get(self, "prompt")

    @prompt.setter
    def prompt(self, value: Optional[pulumi.Input['VariablePromptArgs']]):
        pulumi.set(self, "prompt", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['VariableScopeArgs']]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['VariableScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sensitiveValue")
    def sensitive_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sensitive_value")

    @sensitive_value.setter
    def sensitive_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sensitive_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class _VariableState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 encrypted_value: Optional[pulumi.Input[str]] = None,
                 is_editable: Optional[pulumi.Input[bool]] = None,
                 is_sensitive: Optional[pulumi.Input[bool]] = None,
                 key_fingerprint: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pgp_key: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 prompt: Optional[pulumi.Input['VariablePromptArgs']] = None,
                 scope: Optional[pulumi.Input['VariableScopeArgs']] = None,
                 sensitive_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Variable resources.
        :param pulumi.Input[str] description: The description of this variable.
        :param pulumi.Input[bool] is_editable: Indicates whether or not this variable is considered editable.
        :param pulumi.Input[bool] is_sensitive: Indicates whether or not this resource is considered sensitive and should be kept secret.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] type: The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encrypted_value is not None:
            pulumi.set(__self__, "encrypted_value", encrypted_value)
        if is_editable is not None:
            pulumi.set(__self__, "is_editable", is_editable)
        if is_sensitive is not None:
            pulumi.set(__self__, "is_sensitive", is_sensitive)
        if key_fingerprint is not None:
            pulumi.set(__self__, "key_fingerprint", key_fingerprint)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if pgp_key is not None:
            pulumi.set(__self__, "pgp_key", pgp_key)
        if project_id is not None:
            warnings.warn("""This attribute is deprecated; please use owner_id instead.""", DeprecationWarning)
            pulumi.log.warn("""project_id is deprecated: This attribute is deprecated; please use owner_id instead.""")
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if prompt is not None:
            pulumi.set(__self__, "prompt", prompt)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sensitive_value is not None:
            pulumi.set(__self__, "sensitive_value", sensitive_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this variable.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="encryptedValue")
    def encrypted_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encrypted_value")

    @encrypted_value.setter
    def encrypted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_value", value)

    @property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not this variable is considered editable.
        """
        return pulumi.get(self, "is_editable")

    @is_editable.setter
    def is_editable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_editable", value)

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not this resource is considered sensitive and should be kept secret.
        """
        return pulumi.get(self, "is_sensitive")

    @is_sensitive.setter
    def is_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sensitive", value)

    @property
    @pulumi.getter(name="keyFingerprint")
    def key_fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_fingerprint")

    @key_fingerprint.setter
    def key_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_fingerprint", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="pgpKey")
    def pgp_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pgp_key")

    @pgp_key.setter
    def pgp_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgp_key", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def prompt(self) -> Optional[pulumi.Input['VariablePromptArgs']]:
        return pulumi.get(self, "prompt")

    @prompt.setter
    def prompt(self, value: Optional[pulumi.Input['VariablePromptArgs']]):
        pulumi.set(self, "prompt", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['VariableScopeArgs']]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['VariableScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sensitiveValue")
    def sensitive_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sensitive_value")

    @sensitive_value.setter
    def sensitive_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sensitive_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


class Variable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_editable: Optional[pulumi.Input[bool]] = None,
                 is_sensitive: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pgp_key: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 prompt: Optional[pulumi.Input[pulumi.InputType['VariablePromptArgs']]] = None,
                 scope: Optional[pulumi.Input[pulumi.InputType['VariableScopeArgs']]] = None,
                 sensitive_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages variables in Octopus Deploy.

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/variable:Variable [options] octopusdeploy_variable.<name> <variable-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this variable.
        :param pulumi.Input[bool] is_editable: Indicates whether or not this variable is considered editable.
        :param pulumi.Input[bool] is_sensitive: Indicates whether or not this resource is considered sensitive and should be kept secret.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] type: The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VariableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages variables in Octopus Deploy.

        ## Import

        ```sh
         $ pulumi import octopusdeploy:index/variable:Variable [options] octopusdeploy_variable.<name> <variable-id>
        ```

        :param str resource_name: The name of the resource.
        :param VariableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VariableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_editable: Optional[pulumi.Input[bool]] = None,
                 is_sensitive: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 pgp_key: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 prompt: Optional[pulumi.Input[pulumi.InputType['VariablePromptArgs']]] = None,
                 scope: Optional[pulumi.Input[pulumi.InputType['VariableScopeArgs']]] = None,
                 sensitive_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VariableArgs.__new__(VariableArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["is_editable"] = is_editable
            __props__.__dict__["is_sensitive"] = is_sensitive
            __props__.__dict__["name"] = name
            __props__.__dict__["owner_id"] = owner_id
            __props__.__dict__["pgp_key"] = pgp_key
            if project_id is not None and not opts.urn:
                warnings.warn("""This attribute is deprecated; please use owner_id instead.""", DeprecationWarning)
                pulumi.log.warn("""project_id is deprecated: This attribute is deprecated; please use owner_id instead.""")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["prompt"] = prompt
            __props__.__dict__["scope"] = scope
            __props__.__dict__["sensitive_value"] = sensitive_value
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["value"] = value
            __props__.__dict__["encrypted_value"] = None
            __props__.__dict__["key_fingerprint"] = None
        super(Variable, __self__).__init__(
            'octopusdeploy:index/variable:Variable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            encrypted_value: Optional[pulumi.Input[str]] = None,
            is_editable: Optional[pulumi.Input[bool]] = None,
            is_sensitive: Optional[pulumi.Input[bool]] = None,
            key_fingerprint: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            pgp_key: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            prompt: Optional[pulumi.Input[pulumi.InputType['VariablePromptArgs']]] = None,
            scope: Optional[pulumi.Input[pulumi.InputType['VariableScopeArgs']]] = None,
            sensitive_value: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None) -> 'Variable':
        """
        Get an existing Variable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this variable.
        :param pulumi.Input[bool] is_editable: Indicates whether or not this variable is considered editable.
        :param pulumi.Input[bool] is_sensitive: Indicates whether or not this resource is considered sensitive and should be kept secret.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] type: The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VariableState.__new__(_VariableState)

        __props__.__dict__["description"] = description
        __props__.__dict__["encrypted_value"] = encrypted_value
        __props__.__dict__["is_editable"] = is_editable
        __props__.__dict__["is_sensitive"] = is_sensitive
        __props__.__dict__["key_fingerprint"] = key_fingerprint
        __props__.__dict__["name"] = name
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["pgp_key"] = pgp_key
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["prompt"] = prompt
        __props__.__dict__["scope"] = scope
        __props__.__dict__["sensitive_value"] = sensitive_value
        __props__.__dict__["type"] = type
        __props__.__dict__["value"] = value
        return Variable(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this variable.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptedValue")
    def encrypted_value(self) -> pulumi.Output[str]:
        return pulumi.get(self, "encrypted_value")

    @property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether or not this variable is considered editable.
        """
        return pulumi.get(self, "is_editable")

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether or not this resource is considered sensitive and should be kept secret.
        """
        return pulumi.get(self, "is_sensitive")

    @property
    @pulumi.getter(name="keyFingerprint")
    def key_fingerprint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "key_fingerprint")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="pgpKey")
    def pgp_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "pgp_key")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def prompt(self) -> pulumi.Output[Optional['outputs.VariablePrompt']]:
        return pulumi.get(self, "prompt")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional['outputs.VariableScope']]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sensitiveValue")
    def sensitive_value(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "sensitive_value")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `Certificate`, `Sensitive`, `String`, or `WorkerPool`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "value")

