// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages dynamic worker pools in Octopus Deploy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-octopusdeploy/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewDynamicWorkerPool(ctx, "example", &octopusdeploy.DynamicWorkerPoolArgs{
//				Description: pulumi.String("Description for the dynamic worker pool."),
//				IsDefault:   pulumi.Bool(true),
//				SortOrder:   pulumi.Int(5),
//				WorkerType:  pulumi.String("UbuntuDefault"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DynamicWorkerPool struct {
	pulumi.CustomResourceState

	CanAddWorkers pulumi.BoolOutput `pulumi:"canAddWorkers"`
	// The description of this dynamic worker pool.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	IsDefault   pulumi.BoolPtrOutput   `pulumi:"isDefault"`
	// The name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The order number to sort a dynamic worker pool.
	SortOrder pulumi.IntOutput `pulumi:"sortOrder"`
	// The space ID associated with this resource.
	SpaceId    pulumi.StringOutput `pulumi:"spaceId"`
	WorkerType pulumi.StringOutput `pulumi:"workerType"`
}

// NewDynamicWorkerPool registers a new resource with the given unique name, arguments, and options.
func NewDynamicWorkerPool(ctx *pulumi.Context,
	name string, args *DynamicWorkerPoolArgs, opts ...pulumi.ResourceOption) (*DynamicWorkerPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkerType == nil {
		return nil, errors.New("invalid value for required argument 'WorkerType'")
	}
	var resource DynamicWorkerPool
	err := ctx.RegisterResource("octopusdeploy:index/dynamicWorkerPool:DynamicWorkerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynamicWorkerPool gets an existing DynamicWorkerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynamicWorkerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynamicWorkerPoolState, opts ...pulumi.ResourceOption) (*DynamicWorkerPool, error) {
	var resource DynamicWorkerPool
	err := ctx.ReadResource("octopusdeploy:index/dynamicWorkerPool:DynamicWorkerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynamicWorkerPool resources.
type dynamicWorkerPoolState struct {
	CanAddWorkers *bool `pulumi:"canAddWorkers"`
	// The description of this dynamic worker pool.
	Description *string `pulumi:"description"`
	IsDefault   *bool   `pulumi:"isDefault"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The order number to sort a dynamic worker pool.
	SortOrder *int `pulumi:"sortOrder"`
	// The space ID associated with this resource.
	SpaceId    *string `pulumi:"spaceId"`
	WorkerType *string `pulumi:"workerType"`
}

type DynamicWorkerPoolState struct {
	CanAddWorkers pulumi.BoolPtrInput
	// The description of this dynamic worker pool.
	Description pulumi.StringPtrInput
	IsDefault   pulumi.BoolPtrInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The order number to sort a dynamic worker pool.
	SortOrder pulumi.IntPtrInput
	// The space ID associated with this resource.
	SpaceId    pulumi.StringPtrInput
	WorkerType pulumi.StringPtrInput
}

func (DynamicWorkerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicWorkerPoolState)(nil)).Elem()
}

type dynamicWorkerPoolArgs struct {
	// The description of this dynamic worker pool.
	Description *string `pulumi:"description"`
	IsDefault   *bool   `pulumi:"isDefault"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The order number to sort a dynamic worker pool.
	SortOrder *int `pulumi:"sortOrder"`
	// The space ID associated with this resource.
	SpaceId    *string `pulumi:"spaceId"`
	WorkerType string  `pulumi:"workerType"`
}

// The set of arguments for constructing a DynamicWorkerPool resource.
type DynamicWorkerPoolArgs struct {
	// The description of this dynamic worker pool.
	Description pulumi.StringPtrInput
	IsDefault   pulumi.BoolPtrInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The order number to sort a dynamic worker pool.
	SortOrder pulumi.IntPtrInput
	// The space ID associated with this resource.
	SpaceId    pulumi.StringPtrInput
	WorkerType pulumi.StringInput
}

func (DynamicWorkerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamicWorkerPoolArgs)(nil)).Elem()
}

type DynamicWorkerPoolInput interface {
	pulumi.Input

	ToDynamicWorkerPoolOutput() DynamicWorkerPoolOutput
	ToDynamicWorkerPoolOutputWithContext(ctx context.Context) DynamicWorkerPoolOutput
}

func (*DynamicWorkerPool) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicWorkerPool)(nil)).Elem()
}

func (i *DynamicWorkerPool) ToDynamicWorkerPoolOutput() DynamicWorkerPoolOutput {
	return i.ToDynamicWorkerPoolOutputWithContext(context.Background())
}

func (i *DynamicWorkerPool) ToDynamicWorkerPoolOutputWithContext(ctx context.Context) DynamicWorkerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicWorkerPoolOutput)
}

// DynamicWorkerPoolArrayInput is an input type that accepts DynamicWorkerPoolArray and DynamicWorkerPoolArrayOutput values.
// You can construct a concrete instance of `DynamicWorkerPoolArrayInput` via:
//
//	DynamicWorkerPoolArray{ DynamicWorkerPoolArgs{...} }
type DynamicWorkerPoolArrayInput interface {
	pulumi.Input

	ToDynamicWorkerPoolArrayOutput() DynamicWorkerPoolArrayOutput
	ToDynamicWorkerPoolArrayOutputWithContext(context.Context) DynamicWorkerPoolArrayOutput
}

type DynamicWorkerPoolArray []DynamicWorkerPoolInput

func (DynamicWorkerPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicWorkerPool)(nil)).Elem()
}

func (i DynamicWorkerPoolArray) ToDynamicWorkerPoolArrayOutput() DynamicWorkerPoolArrayOutput {
	return i.ToDynamicWorkerPoolArrayOutputWithContext(context.Background())
}

func (i DynamicWorkerPoolArray) ToDynamicWorkerPoolArrayOutputWithContext(ctx context.Context) DynamicWorkerPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicWorkerPoolArrayOutput)
}

// DynamicWorkerPoolMapInput is an input type that accepts DynamicWorkerPoolMap and DynamicWorkerPoolMapOutput values.
// You can construct a concrete instance of `DynamicWorkerPoolMapInput` via:
//
//	DynamicWorkerPoolMap{ "key": DynamicWorkerPoolArgs{...} }
type DynamicWorkerPoolMapInput interface {
	pulumi.Input

	ToDynamicWorkerPoolMapOutput() DynamicWorkerPoolMapOutput
	ToDynamicWorkerPoolMapOutputWithContext(context.Context) DynamicWorkerPoolMapOutput
}

type DynamicWorkerPoolMap map[string]DynamicWorkerPoolInput

func (DynamicWorkerPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicWorkerPool)(nil)).Elem()
}

func (i DynamicWorkerPoolMap) ToDynamicWorkerPoolMapOutput() DynamicWorkerPoolMapOutput {
	return i.ToDynamicWorkerPoolMapOutputWithContext(context.Background())
}

func (i DynamicWorkerPoolMap) ToDynamicWorkerPoolMapOutputWithContext(ctx context.Context) DynamicWorkerPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicWorkerPoolMapOutput)
}

type DynamicWorkerPoolOutput struct{ *pulumi.OutputState }

func (DynamicWorkerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicWorkerPool)(nil)).Elem()
}

func (o DynamicWorkerPoolOutput) ToDynamicWorkerPoolOutput() DynamicWorkerPoolOutput {
	return o
}

func (o DynamicWorkerPoolOutput) ToDynamicWorkerPoolOutputWithContext(ctx context.Context) DynamicWorkerPoolOutput {
	return o
}

func (o DynamicWorkerPoolOutput) CanAddWorkers() pulumi.BoolOutput {
	return o.ApplyT(func(v *DynamicWorkerPool) pulumi.BoolOutput { return v.CanAddWorkers }).(pulumi.BoolOutput)
}

// The description of this dynamic worker pool.
func (o DynamicWorkerPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicWorkerPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DynamicWorkerPoolOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DynamicWorkerPool) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The name of this resource.
func (o DynamicWorkerPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicWorkerPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The order number to sort a dynamic worker pool.
func (o DynamicWorkerPoolOutput) SortOrder() pulumi.IntOutput {
	return o.ApplyT(func(v *DynamicWorkerPool) pulumi.IntOutput { return v.SortOrder }).(pulumi.IntOutput)
}

// The space ID associated with this resource.
func (o DynamicWorkerPoolOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicWorkerPool) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

func (o DynamicWorkerPoolOutput) WorkerType() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamicWorkerPool) pulumi.StringOutput { return v.WorkerType }).(pulumi.StringOutput)
}

type DynamicWorkerPoolArrayOutput struct{ *pulumi.OutputState }

func (DynamicWorkerPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamicWorkerPool)(nil)).Elem()
}

func (o DynamicWorkerPoolArrayOutput) ToDynamicWorkerPoolArrayOutput() DynamicWorkerPoolArrayOutput {
	return o
}

func (o DynamicWorkerPoolArrayOutput) ToDynamicWorkerPoolArrayOutputWithContext(ctx context.Context) DynamicWorkerPoolArrayOutput {
	return o
}

func (o DynamicWorkerPoolArrayOutput) Index(i pulumi.IntInput) DynamicWorkerPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DynamicWorkerPool {
		return vs[0].([]*DynamicWorkerPool)[vs[1].(int)]
	}).(DynamicWorkerPoolOutput)
}

type DynamicWorkerPoolMapOutput struct{ *pulumi.OutputState }

func (DynamicWorkerPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamicWorkerPool)(nil)).Elem()
}

func (o DynamicWorkerPoolMapOutput) ToDynamicWorkerPoolMapOutput() DynamicWorkerPoolMapOutput {
	return o
}

func (o DynamicWorkerPoolMapOutput) ToDynamicWorkerPoolMapOutputWithContext(ctx context.Context) DynamicWorkerPoolMapOutput {
	return o
}

func (o DynamicWorkerPoolMapOutput) MapIndex(k pulumi.StringInput) DynamicWorkerPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DynamicWorkerPool {
		return vs[0].(map[string]*DynamicWorkerPool)[vs[1].(string)]
	}).(DynamicWorkerPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicWorkerPoolInput)(nil)).Elem(), &DynamicWorkerPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicWorkerPoolArrayInput)(nil)).Elem(), DynamicWorkerPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicWorkerPoolMapInput)(nil)).Elem(), DynamicWorkerPoolMap{})
	pulumi.RegisterOutputType(DynamicWorkerPoolOutput{})
	pulumi.RegisterOutputType(DynamicWorkerPoolArrayOutput{})
	pulumi.RegisterOutputType(DynamicWorkerPoolMapOutput{})
}
