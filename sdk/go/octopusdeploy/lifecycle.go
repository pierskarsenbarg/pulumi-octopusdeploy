// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages lifecycles in Octopus Deploy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-octopusdeploy/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewLifecycle(ctx, "example", &octopusdeploy.LifecycleArgs{
//				Description: pulumi.String("This is the default lifecycle."),
//				Phases: octopusdeploy.LifecyclePhaseArray{
//					&octopusdeploy.LifecyclePhaseArgs{
//						AutomaticDeploymentTargets: pulumi.StringArray{
//							pulumi.String("Environments-321"),
//						},
//						Name: pulumi.String("foo"),
//						ReleaseRetentionPolicy: &octopusdeploy.LifecyclePhaseReleaseRetentionPolicyArgs{
//							QuantityToKeep:    pulumi.Int(1),
//							ShouldKeepForever: pulumi.Bool(true),
//							Unit:              pulumi.String("Days"),
//						},
//						TentacleRetentionPolicy: &octopusdeploy.LifecyclePhaseTentacleRetentionPolicyArgs{
//							QuantityToKeep:    pulumi.Int(30),
//							ShouldKeepForever: pulumi.Bool(false),
//							Unit:              pulumi.String("Items"),
//						},
//					},
//					&octopusdeploy.LifecyclePhaseArgs{
//						IsOptionalPhase: pulumi.Bool(true),
//						Name:            pulumi.String("bar"),
//						OptionalDeploymentTargets: pulumi.StringArray{
//							pulumi.String("Environments-321"),
//						},
//					},
//				},
//				ReleaseRetentionPolicy: &octopusdeploy.LifecycleReleaseRetentionPolicyArgs{
//					QuantityToKeep:    pulumi.Int(1),
//					ShouldKeepForever: pulumi.Bool(true),
//					Unit:              pulumi.String("Days"),
//				},
//				TentacleRetentionPolicy: &octopusdeploy.LifecycleTentacleRetentionPolicyArgs{
//					QuantityToKeep:    pulumi.Int(30),
//					ShouldKeepForever: pulumi.Bool(false),
//					Unit:              pulumi.String("Items"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import octopusdeploy:index/lifecycle:Lifecycle [options] octopusdeploy_lifecycle.<name> <lifecycle-id>
//
// ```
type Lifecycle struct {
	pulumi.CustomResourceState

	// The description of this lifecycle.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of this resource.
	Name                   pulumi.StringOutput                   `pulumi:"name"`
	Phases                 LifecyclePhaseArrayOutput             `pulumi:"phases"`
	ReleaseRetentionPolicy LifecycleReleaseRetentionPolicyOutput `pulumi:"releaseRetentionPolicy"`
	// The space ID associated with this resource.
	SpaceId                 pulumi.StringOutput                    `pulumi:"spaceId"`
	TentacleRetentionPolicy LifecycleTentacleRetentionPolicyOutput `pulumi:"tentacleRetentionPolicy"`
}

// NewLifecycle registers a new resource with the given unique name, arguments, and options.
func NewLifecycle(ctx *pulumi.Context,
	name string, args *LifecycleArgs, opts ...pulumi.ResourceOption) (*Lifecycle, error) {
	if args == nil {
		args = &LifecycleArgs{}
	}

	var resource Lifecycle
	err := ctx.RegisterResource("octopusdeploy:index/lifecycle:Lifecycle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLifecycle gets an existing Lifecycle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLifecycle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LifecycleState, opts ...pulumi.ResourceOption) (*Lifecycle, error) {
	var resource Lifecycle
	err := ctx.ReadResource("octopusdeploy:index/lifecycle:Lifecycle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lifecycle resources.
type lifecycleState struct {
	// The description of this lifecycle.
	Description *string `pulumi:"description"`
	// The name of this resource.
	Name                   *string                          `pulumi:"name"`
	Phases                 []LifecyclePhase                 `pulumi:"phases"`
	ReleaseRetentionPolicy *LifecycleReleaseRetentionPolicy `pulumi:"releaseRetentionPolicy"`
	// The space ID associated with this resource.
	SpaceId                 *string                           `pulumi:"spaceId"`
	TentacleRetentionPolicy *LifecycleTentacleRetentionPolicy `pulumi:"tentacleRetentionPolicy"`
}

type LifecycleState struct {
	// The description of this lifecycle.
	Description pulumi.StringPtrInput
	// The name of this resource.
	Name                   pulumi.StringPtrInput
	Phases                 LifecyclePhaseArrayInput
	ReleaseRetentionPolicy LifecycleReleaseRetentionPolicyPtrInput
	// The space ID associated with this resource.
	SpaceId                 pulumi.StringPtrInput
	TentacleRetentionPolicy LifecycleTentacleRetentionPolicyPtrInput
}

func (LifecycleState) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleState)(nil)).Elem()
}

type lifecycleArgs struct {
	// The description of this lifecycle.
	Description *string `pulumi:"description"`
	// The name of this resource.
	Name                   *string                          `pulumi:"name"`
	Phases                 []LifecyclePhase                 `pulumi:"phases"`
	ReleaseRetentionPolicy *LifecycleReleaseRetentionPolicy `pulumi:"releaseRetentionPolicy"`
	// The space ID associated with this resource.
	SpaceId                 *string                           `pulumi:"spaceId"`
	TentacleRetentionPolicy *LifecycleTentacleRetentionPolicy `pulumi:"tentacleRetentionPolicy"`
}

// The set of arguments for constructing a Lifecycle resource.
type LifecycleArgs struct {
	// The description of this lifecycle.
	Description pulumi.StringPtrInput
	// The name of this resource.
	Name                   pulumi.StringPtrInput
	Phases                 LifecyclePhaseArrayInput
	ReleaseRetentionPolicy LifecycleReleaseRetentionPolicyPtrInput
	// The space ID associated with this resource.
	SpaceId                 pulumi.StringPtrInput
	TentacleRetentionPolicy LifecycleTentacleRetentionPolicyPtrInput
}

func (LifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleArgs)(nil)).Elem()
}

type LifecycleInput interface {
	pulumi.Input

	ToLifecycleOutput() LifecycleOutput
	ToLifecycleOutputWithContext(ctx context.Context) LifecycleOutput
}

func (*Lifecycle) ElementType() reflect.Type {
	return reflect.TypeOf((**Lifecycle)(nil)).Elem()
}

func (i *Lifecycle) ToLifecycleOutput() LifecycleOutput {
	return i.ToLifecycleOutputWithContext(context.Background())
}

func (i *Lifecycle) ToLifecycleOutputWithContext(ctx context.Context) LifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleOutput)
}

// LifecycleArrayInput is an input type that accepts LifecycleArray and LifecycleArrayOutput values.
// You can construct a concrete instance of `LifecycleArrayInput` via:
//
//	LifecycleArray{ LifecycleArgs{...} }
type LifecycleArrayInput interface {
	pulumi.Input

	ToLifecycleArrayOutput() LifecycleArrayOutput
	ToLifecycleArrayOutputWithContext(context.Context) LifecycleArrayOutput
}

type LifecycleArray []LifecycleInput

func (LifecycleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lifecycle)(nil)).Elem()
}

func (i LifecycleArray) ToLifecycleArrayOutput() LifecycleArrayOutput {
	return i.ToLifecycleArrayOutputWithContext(context.Background())
}

func (i LifecycleArray) ToLifecycleArrayOutputWithContext(ctx context.Context) LifecycleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleArrayOutput)
}

// LifecycleMapInput is an input type that accepts LifecycleMap and LifecycleMapOutput values.
// You can construct a concrete instance of `LifecycleMapInput` via:
//
//	LifecycleMap{ "key": LifecycleArgs{...} }
type LifecycleMapInput interface {
	pulumi.Input

	ToLifecycleMapOutput() LifecycleMapOutput
	ToLifecycleMapOutputWithContext(context.Context) LifecycleMapOutput
}

type LifecycleMap map[string]LifecycleInput

func (LifecycleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lifecycle)(nil)).Elem()
}

func (i LifecycleMap) ToLifecycleMapOutput() LifecycleMapOutput {
	return i.ToLifecycleMapOutputWithContext(context.Background())
}

func (i LifecycleMap) ToLifecycleMapOutputWithContext(ctx context.Context) LifecycleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleMapOutput)
}

type LifecycleOutput struct{ *pulumi.OutputState }

func (LifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lifecycle)(nil)).Elem()
}

func (o LifecycleOutput) ToLifecycleOutput() LifecycleOutput {
	return o
}

func (o LifecycleOutput) ToLifecycleOutputWithContext(ctx context.Context) LifecycleOutput {
	return o
}

// The description of this lifecycle.
func (o LifecycleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lifecycle) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of this resource.
func (o LifecycleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Lifecycle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LifecycleOutput) Phases() LifecyclePhaseArrayOutput {
	return o.ApplyT(func(v *Lifecycle) LifecyclePhaseArrayOutput { return v.Phases }).(LifecyclePhaseArrayOutput)
}

func (o LifecycleOutput) ReleaseRetentionPolicy() LifecycleReleaseRetentionPolicyOutput {
	return o.ApplyT(func(v *Lifecycle) LifecycleReleaseRetentionPolicyOutput { return v.ReleaseRetentionPolicy }).(LifecycleReleaseRetentionPolicyOutput)
}

// The space ID associated with this resource.
func (o LifecycleOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Lifecycle) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

func (o LifecycleOutput) TentacleRetentionPolicy() LifecycleTentacleRetentionPolicyOutput {
	return o.ApplyT(func(v *Lifecycle) LifecycleTentacleRetentionPolicyOutput { return v.TentacleRetentionPolicy }).(LifecycleTentacleRetentionPolicyOutput)
}

type LifecycleArrayOutput struct{ *pulumi.OutputState }

func (LifecycleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lifecycle)(nil)).Elem()
}

func (o LifecycleArrayOutput) ToLifecycleArrayOutput() LifecycleArrayOutput {
	return o
}

func (o LifecycleArrayOutput) ToLifecycleArrayOutputWithContext(ctx context.Context) LifecycleArrayOutput {
	return o
}

func (o LifecycleArrayOutput) Index(i pulumi.IntInput) LifecycleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Lifecycle {
		return vs[0].([]*Lifecycle)[vs[1].(int)]
	}).(LifecycleOutput)
}

type LifecycleMapOutput struct{ *pulumi.OutputState }

func (LifecycleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lifecycle)(nil)).Elem()
}

func (o LifecycleMapOutput) ToLifecycleMapOutput() LifecycleMapOutput {
	return o
}

func (o LifecycleMapOutput) ToLifecycleMapOutputWithContext(ctx context.Context) LifecycleMapOutput {
	return o
}

func (o LifecycleMapOutput) MapIndex(k pulumi.StringInput) LifecycleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Lifecycle {
		return vs[0].(map[string]*Lifecycle)[vs[1].(string)]
	}).(LifecycleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleInput)(nil)).Elem(), &Lifecycle{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleArrayInput)(nil)).Elem(), LifecycleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleMapInput)(nil)).Elem(), LifecycleMap{})
	pulumi.RegisterOutputType(LifecycleOutput{})
	pulumi.RegisterOutputType(LifecycleArrayOutput{})
	pulumi.RegisterOutputType(LifecycleMapOutput{})
}
