// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages a GitHub repository feed in Octopus Deploy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-octopusdeploy/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewGithubRepositoryFeed(ctx, "example", &octopusdeploy.GithubRepositoryFeedArgs{
//				DownloadAttempts:            pulumi.Int(1),
//				DownloadRetryBackoffSeconds: pulumi.Int(30),
//				FeedUri:                     pulumi.String("https://api.github.com"),
//				Password:                    pulumi.String("test-password"),
//				Username:                    pulumi.String("test-username"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import octopusdeploy:index/githubRepositoryFeed:GithubRepositoryFeed [options] octopusdeploy_github_repository_feed.<name> <feed-id>
//
// ```
type GithubRepositoryFeed struct {
	pulumi.CustomResourceState

	// The number of times a deployment should attempt to download a package from this feed before failing.
	DownloadAttempts pulumi.IntPtrOutput `pulumi:"downloadAttempts"`
	// The number of seconds to apply as a linear back off between download attempts.
	DownloadRetryBackoffSeconds pulumi.IntPtrOutput `pulumi:"downloadRetryBackoffSeconds"`
	FeedUri                     pulumi.StringOutput `pulumi:"feedUri"`
	// A short, memorable, unique name for this feed. Example: ACME Builds.
	Name                              pulumi.StringOutput      `pulumi:"name"`
	PackageAcquisitionLocationOptions pulumi.StringArrayOutput `pulumi:"packageAcquisitionLocationOptions"`
	// The password associated with this resource.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The space ID associated with this resource.
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
	// The username associated with this resource.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewGithubRepositoryFeed registers a new resource with the given unique name, arguments, and options.
func NewGithubRepositoryFeed(ctx *pulumi.Context,
	name string, args *GithubRepositoryFeedArgs, opts ...pulumi.ResourceOption) (*GithubRepositoryFeed, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeedUri == nil {
		return nil, errors.New("invalid value for required argument 'FeedUri'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.Username != nil {
		args.Username = pulumi.ToSecret(args.Username).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"username",
	})
	opts = append(opts, secrets)
	var resource GithubRepositoryFeed
	err := ctx.RegisterResource("octopusdeploy:index/githubRepositoryFeed:GithubRepositoryFeed", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGithubRepositoryFeed gets an existing GithubRepositoryFeed resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGithubRepositoryFeed(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GithubRepositoryFeedState, opts ...pulumi.ResourceOption) (*GithubRepositoryFeed, error) {
	var resource GithubRepositoryFeed
	err := ctx.ReadResource("octopusdeploy:index/githubRepositoryFeed:GithubRepositoryFeed", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GithubRepositoryFeed resources.
type githubRepositoryFeedState struct {
	// The number of times a deployment should attempt to download a package from this feed before failing.
	DownloadAttempts *int `pulumi:"downloadAttempts"`
	// The number of seconds to apply as a linear back off between download attempts.
	DownloadRetryBackoffSeconds *int    `pulumi:"downloadRetryBackoffSeconds"`
	FeedUri                     *string `pulumi:"feedUri"`
	// A short, memorable, unique name for this feed. Example: ACME Builds.
	Name                              *string  `pulumi:"name"`
	PackageAcquisitionLocationOptions []string `pulumi:"packageAcquisitionLocationOptions"`
	// The password associated with this resource.
	Password *string `pulumi:"password"`
	// The space ID associated with this resource.
	SpaceId *string `pulumi:"spaceId"`
	// The username associated with this resource.
	Username *string `pulumi:"username"`
}

type GithubRepositoryFeedState struct {
	// The number of times a deployment should attempt to download a package from this feed before failing.
	DownloadAttempts pulumi.IntPtrInput
	// The number of seconds to apply as a linear back off between download attempts.
	DownloadRetryBackoffSeconds pulumi.IntPtrInput
	FeedUri                     pulumi.StringPtrInput
	// A short, memorable, unique name for this feed. Example: ACME Builds.
	Name                              pulumi.StringPtrInput
	PackageAcquisitionLocationOptions pulumi.StringArrayInput
	// The password associated with this resource.
	Password pulumi.StringPtrInput
	// The space ID associated with this resource.
	SpaceId pulumi.StringPtrInput
	// The username associated with this resource.
	Username pulumi.StringPtrInput
}

func (GithubRepositoryFeedState) ElementType() reflect.Type {
	return reflect.TypeOf((*githubRepositoryFeedState)(nil)).Elem()
}

type githubRepositoryFeedArgs struct {
	// The number of times a deployment should attempt to download a package from this feed before failing.
	DownloadAttempts *int `pulumi:"downloadAttempts"`
	// The number of seconds to apply as a linear back off between download attempts.
	DownloadRetryBackoffSeconds *int   `pulumi:"downloadRetryBackoffSeconds"`
	FeedUri                     string `pulumi:"feedUri"`
	// A short, memorable, unique name for this feed. Example: ACME Builds.
	Name                              *string  `pulumi:"name"`
	PackageAcquisitionLocationOptions []string `pulumi:"packageAcquisitionLocationOptions"`
	// The password associated with this resource.
	Password *string `pulumi:"password"`
	// The space ID associated with this resource.
	SpaceId *string `pulumi:"spaceId"`
	// The username associated with this resource.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a GithubRepositoryFeed resource.
type GithubRepositoryFeedArgs struct {
	// The number of times a deployment should attempt to download a package from this feed before failing.
	DownloadAttempts pulumi.IntPtrInput
	// The number of seconds to apply as a linear back off between download attempts.
	DownloadRetryBackoffSeconds pulumi.IntPtrInput
	FeedUri                     pulumi.StringInput
	// A short, memorable, unique name for this feed. Example: ACME Builds.
	Name                              pulumi.StringPtrInput
	PackageAcquisitionLocationOptions pulumi.StringArrayInput
	// The password associated with this resource.
	Password pulumi.StringPtrInput
	// The space ID associated with this resource.
	SpaceId pulumi.StringPtrInput
	// The username associated with this resource.
	Username pulumi.StringPtrInput
}

func (GithubRepositoryFeedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*githubRepositoryFeedArgs)(nil)).Elem()
}

type GithubRepositoryFeedInput interface {
	pulumi.Input

	ToGithubRepositoryFeedOutput() GithubRepositoryFeedOutput
	ToGithubRepositoryFeedOutputWithContext(ctx context.Context) GithubRepositoryFeedOutput
}

func (*GithubRepositoryFeed) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubRepositoryFeed)(nil)).Elem()
}

func (i *GithubRepositoryFeed) ToGithubRepositoryFeedOutput() GithubRepositoryFeedOutput {
	return i.ToGithubRepositoryFeedOutputWithContext(context.Background())
}

func (i *GithubRepositoryFeed) ToGithubRepositoryFeedOutputWithContext(ctx context.Context) GithubRepositoryFeedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubRepositoryFeedOutput)
}

// GithubRepositoryFeedArrayInput is an input type that accepts GithubRepositoryFeedArray and GithubRepositoryFeedArrayOutput values.
// You can construct a concrete instance of `GithubRepositoryFeedArrayInput` via:
//
//	GithubRepositoryFeedArray{ GithubRepositoryFeedArgs{...} }
type GithubRepositoryFeedArrayInput interface {
	pulumi.Input

	ToGithubRepositoryFeedArrayOutput() GithubRepositoryFeedArrayOutput
	ToGithubRepositoryFeedArrayOutputWithContext(context.Context) GithubRepositoryFeedArrayOutput
}

type GithubRepositoryFeedArray []GithubRepositoryFeedInput

func (GithubRepositoryFeedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubRepositoryFeed)(nil)).Elem()
}

func (i GithubRepositoryFeedArray) ToGithubRepositoryFeedArrayOutput() GithubRepositoryFeedArrayOutput {
	return i.ToGithubRepositoryFeedArrayOutputWithContext(context.Background())
}

func (i GithubRepositoryFeedArray) ToGithubRepositoryFeedArrayOutputWithContext(ctx context.Context) GithubRepositoryFeedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubRepositoryFeedArrayOutput)
}

// GithubRepositoryFeedMapInput is an input type that accepts GithubRepositoryFeedMap and GithubRepositoryFeedMapOutput values.
// You can construct a concrete instance of `GithubRepositoryFeedMapInput` via:
//
//	GithubRepositoryFeedMap{ "key": GithubRepositoryFeedArgs{...} }
type GithubRepositoryFeedMapInput interface {
	pulumi.Input

	ToGithubRepositoryFeedMapOutput() GithubRepositoryFeedMapOutput
	ToGithubRepositoryFeedMapOutputWithContext(context.Context) GithubRepositoryFeedMapOutput
}

type GithubRepositoryFeedMap map[string]GithubRepositoryFeedInput

func (GithubRepositoryFeedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubRepositoryFeed)(nil)).Elem()
}

func (i GithubRepositoryFeedMap) ToGithubRepositoryFeedMapOutput() GithubRepositoryFeedMapOutput {
	return i.ToGithubRepositoryFeedMapOutputWithContext(context.Background())
}

func (i GithubRepositoryFeedMap) ToGithubRepositoryFeedMapOutputWithContext(ctx context.Context) GithubRepositoryFeedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubRepositoryFeedMapOutput)
}

type GithubRepositoryFeedOutput struct{ *pulumi.OutputState }

func (GithubRepositoryFeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubRepositoryFeed)(nil)).Elem()
}

func (o GithubRepositoryFeedOutput) ToGithubRepositoryFeedOutput() GithubRepositoryFeedOutput {
	return o
}

func (o GithubRepositoryFeedOutput) ToGithubRepositoryFeedOutputWithContext(ctx context.Context) GithubRepositoryFeedOutput {
	return o
}

// The number of times a deployment should attempt to download a package from this feed before failing.
func (o GithubRepositoryFeedOutput) DownloadAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GithubRepositoryFeed) pulumi.IntPtrOutput { return v.DownloadAttempts }).(pulumi.IntPtrOutput)
}

// The number of seconds to apply as a linear back off between download attempts.
func (o GithubRepositoryFeedOutput) DownloadRetryBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GithubRepositoryFeed) pulumi.IntPtrOutput { return v.DownloadRetryBackoffSeconds }).(pulumi.IntPtrOutput)
}

func (o GithubRepositoryFeedOutput) FeedUri() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubRepositoryFeed) pulumi.StringOutput { return v.FeedUri }).(pulumi.StringOutput)
}

// A short, memorable, unique name for this feed. Example: ACME Builds.
func (o GithubRepositoryFeedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubRepositoryFeed) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GithubRepositoryFeedOutput) PackageAcquisitionLocationOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GithubRepositoryFeed) pulumi.StringArrayOutput { return v.PackageAcquisitionLocationOptions }).(pulumi.StringArrayOutput)
}

// The password associated with this resource.
func (o GithubRepositoryFeedOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubRepositoryFeed) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The space ID associated with this resource.
func (o GithubRepositoryFeedOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubRepositoryFeed) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

// The username associated with this resource.
func (o GithubRepositoryFeedOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubRepositoryFeed) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type GithubRepositoryFeedArrayOutput struct{ *pulumi.OutputState }

func (GithubRepositoryFeedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubRepositoryFeed)(nil)).Elem()
}

func (o GithubRepositoryFeedArrayOutput) ToGithubRepositoryFeedArrayOutput() GithubRepositoryFeedArrayOutput {
	return o
}

func (o GithubRepositoryFeedArrayOutput) ToGithubRepositoryFeedArrayOutputWithContext(ctx context.Context) GithubRepositoryFeedArrayOutput {
	return o
}

func (o GithubRepositoryFeedArrayOutput) Index(i pulumi.IntInput) GithubRepositoryFeedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GithubRepositoryFeed {
		return vs[0].([]*GithubRepositoryFeed)[vs[1].(int)]
	}).(GithubRepositoryFeedOutput)
}

type GithubRepositoryFeedMapOutput struct{ *pulumi.OutputState }

func (GithubRepositoryFeedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubRepositoryFeed)(nil)).Elem()
}

func (o GithubRepositoryFeedMapOutput) ToGithubRepositoryFeedMapOutput() GithubRepositoryFeedMapOutput {
	return o
}

func (o GithubRepositoryFeedMapOutput) ToGithubRepositoryFeedMapOutputWithContext(ctx context.Context) GithubRepositoryFeedMapOutput {
	return o
}

func (o GithubRepositoryFeedMapOutput) MapIndex(k pulumi.StringInput) GithubRepositoryFeedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GithubRepositoryFeed {
		return vs[0].(map[string]*GithubRepositoryFeed)[vs[1].(string)]
	}).(GithubRepositoryFeedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GithubRepositoryFeedInput)(nil)).Elem(), &GithubRepositoryFeed{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubRepositoryFeedArrayInput)(nil)).Elem(), GithubRepositoryFeedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubRepositoryFeedMapInput)(nil)).Elem(), GithubRepositoryFeedMap{})
	pulumi.RegisterOutputType(GithubRepositoryFeedOutput{})
	pulumi.RegisterOutputType(GithubRepositoryFeedArrayOutput{})
	pulumi.RegisterOutputType(GithubRepositoryFeedMapOutput{})
}
