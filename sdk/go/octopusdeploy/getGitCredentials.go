// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about existing GitCredentials.
func LookupGitCredentials(ctx *pulumi.Context, args *LookupGitCredentialsArgs, opts ...pulumi.InvokeOption) (*LookupGitCredentialsResult, error) {
	var rv LookupGitCredentialsResult
	err := ctx.Invoke("octopusdeploy:index/getGitCredentials:getGitCredentials", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitCredentials.
type LookupGitCredentialsArgs struct {
	// A list of Git Credentials that match the filter(s).
	GitCredentials []GetGitCredentialsGitCredential `pulumi:"gitCredentials"`
	// A filter to search by name.
	Name *string `pulumi:"name"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// A filter to specify the number of items to take (or return) in the response.
	Take *int `pulumi:"take"`
}

// A collection of values returned by getGitCredentials.
type LookupGitCredentialsResult struct {
	// A list of Git Credentials that match the filter(s).
	GitCredentials []GetGitCredentialsGitCredential `pulumi:"gitCredentials"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A filter to search by name.
	Name *string `pulumi:"name"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// A filter to specify the number of items to take (or return) in the response.
	Take *int `pulumi:"take"`
}

func LookupGitCredentialsOutput(ctx *pulumi.Context, args LookupGitCredentialsOutputArgs, opts ...pulumi.InvokeOption) LookupGitCredentialsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGitCredentialsResult, error) {
			args := v.(LookupGitCredentialsArgs)
			r, err := LookupGitCredentials(ctx, &args, opts...)
			var s LookupGitCredentialsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGitCredentialsResultOutput)
}

// A collection of arguments for invoking getGitCredentials.
type LookupGitCredentialsOutputArgs struct {
	// A list of Git Credentials that match the filter(s).
	GitCredentials GetGitCredentialsGitCredentialArrayInput `pulumi:"gitCredentials"`
	// A filter to search by name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to specify the number of items to skip in the response.
	Skip pulumi.IntPtrInput `pulumi:"skip"`
	// A filter to specify the number of items to take (or return) in the response.
	Take pulumi.IntPtrInput `pulumi:"take"`
}

func (LookupGitCredentialsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitCredentialsArgs)(nil)).Elem()
}

// A collection of values returned by getGitCredentials.
type LookupGitCredentialsResultOutput struct{ *pulumi.OutputState }

func (LookupGitCredentialsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitCredentialsResult)(nil)).Elem()
}

func (o LookupGitCredentialsResultOutput) ToLookupGitCredentialsResultOutput() LookupGitCredentialsResultOutput {
	return o
}

func (o LookupGitCredentialsResultOutput) ToLookupGitCredentialsResultOutputWithContext(ctx context.Context) LookupGitCredentialsResultOutput {
	return o
}

// A list of Git Credentials that match the filter(s).
func (o LookupGitCredentialsResultOutput) GitCredentials() GetGitCredentialsGitCredentialArrayOutput {
	return o.ApplyT(func(v LookupGitCredentialsResult) []GetGitCredentialsGitCredential { return v.GitCredentials }).(GetGitCredentialsGitCredentialArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGitCredentialsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitCredentialsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A filter to search by name.
func (o LookupGitCredentialsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitCredentialsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A filter to specify the number of items to skip in the response.
func (o LookupGitCredentialsResultOutput) Skip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupGitCredentialsResult) *int { return v.Skip }).(pulumi.IntPtrOutput)
}

// A filter to specify the number of items to take (or return) in the response.
func (o LookupGitCredentialsResultOutput) Take() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupGitCredentialsResult) *int { return v.Take }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitCredentialsResultOutput{})
}
