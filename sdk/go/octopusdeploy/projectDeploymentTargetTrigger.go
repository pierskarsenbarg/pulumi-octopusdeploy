// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-octopusdeploy/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewProjectDeploymentTargetTrigger(ctx, "example", &octopusdeploy.ProjectDeploymentTargetTriggerArgs{
//				EventCategories: pulumi.StringArray{
//					pulumi.String("MachineUnhealthy"),
//				},
//				ProjectId: pulumi.String("Projects-123"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger [options] octopusdeploy_project_deployment_target_trigger.<name> <project_deployment_target_trigger-id>
//
// ```
type ProjectDeploymentTargetTrigger struct {
	pulumi.CustomResourceState

	// Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EnvironmentIds pulumi.StringArrayOutput `pulumi:"environmentIds"`
	// Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventCategories pulumi.StringArrayOutput `pulumi:"eventCategories"`
	// Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventGroups pulumi.StringArrayOutput `pulumi:"eventGroups"`
	// The name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the project to attach the trigger.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
	ShouldRedeploy pulumi.BoolPtrOutput `pulumi:"shouldRedeploy"`
}

// NewProjectDeploymentTargetTrigger registers a new resource with the given unique name, arguments, and options.
func NewProjectDeploymentTargetTrigger(ctx *pulumi.Context,
	name string, args *ProjectDeploymentTargetTriggerArgs, opts ...pulumi.ResourceOption) (*ProjectDeploymentTargetTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource ProjectDeploymentTargetTrigger
	err := ctx.RegisterResource("octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectDeploymentTargetTrigger gets an existing ProjectDeploymentTargetTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectDeploymentTargetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectDeploymentTargetTriggerState, opts ...pulumi.ResourceOption) (*ProjectDeploymentTargetTrigger, error) {
	var resource ProjectDeploymentTargetTrigger
	err := ctx.ReadResource("octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectDeploymentTargetTrigger resources.
type projectDeploymentTargetTriggerState struct {
	// Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EnvironmentIds []string `pulumi:"environmentIds"`
	// Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventCategories []string `pulumi:"eventCategories"`
	// Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventGroups []string `pulumi:"eventGroups"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The ID of the project to attach the trigger.
	ProjectId *string `pulumi:"projectId"`
	// Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	Roles []string `pulumi:"roles"`
	// Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
	ShouldRedeploy *bool `pulumi:"shouldRedeploy"`
}

type ProjectDeploymentTargetTriggerState struct {
	// Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EnvironmentIds pulumi.StringArrayInput
	// Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventCategories pulumi.StringArrayInput
	// Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventGroups pulumi.StringArrayInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The ID of the project to attach the trigger.
	ProjectId pulumi.StringPtrInput
	// Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	Roles pulumi.StringArrayInput
	// Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
	ShouldRedeploy pulumi.BoolPtrInput
}

func (ProjectDeploymentTargetTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectDeploymentTargetTriggerState)(nil)).Elem()
}

type projectDeploymentTargetTriggerArgs struct {
	// Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EnvironmentIds []string `pulumi:"environmentIds"`
	// Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventCategories []string `pulumi:"eventCategories"`
	// Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventGroups []string `pulumi:"eventGroups"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The ID of the project to attach the trigger.
	ProjectId string `pulumi:"projectId"`
	// Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	Roles []string `pulumi:"roles"`
	// Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
	ShouldRedeploy *bool `pulumi:"shouldRedeploy"`
}

// The set of arguments for constructing a ProjectDeploymentTargetTrigger resource.
type ProjectDeploymentTargetTriggerArgs struct {
	// Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EnvironmentIds pulumi.StringArrayInput
	// Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventCategories pulumi.StringArrayInput
	// Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	EventGroups pulumi.StringArrayInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The ID of the project to attach the trigger.
	ProjectId pulumi.StringInput
	// Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
	Roles pulumi.StringArrayInput
	// Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
	ShouldRedeploy pulumi.BoolPtrInput
}

func (ProjectDeploymentTargetTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectDeploymentTargetTriggerArgs)(nil)).Elem()
}

type ProjectDeploymentTargetTriggerInput interface {
	pulumi.Input

	ToProjectDeploymentTargetTriggerOutput() ProjectDeploymentTargetTriggerOutput
	ToProjectDeploymentTargetTriggerOutputWithContext(ctx context.Context) ProjectDeploymentTargetTriggerOutput
}

func (*ProjectDeploymentTargetTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDeploymentTargetTrigger)(nil)).Elem()
}

func (i *ProjectDeploymentTargetTrigger) ToProjectDeploymentTargetTriggerOutput() ProjectDeploymentTargetTriggerOutput {
	return i.ToProjectDeploymentTargetTriggerOutputWithContext(context.Background())
}

func (i *ProjectDeploymentTargetTrigger) ToProjectDeploymentTargetTriggerOutputWithContext(ctx context.Context) ProjectDeploymentTargetTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDeploymentTargetTriggerOutput)
}

// ProjectDeploymentTargetTriggerArrayInput is an input type that accepts ProjectDeploymentTargetTriggerArray and ProjectDeploymentTargetTriggerArrayOutput values.
// You can construct a concrete instance of `ProjectDeploymentTargetTriggerArrayInput` via:
//
//	ProjectDeploymentTargetTriggerArray{ ProjectDeploymentTargetTriggerArgs{...} }
type ProjectDeploymentTargetTriggerArrayInput interface {
	pulumi.Input

	ToProjectDeploymentTargetTriggerArrayOutput() ProjectDeploymentTargetTriggerArrayOutput
	ToProjectDeploymentTargetTriggerArrayOutputWithContext(context.Context) ProjectDeploymentTargetTriggerArrayOutput
}

type ProjectDeploymentTargetTriggerArray []ProjectDeploymentTargetTriggerInput

func (ProjectDeploymentTargetTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectDeploymentTargetTrigger)(nil)).Elem()
}

func (i ProjectDeploymentTargetTriggerArray) ToProjectDeploymentTargetTriggerArrayOutput() ProjectDeploymentTargetTriggerArrayOutput {
	return i.ToProjectDeploymentTargetTriggerArrayOutputWithContext(context.Background())
}

func (i ProjectDeploymentTargetTriggerArray) ToProjectDeploymentTargetTriggerArrayOutputWithContext(ctx context.Context) ProjectDeploymentTargetTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDeploymentTargetTriggerArrayOutput)
}

// ProjectDeploymentTargetTriggerMapInput is an input type that accepts ProjectDeploymentTargetTriggerMap and ProjectDeploymentTargetTriggerMapOutput values.
// You can construct a concrete instance of `ProjectDeploymentTargetTriggerMapInput` via:
//
//	ProjectDeploymentTargetTriggerMap{ "key": ProjectDeploymentTargetTriggerArgs{...} }
type ProjectDeploymentTargetTriggerMapInput interface {
	pulumi.Input

	ToProjectDeploymentTargetTriggerMapOutput() ProjectDeploymentTargetTriggerMapOutput
	ToProjectDeploymentTargetTriggerMapOutputWithContext(context.Context) ProjectDeploymentTargetTriggerMapOutput
}

type ProjectDeploymentTargetTriggerMap map[string]ProjectDeploymentTargetTriggerInput

func (ProjectDeploymentTargetTriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectDeploymentTargetTrigger)(nil)).Elem()
}

func (i ProjectDeploymentTargetTriggerMap) ToProjectDeploymentTargetTriggerMapOutput() ProjectDeploymentTargetTriggerMapOutput {
	return i.ToProjectDeploymentTargetTriggerMapOutputWithContext(context.Background())
}

func (i ProjectDeploymentTargetTriggerMap) ToProjectDeploymentTargetTriggerMapOutputWithContext(ctx context.Context) ProjectDeploymentTargetTriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDeploymentTargetTriggerMapOutput)
}

type ProjectDeploymentTargetTriggerOutput struct{ *pulumi.OutputState }

func (ProjectDeploymentTargetTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDeploymentTargetTrigger)(nil)).Elem()
}

func (o ProjectDeploymentTargetTriggerOutput) ToProjectDeploymentTargetTriggerOutput() ProjectDeploymentTargetTriggerOutput {
	return o
}

func (o ProjectDeploymentTargetTriggerOutput) ToProjectDeploymentTargetTriggerOutputWithContext(ctx context.Context) ProjectDeploymentTargetTriggerOutput {
	return o
}

// Apply environment id filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
func (o ProjectDeploymentTargetTriggerOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectDeploymentTargetTrigger) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

// Apply event category filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
func (o ProjectDeploymentTargetTriggerOutput) EventCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectDeploymentTargetTrigger) pulumi.StringArrayOutput { return v.EventCategories }).(pulumi.StringArrayOutput)
}

// Apply event group filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
func (o ProjectDeploymentTargetTriggerOutput) EventGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectDeploymentTargetTrigger) pulumi.StringArrayOutput { return v.EventGroups }).(pulumi.StringArrayOutput)
}

// The name of this resource.
func (o ProjectDeploymentTargetTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDeploymentTargetTrigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the project to attach the trigger.
func (o ProjectDeploymentTargetTriggerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDeploymentTargetTrigger) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Apply event role filters to restrict which deployment targets will actually cause the trigger to fire, and consequently, which deployment targets will be automatically deployed to.
func (o ProjectDeploymentTargetTriggerOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectDeploymentTargetTrigger) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
func (o ProjectDeploymentTargetTriggerOutput) ShouldRedeploy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectDeploymentTargetTrigger) pulumi.BoolPtrOutput { return v.ShouldRedeploy }).(pulumi.BoolPtrOutput)
}

type ProjectDeploymentTargetTriggerArrayOutput struct{ *pulumi.OutputState }

func (ProjectDeploymentTargetTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectDeploymentTargetTrigger)(nil)).Elem()
}

func (o ProjectDeploymentTargetTriggerArrayOutput) ToProjectDeploymentTargetTriggerArrayOutput() ProjectDeploymentTargetTriggerArrayOutput {
	return o
}

func (o ProjectDeploymentTargetTriggerArrayOutput) ToProjectDeploymentTargetTriggerArrayOutputWithContext(ctx context.Context) ProjectDeploymentTargetTriggerArrayOutput {
	return o
}

func (o ProjectDeploymentTargetTriggerArrayOutput) Index(i pulumi.IntInput) ProjectDeploymentTargetTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectDeploymentTargetTrigger {
		return vs[0].([]*ProjectDeploymentTargetTrigger)[vs[1].(int)]
	}).(ProjectDeploymentTargetTriggerOutput)
}

type ProjectDeploymentTargetTriggerMapOutput struct{ *pulumi.OutputState }

func (ProjectDeploymentTargetTriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectDeploymentTargetTrigger)(nil)).Elem()
}

func (o ProjectDeploymentTargetTriggerMapOutput) ToProjectDeploymentTargetTriggerMapOutput() ProjectDeploymentTargetTriggerMapOutput {
	return o
}

func (o ProjectDeploymentTargetTriggerMapOutput) ToProjectDeploymentTargetTriggerMapOutputWithContext(ctx context.Context) ProjectDeploymentTargetTriggerMapOutput {
	return o
}

func (o ProjectDeploymentTargetTriggerMapOutput) MapIndex(k pulumi.StringInput) ProjectDeploymentTargetTriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectDeploymentTargetTrigger {
		return vs[0].(map[string]*ProjectDeploymentTargetTrigger)[vs[1].(string)]
	}).(ProjectDeploymentTargetTriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDeploymentTargetTriggerInput)(nil)).Elem(), &ProjectDeploymentTargetTrigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDeploymentTargetTriggerArrayInput)(nil)).Elem(), ProjectDeploymentTargetTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDeploymentTargetTriggerMapInput)(nil)).Elem(), ProjectDeploymentTargetTriggerMap{})
	pulumi.RegisterOutputType(ProjectDeploymentTargetTriggerOutput{})
	pulumi.RegisterOutputType(ProjectDeploymentTargetTriggerArrayOutput{})
	pulumi.RegisterOutputType(ProjectDeploymentTargetTriggerMapOutput{})
}
