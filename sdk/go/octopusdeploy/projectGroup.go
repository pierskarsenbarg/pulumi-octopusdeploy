// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages project groups in Octopus Deploy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-octopusdeploy/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewProjectGroup(ctx, "example", &octopusdeploy.ProjectGroupArgs{
//				Description: pulumi.String("The development project group."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import octopusdeploy:index/projectGroup:ProjectGroup [options] octopusdeploy_project_group.<name> <project_group-id>
//
// ```
type ProjectGroup struct {
	pulumi.CustomResourceState

	// The description of this project group.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the retention policy associated with this project group.
	RetentionPolicyId pulumi.StringOutput `pulumi:"retentionPolicyId"`
	// The space ID associated with this project group.
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
}

// NewProjectGroup registers a new resource with the given unique name, arguments, and options.
func NewProjectGroup(ctx *pulumi.Context,
	name string, args *ProjectGroupArgs, opts ...pulumi.ResourceOption) (*ProjectGroup, error) {
	if args == nil {
		args = &ProjectGroupArgs{}
	}

	var resource ProjectGroup
	err := ctx.RegisterResource("octopusdeploy:index/projectGroup:ProjectGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectGroup gets an existing ProjectGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectGroupState, opts ...pulumi.ResourceOption) (*ProjectGroup, error) {
	var resource ProjectGroup
	err := ctx.ReadResource("octopusdeploy:index/projectGroup:ProjectGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectGroup resources.
type projectGroupState struct {
	// The description of this project group.
	Description *string `pulumi:"description"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The ID of the retention policy associated with this project group.
	RetentionPolicyId *string `pulumi:"retentionPolicyId"`
	// The space ID associated with this project group.
	SpaceId *string `pulumi:"spaceId"`
}

type ProjectGroupState struct {
	// The description of this project group.
	Description pulumi.StringPtrInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The ID of the retention policy associated with this project group.
	RetentionPolicyId pulumi.StringPtrInput
	// The space ID associated with this project group.
	SpaceId pulumi.StringPtrInput
}

func (ProjectGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectGroupState)(nil)).Elem()
}

type projectGroupArgs struct {
	// The description of this project group.
	Description *string `pulumi:"description"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The ID of the retention policy associated with this project group.
	RetentionPolicyId *string `pulumi:"retentionPolicyId"`
	// The space ID associated with this project group.
	SpaceId *string `pulumi:"spaceId"`
}

// The set of arguments for constructing a ProjectGroup resource.
type ProjectGroupArgs struct {
	// The description of this project group.
	Description pulumi.StringPtrInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The ID of the retention policy associated with this project group.
	RetentionPolicyId pulumi.StringPtrInput
	// The space ID associated with this project group.
	SpaceId pulumi.StringPtrInput
}

func (ProjectGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectGroupArgs)(nil)).Elem()
}

type ProjectGroupInput interface {
	pulumi.Input

	ToProjectGroupOutput() ProjectGroupOutput
	ToProjectGroupOutputWithContext(ctx context.Context) ProjectGroupOutput
}

func (*ProjectGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGroup)(nil)).Elem()
}

func (i *ProjectGroup) ToProjectGroupOutput() ProjectGroupOutput {
	return i.ToProjectGroupOutputWithContext(context.Background())
}

func (i *ProjectGroup) ToProjectGroupOutputWithContext(ctx context.Context) ProjectGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGroupOutput)
}

// ProjectGroupArrayInput is an input type that accepts ProjectGroupArray and ProjectGroupArrayOutput values.
// You can construct a concrete instance of `ProjectGroupArrayInput` via:
//
//	ProjectGroupArray{ ProjectGroupArgs{...} }
type ProjectGroupArrayInput interface {
	pulumi.Input

	ToProjectGroupArrayOutput() ProjectGroupArrayOutput
	ToProjectGroupArrayOutputWithContext(context.Context) ProjectGroupArrayOutput
}

type ProjectGroupArray []ProjectGroupInput

func (ProjectGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectGroup)(nil)).Elem()
}

func (i ProjectGroupArray) ToProjectGroupArrayOutput() ProjectGroupArrayOutput {
	return i.ToProjectGroupArrayOutputWithContext(context.Background())
}

func (i ProjectGroupArray) ToProjectGroupArrayOutputWithContext(ctx context.Context) ProjectGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGroupArrayOutput)
}

// ProjectGroupMapInput is an input type that accepts ProjectGroupMap and ProjectGroupMapOutput values.
// You can construct a concrete instance of `ProjectGroupMapInput` via:
//
//	ProjectGroupMap{ "key": ProjectGroupArgs{...} }
type ProjectGroupMapInput interface {
	pulumi.Input

	ToProjectGroupMapOutput() ProjectGroupMapOutput
	ToProjectGroupMapOutputWithContext(context.Context) ProjectGroupMapOutput
}

type ProjectGroupMap map[string]ProjectGroupInput

func (ProjectGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectGroup)(nil)).Elem()
}

func (i ProjectGroupMap) ToProjectGroupMapOutput() ProjectGroupMapOutput {
	return i.ToProjectGroupMapOutputWithContext(context.Background())
}

func (i ProjectGroupMap) ToProjectGroupMapOutputWithContext(ctx context.Context) ProjectGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGroupMapOutput)
}

type ProjectGroupOutput struct{ *pulumi.OutputState }

func (ProjectGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGroup)(nil)).Elem()
}

func (o ProjectGroupOutput) ToProjectGroupOutput() ProjectGroupOutput {
	return o
}

func (o ProjectGroupOutput) ToProjectGroupOutputWithContext(ctx context.Context) ProjectGroupOutput {
	return o
}

// The description of this project group.
func (o ProjectGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of this resource.
func (o ProjectGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the retention policy associated with this project group.
func (o ProjectGroupOutput) RetentionPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroup) pulumi.StringOutput { return v.RetentionPolicyId }).(pulumi.StringOutput)
}

// The space ID associated with this project group.
func (o ProjectGroupOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroup) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

type ProjectGroupArrayOutput struct{ *pulumi.OutputState }

func (ProjectGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectGroup)(nil)).Elem()
}

func (o ProjectGroupArrayOutput) ToProjectGroupArrayOutput() ProjectGroupArrayOutput {
	return o
}

func (o ProjectGroupArrayOutput) ToProjectGroupArrayOutputWithContext(ctx context.Context) ProjectGroupArrayOutput {
	return o
}

func (o ProjectGroupArrayOutput) Index(i pulumi.IntInput) ProjectGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectGroup {
		return vs[0].([]*ProjectGroup)[vs[1].(int)]
	}).(ProjectGroupOutput)
}

type ProjectGroupMapOutput struct{ *pulumi.OutputState }

func (ProjectGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectGroup)(nil)).Elem()
}

func (o ProjectGroupMapOutput) ToProjectGroupMapOutput() ProjectGroupMapOutput {
	return o
}

func (o ProjectGroupMapOutput) ToProjectGroupMapOutputWithContext(ctx context.Context) ProjectGroupMapOutput {
	return o
}

func (o ProjectGroupMapOutput) MapIndex(k pulumi.StringInput) ProjectGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectGroup {
		return vs[0].(map[string]*ProjectGroup)[vs[1].(string)]
	}).(ProjectGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGroupInput)(nil)).Elem(), &ProjectGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGroupArrayInput)(nil)).Elem(), ProjectGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGroupMapInput)(nil)).Elem(), ProjectGroupMap{})
	pulumi.RegisterOutputType(ProjectGroupOutput{})
	pulumi.RegisterOutputType(ProjectGroupArrayOutput{})
	pulumi.RegisterOutputType(ProjectGroupMapOutput{})
}
