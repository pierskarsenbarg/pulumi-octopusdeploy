// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages script modules in Octopus Deploy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-octopusdeploy/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewScriptModule(ctx, "example", &octopusdeploy.ScriptModuleArgs{
//				Description: pulumi.String("A script module to use."),
//				Script: &octopusdeploy.ScriptModuleScriptArgs{
//					Body:   pulumi.String("function Say-Hello()\n{\n    Write-Output \"Hello, Octopus!\"\n}\n\n"),
//					Syntax: pulumi.String("PowerShell"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import octopusdeploy:index/scriptModule:ScriptModule [options] octopusdeploy_script_module.<name> <script-module-id>
//
// ```
type ScriptModule struct {
	pulumi.CustomResourceState

	// The description of this script module.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The script associated with this script module.
	Script ScriptModuleScriptOutput `pulumi:"script"`
	// The space ID associated with this resource.
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
	// The variable set ID for this script module.
	VariableSetId pulumi.StringOutput `pulumi:"variableSetId"`
}

// NewScriptModule registers a new resource with the given unique name, arguments, and options.
func NewScriptModule(ctx *pulumi.Context,
	name string, args *ScriptModuleArgs, opts ...pulumi.ResourceOption) (*ScriptModule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Script == nil {
		return nil, errors.New("invalid value for required argument 'Script'")
	}
	var resource ScriptModule
	err := ctx.RegisterResource("octopusdeploy:index/scriptModule:ScriptModule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScriptModule gets an existing ScriptModule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScriptModule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScriptModuleState, opts ...pulumi.ResourceOption) (*ScriptModule, error) {
	var resource ScriptModule
	err := ctx.ReadResource("octopusdeploy:index/scriptModule:ScriptModule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScriptModule resources.
type scriptModuleState struct {
	// The description of this script module.
	Description *string `pulumi:"description"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The script associated with this script module.
	Script *ScriptModuleScript `pulumi:"script"`
	// The space ID associated with this resource.
	SpaceId *string `pulumi:"spaceId"`
	// The variable set ID for this script module.
	VariableSetId *string `pulumi:"variableSetId"`
}

type ScriptModuleState struct {
	// The description of this script module.
	Description pulumi.StringPtrInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The script associated with this script module.
	Script ScriptModuleScriptPtrInput
	// The space ID associated with this resource.
	SpaceId pulumi.StringPtrInput
	// The variable set ID for this script module.
	VariableSetId pulumi.StringPtrInput
}

func (ScriptModuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scriptModuleState)(nil)).Elem()
}

type scriptModuleArgs struct {
	// The description of this script module.
	Description *string `pulumi:"description"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The script associated with this script module.
	Script ScriptModuleScript `pulumi:"script"`
	// The space ID associated with this resource.
	SpaceId *string `pulumi:"spaceId"`
	// The variable set ID for this script module.
	VariableSetId *string `pulumi:"variableSetId"`
}

// The set of arguments for constructing a ScriptModule resource.
type ScriptModuleArgs struct {
	// The description of this script module.
	Description pulumi.StringPtrInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The script associated with this script module.
	Script ScriptModuleScriptInput
	// The space ID associated with this resource.
	SpaceId pulumi.StringPtrInput
	// The variable set ID for this script module.
	VariableSetId pulumi.StringPtrInput
}

func (ScriptModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scriptModuleArgs)(nil)).Elem()
}

type ScriptModuleInput interface {
	pulumi.Input

	ToScriptModuleOutput() ScriptModuleOutput
	ToScriptModuleOutputWithContext(ctx context.Context) ScriptModuleOutput
}

func (*ScriptModule) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptModule)(nil)).Elem()
}

func (i *ScriptModule) ToScriptModuleOutput() ScriptModuleOutput {
	return i.ToScriptModuleOutputWithContext(context.Background())
}

func (i *ScriptModule) ToScriptModuleOutputWithContext(ctx context.Context) ScriptModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptModuleOutput)
}

// ScriptModuleArrayInput is an input type that accepts ScriptModuleArray and ScriptModuleArrayOutput values.
// You can construct a concrete instance of `ScriptModuleArrayInput` via:
//
//	ScriptModuleArray{ ScriptModuleArgs{...} }
type ScriptModuleArrayInput interface {
	pulumi.Input

	ToScriptModuleArrayOutput() ScriptModuleArrayOutput
	ToScriptModuleArrayOutputWithContext(context.Context) ScriptModuleArrayOutput
}

type ScriptModuleArray []ScriptModuleInput

func (ScriptModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScriptModule)(nil)).Elem()
}

func (i ScriptModuleArray) ToScriptModuleArrayOutput() ScriptModuleArrayOutput {
	return i.ToScriptModuleArrayOutputWithContext(context.Background())
}

func (i ScriptModuleArray) ToScriptModuleArrayOutputWithContext(ctx context.Context) ScriptModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptModuleArrayOutput)
}

// ScriptModuleMapInput is an input type that accepts ScriptModuleMap and ScriptModuleMapOutput values.
// You can construct a concrete instance of `ScriptModuleMapInput` via:
//
//	ScriptModuleMap{ "key": ScriptModuleArgs{...} }
type ScriptModuleMapInput interface {
	pulumi.Input

	ToScriptModuleMapOutput() ScriptModuleMapOutput
	ToScriptModuleMapOutputWithContext(context.Context) ScriptModuleMapOutput
}

type ScriptModuleMap map[string]ScriptModuleInput

func (ScriptModuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScriptModule)(nil)).Elem()
}

func (i ScriptModuleMap) ToScriptModuleMapOutput() ScriptModuleMapOutput {
	return i.ToScriptModuleMapOutputWithContext(context.Background())
}

func (i ScriptModuleMap) ToScriptModuleMapOutputWithContext(ctx context.Context) ScriptModuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptModuleMapOutput)
}

type ScriptModuleOutput struct{ *pulumi.OutputState }

func (ScriptModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptModule)(nil)).Elem()
}

func (o ScriptModuleOutput) ToScriptModuleOutput() ScriptModuleOutput {
	return o
}

func (o ScriptModuleOutput) ToScriptModuleOutputWithContext(ctx context.Context) ScriptModuleOutput {
	return o
}

// The description of this script module.
func (o ScriptModuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptModule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of this resource.
func (o ScriptModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScriptModule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The script associated with this script module.
func (o ScriptModuleOutput) Script() ScriptModuleScriptOutput {
	return o.ApplyT(func(v *ScriptModule) ScriptModuleScriptOutput { return v.Script }).(ScriptModuleScriptOutput)
}

// The space ID associated with this resource.
func (o ScriptModuleOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScriptModule) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

// The variable set ID for this script module.
func (o ScriptModuleOutput) VariableSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScriptModule) pulumi.StringOutput { return v.VariableSetId }).(pulumi.StringOutput)
}

type ScriptModuleArrayOutput struct{ *pulumi.OutputState }

func (ScriptModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScriptModule)(nil)).Elem()
}

func (o ScriptModuleArrayOutput) ToScriptModuleArrayOutput() ScriptModuleArrayOutput {
	return o
}

func (o ScriptModuleArrayOutput) ToScriptModuleArrayOutputWithContext(ctx context.Context) ScriptModuleArrayOutput {
	return o
}

func (o ScriptModuleArrayOutput) Index(i pulumi.IntInput) ScriptModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScriptModule {
		return vs[0].([]*ScriptModule)[vs[1].(int)]
	}).(ScriptModuleOutput)
}

type ScriptModuleMapOutput struct{ *pulumi.OutputState }

func (ScriptModuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScriptModule)(nil)).Elem()
}

func (o ScriptModuleMapOutput) ToScriptModuleMapOutput() ScriptModuleMapOutput {
	return o
}

func (o ScriptModuleMapOutput) ToScriptModuleMapOutputWithContext(ctx context.Context) ScriptModuleMapOutput {
	return o
}

func (o ScriptModuleMapOutput) MapIndex(k pulumi.StringInput) ScriptModuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScriptModule {
		return vs[0].(map[string]*ScriptModule)[vs[1].(string)]
	}).(ScriptModuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptModuleInput)(nil)).Elem(), &ScriptModule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptModuleArrayInput)(nil)).Elem(), ScriptModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptModuleMapInput)(nil)).Elem(), ScriptModuleMap{})
	pulumi.RegisterOutputType(ScriptModuleOutput{})
	pulumi.RegisterOutputType(ScriptModuleArrayOutput{})
	pulumi.RegisterOutputType(ScriptModuleMapOutput{})
}
