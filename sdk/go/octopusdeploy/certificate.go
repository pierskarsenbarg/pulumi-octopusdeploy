// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages certificates in Octopus Deploy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-octopusdeploy/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewCertificate(ctx, "example", &octopusdeploy.CertificateArgs{
//				CertificateData: pulumi.String("a-base-64-encoded-string-representing-the-certificate-data"),
//				Password:        pulumi.String("###########"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import octopusdeploy:index/certificate:Certificate [options] octopusdeploy_certificate.<name> <certificate-id>
//
// ```
type Certificate struct {
	pulumi.CustomResourceState

	Archived pulumi.StringOutput `pulumi:"archived"`
	// The encoded data of the certificate.
	CertificateData pulumi.StringOutput `pulumi:"certificateData"`
	// Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
	CertificateDataFormat pulumi.StringOutput `pulumi:"certificateDataFormat"`
	// A list of environment IDs associated with this resource.
	Environments pulumi.StringArrayOutput `pulumi:"environments"`
	// Indicates if the certificate has a private key.
	HasPrivateKey pulumi.BoolOutput `pulumi:"hasPrivateKey"`
	// Indicates if the certificate has expired.
	IsExpired               pulumi.BoolOutput   `pulumi:"isExpired"`
	IssuerCommonName        pulumi.StringOutput `pulumi:"issuerCommonName"`
	IssuerDistinguishedName pulumi.StringOutput `pulumi:"issuerDistinguishedName"`
	IssuerOrganization      pulumi.StringOutput `pulumi:"issuerOrganization"`
	// The name of this resource.
	Name      pulumi.StringOutput `pulumi:"name"`
	NotAfter  pulumi.StringOutput `pulumi:"notAfter"`
	NotBefore pulumi.StringOutput `pulumi:"notBefore"`
	Notes     pulumi.StringOutput `pulumi:"notes"`
	// The password associated with this resource.
	Password                 pulumi.StringOutput      `pulumi:"password"`
	ReplacedBy               pulumi.StringOutput      `pulumi:"replacedBy"`
	SelfSigned               pulumi.BoolOutput        `pulumi:"selfSigned"`
	SerialNumber             pulumi.StringOutput      `pulumi:"serialNumber"`
	SignatureAlgorithmName   pulumi.StringOutput      `pulumi:"signatureAlgorithmName"`
	SubjectAlternativeNames  pulumi.StringArrayOutput `pulumi:"subjectAlternativeNames"`
	SubjectCommonName        pulumi.StringOutput      `pulumi:"subjectCommonName"`
	SubjectDistinguishedName pulumi.StringOutput      `pulumi:"subjectDistinguishedName"`
	SubjectOrganization      pulumi.StringOutput      `pulumi:"subjectOrganization"`
	// A list of tenant tags associated with this resource.
	TenantTags pulumi.StringArrayOutput `pulumi:"tenantTags"`
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation pulumi.StringOutput `pulumi:"tenantedDeploymentParticipation"`
	// A list of tenant IDs associated with this resource.
	Tenants    pulumi.StringArrayOutput `pulumi:"tenants"`
	Thumbprint pulumi.StringOutput      `pulumi:"thumbprint"`
	Version    pulumi.IntOutput         `pulumi:"version"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateData == nil {
		return nil, errors.New("invalid value for required argument 'CertificateData'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	var resource Certificate
	err := ctx.RegisterResource("octopusdeploy:index/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("octopusdeploy:index/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	Archived *string `pulumi:"archived"`
	// The encoded data of the certificate.
	CertificateData *string `pulumi:"certificateData"`
	// Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
	CertificateDataFormat *string `pulumi:"certificateDataFormat"`
	// A list of environment IDs associated with this resource.
	Environments []string `pulumi:"environments"`
	// Indicates if the certificate has a private key.
	HasPrivateKey *bool `pulumi:"hasPrivateKey"`
	// Indicates if the certificate has expired.
	IsExpired               *bool   `pulumi:"isExpired"`
	IssuerCommonName        *string `pulumi:"issuerCommonName"`
	IssuerDistinguishedName *string `pulumi:"issuerDistinguishedName"`
	IssuerOrganization      *string `pulumi:"issuerOrganization"`
	// The name of this resource.
	Name      *string `pulumi:"name"`
	NotAfter  *string `pulumi:"notAfter"`
	NotBefore *string `pulumi:"notBefore"`
	Notes     *string `pulumi:"notes"`
	// The password associated with this resource.
	Password                 *string  `pulumi:"password"`
	ReplacedBy               *string  `pulumi:"replacedBy"`
	SelfSigned               *bool    `pulumi:"selfSigned"`
	SerialNumber             *string  `pulumi:"serialNumber"`
	SignatureAlgorithmName   *string  `pulumi:"signatureAlgorithmName"`
	SubjectAlternativeNames  []string `pulumi:"subjectAlternativeNames"`
	SubjectCommonName        *string  `pulumi:"subjectCommonName"`
	SubjectDistinguishedName *string  `pulumi:"subjectDistinguishedName"`
	SubjectOrganization      *string  `pulumi:"subjectOrganization"`
	// A list of tenant tags associated with this resource.
	TenantTags []string `pulumi:"tenantTags"`
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation *string `pulumi:"tenantedDeploymentParticipation"`
	// A list of tenant IDs associated with this resource.
	Tenants    []string `pulumi:"tenants"`
	Thumbprint *string  `pulumi:"thumbprint"`
	Version    *int     `pulumi:"version"`
}

type CertificateState struct {
	Archived pulumi.StringPtrInput
	// The encoded data of the certificate.
	CertificateData pulumi.StringPtrInput
	// Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
	CertificateDataFormat pulumi.StringPtrInput
	// A list of environment IDs associated with this resource.
	Environments pulumi.StringArrayInput
	// Indicates if the certificate has a private key.
	HasPrivateKey pulumi.BoolPtrInput
	// Indicates if the certificate has expired.
	IsExpired               pulumi.BoolPtrInput
	IssuerCommonName        pulumi.StringPtrInput
	IssuerDistinguishedName pulumi.StringPtrInput
	IssuerOrganization      pulumi.StringPtrInput
	// The name of this resource.
	Name      pulumi.StringPtrInput
	NotAfter  pulumi.StringPtrInput
	NotBefore pulumi.StringPtrInput
	Notes     pulumi.StringPtrInput
	// The password associated with this resource.
	Password                 pulumi.StringPtrInput
	ReplacedBy               pulumi.StringPtrInput
	SelfSigned               pulumi.BoolPtrInput
	SerialNumber             pulumi.StringPtrInput
	SignatureAlgorithmName   pulumi.StringPtrInput
	SubjectAlternativeNames  pulumi.StringArrayInput
	SubjectCommonName        pulumi.StringPtrInput
	SubjectDistinguishedName pulumi.StringPtrInput
	SubjectOrganization      pulumi.StringPtrInput
	// A list of tenant tags associated with this resource.
	TenantTags pulumi.StringArrayInput
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation pulumi.StringPtrInput
	// A list of tenant IDs associated with this resource.
	Tenants    pulumi.StringArrayInput
	Thumbprint pulumi.StringPtrInput
	Version    pulumi.IntPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	Archived *string `pulumi:"archived"`
	// The encoded data of the certificate.
	CertificateData string `pulumi:"certificateData"`
	// Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
	CertificateDataFormat *string `pulumi:"certificateDataFormat"`
	// A list of environment IDs associated with this resource.
	Environments []string `pulumi:"environments"`
	// Indicates if the certificate has a private key.
	HasPrivateKey *bool `pulumi:"hasPrivateKey"`
	// Indicates if the certificate has expired.
	IsExpired               *bool   `pulumi:"isExpired"`
	IssuerCommonName        *string `pulumi:"issuerCommonName"`
	IssuerDistinguishedName *string `pulumi:"issuerDistinguishedName"`
	IssuerOrganization      *string `pulumi:"issuerOrganization"`
	// The name of this resource.
	Name      *string `pulumi:"name"`
	NotAfter  *string `pulumi:"notAfter"`
	NotBefore *string `pulumi:"notBefore"`
	Notes     *string `pulumi:"notes"`
	// The password associated with this resource.
	Password                 string   `pulumi:"password"`
	ReplacedBy               *string  `pulumi:"replacedBy"`
	SelfSigned               *bool    `pulumi:"selfSigned"`
	SerialNumber             *string  `pulumi:"serialNumber"`
	SignatureAlgorithmName   *string  `pulumi:"signatureAlgorithmName"`
	SubjectAlternativeNames  []string `pulumi:"subjectAlternativeNames"`
	SubjectCommonName        *string  `pulumi:"subjectCommonName"`
	SubjectDistinguishedName *string  `pulumi:"subjectDistinguishedName"`
	SubjectOrganization      *string  `pulumi:"subjectOrganization"`
	// A list of tenant tags associated with this resource.
	TenantTags []string `pulumi:"tenantTags"`
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation *string `pulumi:"tenantedDeploymentParticipation"`
	// A list of tenant IDs associated with this resource.
	Tenants    []string `pulumi:"tenants"`
	Thumbprint *string  `pulumi:"thumbprint"`
	Version    *int     `pulumi:"version"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	Archived pulumi.StringPtrInput
	// The encoded data of the certificate.
	CertificateData pulumi.StringInput
	// Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
	CertificateDataFormat pulumi.StringPtrInput
	// A list of environment IDs associated with this resource.
	Environments pulumi.StringArrayInput
	// Indicates if the certificate has a private key.
	HasPrivateKey pulumi.BoolPtrInput
	// Indicates if the certificate has expired.
	IsExpired               pulumi.BoolPtrInput
	IssuerCommonName        pulumi.StringPtrInput
	IssuerDistinguishedName pulumi.StringPtrInput
	IssuerOrganization      pulumi.StringPtrInput
	// The name of this resource.
	Name      pulumi.StringPtrInput
	NotAfter  pulumi.StringPtrInput
	NotBefore pulumi.StringPtrInput
	Notes     pulumi.StringPtrInput
	// The password associated with this resource.
	Password                 pulumi.StringInput
	ReplacedBy               pulumi.StringPtrInput
	SelfSigned               pulumi.BoolPtrInput
	SerialNumber             pulumi.StringPtrInput
	SignatureAlgorithmName   pulumi.StringPtrInput
	SubjectAlternativeNames  pulumi.StringArrayInput
	SubjectCommonName        pulumi.StringPtrInput
	SubjectDistinguishedName pulumi.StringPtrInput
	SubjectOrganization      pulumi.StringPtrInput
	// A list of tenant tags associated with this resource.
	TenantTags pulumi.StringArrayInput
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation pulumi.StringPtrInput
	// A list of tenant IDs associated with this resource.
	Tenants    pulumi.StringArrayInput
	Thumbprint pulumi.StringPtrInput
	Version    pulumi.IntPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//	CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) Archived() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Archived }).(pulumi.StringOutput)
}

// The encoded data of the certificate.
func (o CertificateOutput) CertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateData }).(pulumi.StringOutput)
}

// Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
func (o CertificateOutput) CertificateDataFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateDataFormat }).(pulumi.StringOutput)
}

// A list of environment IDs associated with this resource.
func (o CertificateOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringArrayOutput { return v.Environments }).(pulumi.StringArrayOutput)
}

// Indicates if the certificate has a private key.
func (o CertificateOutput) HasPrivateKey() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.HasPrivateKey }).(pulumi.BoolOutput)
}

// Indicates if the certificate has expired.
func (o CertificateOutput) IsExpired() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.IsExpired }).(pulumi.BoolOutput)
}

func (o CertificateOutput) IssuerCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.IssuerCommonName }).(pulumi.StringOutput)
}

func (o CertificateOutput) IssuerDistinguishedName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.IssuerDistinguishedName }).(pulumi.StringOutput)
}

func (o CertificateOutput) IssuerOrganization() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.IssuerOrganization }).(pulumi.StringOutput)
}

// The name of this resource.
func (o CertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CertificateOutput) NotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.NotAfter }).(pulumi.StringOutput)
}

func (o CertificateOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.NotBefore }).(pulumi.StringOutput)
}

func (o CertificateOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Notes }).(pulumi.StringOutput)
}

// The password associated with this resource.
func (o CertificateOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o CertificateOutput) ReplacedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.ReplacedBy }).(pulumi.StringOutput)
}

func (o CertificateOutput) SelfSigned() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.SelfSigned }).(pulumi.BoolOutput)
}

func (o CertificateOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.SerialNumber }).(pulumi.StringOutput)
}

func (o CertificateOutput) SignatureAlgorithmName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.SignatureAlgorithmName }).(pulumi.StringOutput)
}

func (o CertificateOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringArrayOutput { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

func (o CertificateOutput) SubjectCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.SubjectCommonName }).(pulumi.StringOutput)
}

func (o CertificateOutput) SubjectDistinguishedName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.SubjectDistinguishedName }).(pulumi.StringOutput)
}

func (o CertificateOutput) SubjectOrganization() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.SubjectOrganization }).(pulumi.StringOutput)
}

// A list of tenant tags associated with this resource.
func (o CertificateOutput) TenantTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringArrayOutput { return v.TenantTags }).(pulumi.StringArrayOutput)
}

// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
func (o CertificateOutput) TenantedDeploymentParticipation() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.TenantedDeploymentParticipation }).(pulumi.StringOutput)
}

// A list of tenant IDs associated with this resource.
func (o CertificateOutput) Tenants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringArrayOutput { return v.Tenants }).(pulumi.StringArrayOutput)
}

func (o CertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Thumbprint }).(pulumi.StringOutput)
}

func (o CertificateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *Certificate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].([]*Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].(map[string]*Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
