// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages scoped user roles in Octopus Deploy.
//
// > **NOTE on Team User Roles and Scoped User Roles:** We currently
// provides both a standalone Scoped User Role resource
// and a Team resource with `userRoles` blocks defined in-line. At this time you
// cannot use a Team with in-line userRoles in conjunction with any Scoped User Role
// resources. Doing so will cause a conflict of user role settings and will overwrite
// user roles.
type ScopedUserRole struct {
	pulumi.CustomResourceState

	EnvironmentIds  pulumi.StringArrayOutput `pulumi:"environmentIds"`
	ProjectGroupIds pulumi.StringArrayOutput `pulumi:"projectGroupIds"`
	ProjectIds      pulumi.StringArrayOutput `pulumi:"projectIds"`
	SpaceId         pulumi.StringOutput      `pulumi:"spaceId"`
	TeamId          pulumi.StringOutput      `pulumi:"teamId"`
	TenantIds       pulumi.StringArrayOutput `pulumi:"tenantIds"`
	UserRoleId      pulumi.StringOutput      `pulumi:"userRoleId"`
}

// NewScopedUserRole registers a new resource with the given unique name, arguments, and options.
func NewScopedUserRole(ctx *pulumi.Context,
	name string, args *ScopedUserRoleArgs, opts ...pulumi.ResourceOption) (*ScopedUserRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SpaceId == nil {
		return nil, errors.New("invalid value for required argument 'SpaceId'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	if args.UserRoleId == nil {
		return nil, errors.New("invalid value for required argument 'UserRoleId'")
	}
	var resource ScopedUserRole
	err := ctx.RegisterResource("octopusdeploy:index/scopedUserRole:ScopedUserRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopedUserRole gets an existing ScopedUserRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopedUserRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopedUserRoleState, opts ...pulumi.ResourceOption) (*ScopedUserRole, error) {
	var resource ScopedUserRole
	err := ctx.ReadResource("octopusdeploy:index/scopedUserRole:ScopedUserRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopedUserRole resources.
type scopedUserRoleState struct {
	EnvironmentIds  []string `pulumi:"environmentIds"`
	ProjectGroupIds []string `pulumi:"projectGroupIds"`
	ProjectIds      []string `pulumi:"projectIds"`
	SpaceId         *string  `pulumi:"spaceId"`
	TeamId          *string  `pulumi:"teamId"`
	TenantIds       []string `pulumi:"tenantIds"`
	UserRoleId      *string  `pulumi:"userRoleId"`
}

type ScopedUserRoleState struct {
	EnvironmentIds  pulumi.StringArrayInput
	ProjectGroupIds pulumi.StringArrayInput
	ProjectIds      pulumi.StringArrayInput
	SpaceId         pulumi.StringPtrInput
	TeamId          pulumi.StringPtrInput
	TenantIds       pulumi.StringArrayInput
	UserRoleId      pulumi.StringPtrInput
}

func (ScopedUserRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopedUserRoleState)(nil)).Elem()
}

type scopedUserRoleArgs struct {
	EnvironmentIds  []string `pulumi:"environmentIds"`
	ProjectGroupIds []string `pulumi:"projectGroupIds"`
	ProjectIds      []string `pulumi:"projectIds"`
	SpaceId         string   `pulumi:"spaceId"`
	TeamId          string   `pulumi:"teamId"`
	TenantIds       []string `pulumi:"tenantIds"`
	UserRoleId      string   `pulumi:"userRoleId"`
}

// The set of arguments for constructing a ScopedUserRole resource.
type ScopedUserRoleArgs struct {
	EnvironmentIds  pulumi.StringArrayInput
	ProjectGroupIds pulumi.StringArrayInput
	ProjectIds      pulumi.StringArrayInput
	SpaceId         pulumi.StringInput
	TeamId          pulumi.StringInput
	TenantIds       pulumi.StringArrayInput
	UserRoleId      pulumi.StringInput
}

func (ScopedUserRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopedUserRoleArgs)(nil)).Elem()
}

type ScopedUserRoleInput interface {
	pulumi.Input

	ToScopedUserRoleOutput() ScopedUserRoleOutput
	ToScopedUserRoleOutputWithContext(ctx context.Context) ScopedUserRoleOutput
}

func (*ScopedUserRole) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopedUserRole)(nil)).Elem()
}

func (i *ScopedUserRole) ToScopedUserRoleOutput() ScopedUserRoleOutput {
	return i.ToScopedUserRoleOutputWithContext(context.Background())
}

func (i *ScopedUserRole) ToScopedUserRoleOutputWithContext(ctx context.Context) ScopedUserRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopedUserRoleOutput)
}

// ScopedUserRoleArrayInput is an input type that accepts ScopedUserRoleArray and ScopedUserRoleArrayOutput values.
// You can construct a concrete instance of `ScopedUserRoleArrayInput` via:
//
//	ScopedUserRoleArray{ ScopedUserRoleArgs{...} }
type ScopedUserRoleArrayInput interface {
	pulumi.Input

	ToScopedUserRoleArrayOutput() ScopedUserRoleArrayOutput
	ToScopedUserRoleArrayOutputWithContext(context.Context) ScopedUserRoleArrayOutput
}

type ScopedUserRoleArray []ScopedUserRoleInput

func (ScopedUserRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopedUserRole)(nil)).Elem()
}

func (i ScopedUserRoleArray) ToScopedUserRoleArrayOutput() ScopedUserRoleArrayOutput {
	return i.ToScopedUserRoleArrayOutputWithContext(context.Background())
}

func (i ScopedUserRoleArray) ToScopedUserRoleArrayOutputWithContext(ctx context.Context) ScopedUserRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopedUserRoleArrayOutput)
}

// ScopedUserRoleMapInput is an input type that accepts ScopedUserRoleMap and ScopedUserRoleMapOutput values.
// You can construct a concrete instance of `ScopedUserRoleMapInput` via:
//
//	ScopedUserRoleMap{ "key": ScopedUserRoleArgs{...} }
type ScopedUserRoleMapInput interface {
	pulumi.Input

	ToScopedUserRoleMapOutput() ScopedUserRoleMapOutput
	ToScopedUserRoleMapOutputWithContext(context.Context) ScopedUserRoleMapOutput
}

type ScopedUserRoleMap map[string]ScopedUserRoleInput

func (ScopedUserRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopedUserRole)(nil)).Elem()
}

func (i ScopedUserRoleMap) ToScopedUserRoleMapOutput() ScopedUserRoleMapOutput {
	return i.ToScopedUserRoleMapOutputWithContext(context.Background())
}

func (i ScopedUserRoleMap) ToScopedUserRoleMapOutputWithContext(ctx context.Context) ScopedUserRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopedUserRoleMapOutput)
}

type ScopedUserRoleOutput struct{ *pulumi.OutputState }

func (ScopedUserRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopedUserRole)(nil)).Elem()
}

func (o ScopedUserRoleOutput) ToScopedUserRoleOutput() ScopedUserRoleOutput {
	return o
}

func (o ScopedUserRoleOutput) ToScopedUserRoleOutputWithContext(ctx context.Context) ScopedUserRoleOutput {
	return o
}

func (o ScopedUserRoleOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopedUserRole) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

func (o ScopedUserRoleOutput) ProjectGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopedUserRole) pulumi.StringArrayOutput { return v.ProjectGroupIds }).(pulumi.StringArrayOutput)
}

func (o ScopedUserRoleOutput) ProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopedUserRole) pulumi.StringArrayOutput { return v.ProjectIds }).(pulumi.StringArrayOutput)
}

func (o ScopedUserRoleOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopedUserRole) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

func (o ScopedUserRoleOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopedUserRole) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

func (o ScopedUserRoleOutput) TenantIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopedUserRole) pulumi.StringArrayOutput { return v.TenantIds }).(pulumi.StringArrayOutput)
}

func (o ScopedUserRoleOutput) UserRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopedUserRole) pulumi.StringOutput { return v.UserRoleId }).(pulumi.StringOutput)
}

type ScopedUserRoleArrayOutput struct{ *pulumi.OutputState }

func (ScopedUserRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopedUserRole)(nil)).Elem()
}

func (o ScopedUserRoleArrayOutput) ToScopedUserRoleArrayOutput() ScopedUserRoleArrayOutput {
	return o
}

func (o ScopedUserRoleArrayOutput) ToScopedUserRoleArrayOutputWithContext(ctx context.Context) ScopedUserRoleArrayOutput {
	return o
}

func (o ScopedUserRoleArrayOutput) Index(i pulumi.IntInput) ScopedUserRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScopedUserRole {
		return vs[0].([]*ScopedUserRole)[vs[1].(int)]
	}).(ScopedUserRoleOutput)
}

type ScopedUserRoleMapOutput struct{ *pulumi.OutputState }

func (ScopedUserRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopedUserRole)(nil)).Elem()
}

func (o ScopedUserRoleMapOutput) ToScopedUserRoleMapOutput() ScopedUserRoleMapOutput {
	return o
}

func (o ScopedUserRoleMapOutput) ToScopedUserRoleMapOutputWithContext(ctx context.Context) ScopedUserRoleMapOutput {
	return o
}

func (o ScopedUserRoleMapOutput) MapIndex(k pulumi.StringInput) ScopedUserRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScopedUserRole {
		return vs[0].(map[string]*ScopedUserRole)[vs[1].(string)]
	}).(ScopedUserRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScopedUserRoleInput)(nil)).Elem(), &ScopedUserRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopedUserRoleArrayInput)(nil)).Elem(), ScopedUserRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopedUserRoleMapInput)(nil)).Elem(), ScopedUserRoleMap{})
	pulumi.RegisterOutputType(ScopedUserRoleOutput{})
	pulumi.RegisterOutputType(ScopedUserRoleArrayOutput{})
	pulumi.RegisterOutputType(ScopedUserRoleMapOutput{})
}
