// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages users in Octopus Deploy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-octopusdeploy/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewUser(ctx, "example", &octopusdeploy.UserArgs{
//				DisplayName:  pulumi.String("Bob Smith"),
//				EmailAddress: pulumi.String("bob.smith@example.com"),
//				Identities: octopusdeploy.UserIdentityArray{
//					&octopusdeploy.UserIdentityArgs{
//						Claims: octopusdeploy.UserIdentityClaimArray{
//							&octopusdeploy.UserIdentityClaimArgs{
//								IsIdentifyingClaim: pulumi.Bool(true),
//								Name:               pulumi.String("email"),
//								Value:              pulumi.String("bob.smith@example.com"),
//							},
//							&octopusdeploy.UserIdentityClaimArgs{
//								IsIdentifyingClaim: pulumi.Bool(false),
//								Name:               pulumi.String("dn"),
//								Value:              pulumi.String("Bob Smith"),
//							},
//						},
//						Provider: pulumi.String("Octopus ID"),
//					},
//				},
//				IsActive:  pulumi.Bool(true),
//				IsService: pulumi.Bool(false),
//				Password:  pulumi.String("###########"),
//				Username:  pulumi.String("[username]"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import octopusdeploy:index/user:User [options] octopusdeploy_user.<name> <user-id>
//
// ```
type User struct {
	pulumi.CustomResourceState

	CanPasswordBeEdited pulumi.BoolOutput `pulumi:"canPasswordBeEdited"`
	// The display name of this resource.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The email address of this resource.
	EmailAddress pulumi.StringPtrOutput  `pulumi:"emailAddress"`
	Identities   UserIdentityArrayOutput `pulumi:"identities"`
	IsActive     pulumi.BoolPtrOutput    `pulumi:"isActive"`
	IsRequestor  pulumi.BoolOutput       `pulumi:"isRequestor"`
	IsService    pulumi.BoolPtrOutput    `pulumi:"isService"`
	// The password associated with this resource.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The username associated with this resource.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.Username != nil {
		args.Username = pulumi.ToSecret(args.Username).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"username",
	})
	opts = append(opts, secrets)
	var resource User
	err := ctx.RegisterResource("octopusdeploy:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("octopusdeploy:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	CanPasswordBeEdited *bool `pulumi:"canPasswordBeEdited"`
	// The display name of this resource.
	DisplayName *string `pulumi:"displayName"`
	// The email address of this resource.
	EmailAddress *string        `pulumi:"emailAddress"`
	Identities   []UserIdentity `pulumi:"identities"`
	IsActive     *bool          `pulumi:"isActive"`
	IsRequestor  *bool          `pulumi:"isRequestor"`
	IsService    *bool          `pulumi:"isService"`
	// The password associated with this resource.
	Password *string `pulumi:"password"`
	// The username associated with this resource.
	Username *string `pulumi:"username"`
}

type UserState struct {
	CanPasswordBeEdited pulumi.BoolPtrInput
	// The display name of this resource.
	DisplayName pulumi.StringPtrInput
	// The email address of this resource.
	EmailAddress pulumi.StringPtrInput
	Identities   UserIdentityArrayInput
	IsActive     pulumi.BoolPtrInput
	IsRequestor  pulumi.BoolPtrInput
	IsService    pulumi.BoolPtrInput
	// The password associated with this resource.
	Password pulumi.StringPtrInput
	// The username associated with this resource.
	Username pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The display name of this resource.
	DisplayName string `pulumi:"displayName"`
	// The email address of this resource.
	EmailAddress *string        `pulumi:"emailAddress"`
	Identities   []UserIdentity `pulumi:"identities"`
	IsActive     *bool          `pulumi:"isActive"`
	IsService    *bool          `pulumi:"isService"`
	// The password associated with this resource.
	Password *string `pulumi:"password"`
	// The username associated with this resource.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The display name of this resource.
	DisplayName pulumi.StringInput
	// The email address of this resource.
	EmailAddress pulumi.StringPtrInput
	Identities   UserIdentityArrayInput
	IsActive     pulumi.BoolPtrInput
	IsService    pulumi.BoolPtrInput
	// The password associated with this resource.
	Password pulumi.StringPtrInput
	// The username associated with this resource.
	Username pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) CanPasswordBeEdited() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.CanPasswordBeEdited }).(pulumi.BoolOutput)
}

// The display name of this resource.
func (o UserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The email address of this resource.
func (o UserOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.EmailAddress }).(pulumi.StringPtrOutput)
}

func (o UserOutput) Identities() UserIdentityArrayOutput {
	return o.ApplyT(func(v *User) UserIdentityArrayOutput { return v.Identities }).(UserIdentityArrayOutput)
}

func (o UserOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

func (o UserOutput) IsRequestor() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.IsRequestor }).(pulumi.BoolOutput)
}

func (o UserOutput) IsService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.IsService }).(pulumi.BoolPtrOutput)
}

// The password associated with this resource.
func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The username associated with this resource.
func (o UserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
